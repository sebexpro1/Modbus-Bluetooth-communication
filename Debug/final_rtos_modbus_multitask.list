
final_rtos_modbus_multitask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af74  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800b214  0800b214  0000c214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b4f4  0800b4f4  0000c4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b4fc  0800b4fc  0000c4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b500  0800b500  0000c500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800b504  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004c64  24000014  0800b518  0000d014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004c78  0800b518  0000dc78  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d014  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023de5  00000000  00000000  0000d042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000413c  00000000  00000000  00030e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001900  00000000  00000000  00034f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000137d  00000000  00000000  00036868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000077e9  00000000  00000000  00037be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020c4f  00000000  00000000  0003f3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016fac0  00000000  00000000  0006001d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cfadd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006a28  00000000  00000000  001cfb20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000007d  00000000  00000000  001d6548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b1fc 	.word	0x0800b1fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	0800b1fc 	.word	0x0800b1fc

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <HAL_UARTEx_RxEventCallback>:
  .stack_size = 128 * 4,
  .priority = (osPriority_t) osPriorityAboveNormal,
};
/* USER CODE BEGIN PV */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	807b      	strh	r3, [r7, #2]
	//clearArray(RxData, 32);
	new_data = 1;
 80005dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000608 <HAL_UARTEx_RxEventCallback+0x38>)
 80005de:	2201      	movs	r2, #1
 80005e0:	701a      	strb	r2, [r3, #0]
	status1 = osMessageQueuePut(user_MsgQueue, &new_data,0,0);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <HAL_UARTEx_RxEventCallback+0x3c>)
 80005e4:	6818      	ldr	r0, [r3, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	2200      	movs	r2, #0
 80005ea:	4907      	ldr	r1, [pc, #28]	@ (8000608 <HAL_UARTEx_RxEventCallback+0x38>)
 80005ec:	f007 ffc4 	bl	8008578 <osMessageQueuePut>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a07      	ldr	r2, [pc, #28]	@ (8000610 <HAL_UARTEx_RxEventCallback+0x40>)
 80005f4:	6013      	str	r3, [r2, #0]
	//kolejka danych
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, RxData, 64);
 80005f6:	2240      	movs	r2, #64	@ 0x40
 80005f8:	4906      	ldr	r1, [pc, #24]	@ (8000614 <HAL_UARTEx_RxEventCallback+0x44>)
 80005fa:	4807      	ldr	r0, [pc, #28]	@ (8000618 <HAL_UARTEx_RxEventCallback+0x48>)
 80005fc:	f007 fd6f 	bl	80080de <HAL_UARTEx_ReceiveToIdle_IT>

}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	240001b0 	.word	0x240001b0
 800060c:	240001b8 	.word	0x240001b8
 8000610:	240001bc 	.word	0x240001bc
 8000614:	24000030 	.word	0x24000030
 8000618:	240001d4 	.word	0x240001d4

0800061c <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000620:	f000 faf0 	bl	8000c04 <_ZL10MPU_Configv>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 ff44 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f864 	bl	80006f4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f93c 	bl	80008a8 <_ZL12MX_GPIO_Initv>
  MX_UART4_Init();
 8000630:	f000 f8da 	bl	80007e8 <_ZL13MX_UART4_Initv>
  /* USER CODE BEGIN 2 */
  modbus_on_compare_array();
 8000634:	f000 fb66 	bl	8000d04 <_Z23modbus_on_compare_arrayv>
  modbus_off_compare_array();
 8000638:	f000 fbb2 	bl	8000da0 <_Z24modbus_off_compare_arrayv>
  modbus_on_compare_array_AT();
 800063c:	f000 fb90 	bl	8000d60 <_Z26modbus_on_compare_array_ATv>
  modbus_off_compare_array_AT();
 8000640:	f000 fb9e 	bl	8000d80 <_Z27modbus_off_compare_array_ATv>


  //ATMode_on();
  //ATMode_on();
  user_MsgQueue = osMessageQueueNew(2,sizeof(uint8_t),NULL);
 8000644:	2200      	movs	r2, #0
 8000646:	2101      	movs	r1, #1
 8000648:	2002      	movs	r0, #2
 800064a:	f007 ff22 	bl	8008492 <osMessageQueueNew>
 800064e:	4603      	mov	r3, r0
 8000650:	4a1a      	ldr	r2, [pc, #104]	@ (80006bc <main+0xa0>)
 8000652:	6013      	str	r3, [r2, #0]
  rxtx_MsgQueue = osMessageQueueNew(2,sizeof(uint8_t),NULL);
 8000654:	2200      	movs	r2, #0
 8000656:	2101      	movs	r1, #1
 8000658:	2002      	movs	r0, #2
 800065a:	f007 ff1a 	bl	8008492 <osMessageQueueNew>
 800065e:	4603      	mov	r3, r0
 8000660:	4a17      	ldr	r2, [pc, #92]	@ (80006c0 <main+0xa4>)
 8000662:	6013      	str	r3, [r2, #0]
  taskComm_MsgQueue = osMessageQueueNew(2,sizeof(uint8_t),NULL);
 8000664:	2200      	movs	r2, #0
 8000666:	2101      	movs	r1, #1
 8000668:	2002      	movs	r0, #2
 800066a:	f007 ff12 	bl	8008492 <osMessageQueueNew>
 800066e:	4603      	mov	r3, r0
 8000670:	4a14      	ldr	r2, [pc, #80]	@ (80006c4 <main+0xa8>)
 8000672:	6013      	str	r3, [r2, #0]
  //user_MsgQueue = osMessageQueueNew(2, 16,NULL);
  //rxtx_MsgQueue = osMessageQueueNew(2, 16,NULL);

  //HAL_UARTEx_ReceiveToIdle_IT(&huart4, RxData, 32);
  HAL_UARTEx_ReceiveToIdle_IT(&huart4, RxData, 64);
 8000674:	2240      	movs	r2, #64	@ 0x40
 8000676:	4914      	ldr	r1, [pc, #80]	@ (80006c8 <main+0xac>)
 8000678:	4814      	ldr	r0, [pc, #80]	@ (80006cc <main+0xb0>)
 800067a:	f007 fd30 	bl	80080de <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800067e:	f007 fe11 	bl	80082a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartmainTask, NULL, &mainTask_attributes);
 8000682:	4a13      	ldr	r2, [pc, #76]	@ (80006d0 <main+0xb4>)
 8000684:	2100      	movs	r1, #0
 8000686:	4813      	ldr	r0, [pc, #76]	@ (80006d4 <main+0xb8>)
 8000688:	f007 fe56 	bl	8008338 <osThreadNew>
 800068c:	4603      	mov	r3, r0
 800068e:	4a12      	ldr	r2, [pc, #72]	@ (80006d8 <main+0xbc>)
 8000690:	6013      	str	r3, [r2, #0]

  /* creation of SendTask */
  SendTaskHandle = osThreadNew(StartSendTask, NULL, &SendTask_attributes);
 8000692:	4a12      	ldr	r2, [pc, #72]	@ (80006dc <main+0xc0>)
 8000694:	2100      	movs	r1, #0
 8000696:	4812      	ldr	r0, [pc, #72]	@ (80006e0 <main+0xc4>)
 8000698:	f007 fe4e 	bl	8008338 <osThreadNew>
 800069c:	4603      	mov	r3, r0
 800069e:	4a11      	ldr	r2, [pc, #68]	@ (80006e4 <main+0xc8>)
 80006a0:	6013      	str	r3, [r2, #0]

  /* creation of ReceiveTask */
  ReceiveTaskHandle = osThreadNew(StartReceiveTask, NULL, &ReceiveTask_attributes);
 80006a2:	4a11      	ldr	r2, [pc, #68]	@ (80006e8 <main+0xcc>)
 80006a4:	2100      	movs	r1, #0
 80006a6:	4811      	ldr	r0, [pc, #68]	@ (80006ec <main+0xd0>)
 80006a8:	f007 fe46 	bl	8008338 <osThreadNew>
 80006ac:	4603      	mov	r3, r0
 80006ae:	4a10      	ldr	r2, [pc, #64]	@ (80006f0 <main+0xd4>)
 80006b0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006b2:	f007 fe1b 	bl	80082ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b6:	bf00      	nop
 80006b8:	e7fd      	b.n	80006b6 <main+0x9a>
 80006ba:	bf00      	nop
 80006bc:	240001b8 	.word	0x240001b8
 80006c0:	240001c0 	.word	0x240001c0
 80006c4:	240001c8 	.word	0x240001c8
 80006c8:	24000030 	.word	0x24000030
 80006cc:	240001d4 	.word	0x240001d4
 80006d0:	0800b250 	.word	0x0800b250
 80006d4:	080009c5 	.word	0x080009c5
 80006d8:	24000268 	.word	0x24000268
 80006dc:	0800b274 	.word	0x0800b274
 80006e0:	08000b01 	.word	0x08000b01
 80006e4:	2400026c 	.word	0x2400026c
 80006e8:	0800b298 	.word	0x0800b298
 80006ec:	08000b65 	.word	0x08000b65
 80006f0:	24000270 	.word	0x24000270

080006f4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b09c      	sub	sp, #112	@ 0x70
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fe:	224c      	movs	r2, #76	@ 0x4c
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f00a fd40 	bl	800b188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	2220      	movs	r2, #32
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f00a fd3a 	bl	800b188 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000714:	2002      	movs	r0, #2
 8000716:	f001 fff5 	bl	8002704 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b30      	ldr	r3, [pc, #192]	@ (80007e0 <_Z18SystemClock_Configv+0xec>)
 8000720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000722:	4a2f      	ldr	r2, [pc, #188]	@ (80007e0 <_Z18SystemClock_Configv+0xec>)
 8000724:	f023 0301 	bic.w	r3, r3, #1
 8000728:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800072a:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <_Z18SystemClock_Configv+0xec>)
 800072c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	4b2b      	ldr	r3, [pc, #172]	@ (80007e4 <_Z18SystemClock_Configv+0xf0>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800073c:	4a29      	ldr	r2, [pc, #164]	@ (80007e4 <_Z18SystemClock_Configv+0xf0>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b27      	ldr	r3, [pc, #156]	@ (80007e4 <_Z18SystemClock_Configv+0xf0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000750:	bf00      	nop
 8000752:	4b24      	ldr	r3, [pc, #144]	@ (80007e4 <_Z18SystemClock_Configv+0xf0>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800075a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d1f3      	bne.n	8000752 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076a:	2302      	movs	r3, #2
 800076c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800076e:	2301      	movs	r3, #1
 8000770:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000772:	2340      	movs	r3, #64	@ 0x40
 8000774:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000776:	2300      	movs	r3, #0
 8000778:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800077e:	4618      	mov	r0, r3
 8000780:	f001 fffa 	bl	8002778 <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	bf14      	ite	ne
 800078a:	2301      	movne	r3, #1
 800078c:	2300      	moveq	r3, #0
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000794:	f000 fa74 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	233f      	movs	r3, #63	@ 0x3f
 800079a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ac:	2340      	movs	r3, #64	@ 0x40
 80007ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2101      	movs	r1, #1
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fc35 	bl	800302c <HAL_RCC_ClockConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	bf14      	ite	ne
 80007c8:	2301      	movne	r3, #1
 80007ca:	2300      	moveq	r3, #0
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <_Z18SystemClock_Configv+0xe2>
  {
    Error_Handler();
 80007d2:	f000 fa55 	bl	8000c80 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3770      	adds	r7, #112	@ 0x70
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	58000400 	.word	0x58000400
 80007e4:	58024800 	.word	0x58024800

080007e8 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 80007ee:	4a2d      	ldr	r2, [pc, #180]	@ (80008a4 <_ZL13MX_UART4_Initv+0xbc>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 19200;
 80007f2:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 80007f4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80007f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b27      	ldr	r3, [pc, #156]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000806:	4b26      	ldr	r3, [pc, #152]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b24      	ldr	r3, [pc, #144]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082a:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000830:	481b      	ldr	r0, [pc, #108]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 8000832:	f005 f8c3 	bl	80059bc <HAL_UART_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	bf14      	ite	ne
 800083c:	2301      	movne	r3, #1
 800083e:	2300      	moveq	r3, #0
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <_ZL13MX_UART4_Initv+0x62>
  {
    Error_Handler();
 8000846:	f000 fa1b 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084a:	2100      	movs	r1, #0
 800084c:	4814      	ldr	r0, [pc, #80]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 800084e:	f007 fbca 	bl	8007fe6 <HAL_UARTEx_SetTxFifoThreshold>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	bf14      	ite	ne
 8000858:	2301      	movne	r3, #1
 800085a:	2300      	moveq	r3, #0
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 8000862:	f000 fa0d 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000866:	2100      	movs	r1, #0
 8000868:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 800086a:	f007 fbfa 	bl	8008062 <HAL_UARTEx_SetRxFifoThreshold>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf14      	ite	ne
 8000874:	2301      	movne	r3, #1
 8000876:	2300      	moveq	r3, #0
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <_ZL13MX_UART4_Initv+0x9a>
  {
    Error_Handler();
 800087e:	f000 f9ff 	bl	8000c80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000882:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <_ZL13MX_UART4_Initv+0xb8>)
 8000884:	f007 fb76 	bl	8007f74 <HAL_UARTEx_DisableFifoMode>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	bf14      	ite	ne
 800088e:	2301      	movne	r3, #1
 8000890:	2300      	moveq	r3, #0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <_ZL13MX_UART4_Initv+0xb4>
  {
    Error_Handler();
 8000898:	f000 f9f2 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	240001d4 	.word	0x240001d4
 80008a4:	40004c00 	.word	0x40004c00

080008a8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008be:	4b3d      	ldr	r3, [pc, #244]	@ (80009b4 <_ZL12MX_GPIO_Initv+0x10c>)
 80008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c4:	4a3b      	ldr	r2, [pc, #236]	@ (80009b4 <_ZL12MX_GPIO_Initv+0x10c>)
 80008c6:	f043 0320 	orr.w	r3, r3, #32
 80008ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ce:	4b39      	ldr	r3, [pc, #228]	@ (80009b4 <_ZL12MX_GPIO_Initv+0x10c>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d4:	f003 0320 	and.w	r3, r3, #32
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008dc:	4b35      	ldr	r3, [pc, #212]	@ (80009b4 <_ZL12MX_GPIO_Initv+0x10c>)
 80008de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e2:	4a34      	ldr	r2, [pc, #208]	@ (80009b4 <_ZL12MX_GPIO_Initv+0x10c>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ec:	4b31      	ldr	r3, [pc, #196]	@ (80009b4 <_ZL12MX_GPIO_Initv+0x10c>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	4b2e      	ldr	r3, [pc, #184]	@ (80009b4 <_ZL12MX_GPIO_Initv+0x10c>)
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000900:	4a2c      	ldr	r2, [pc, #176]	@ (80009b4 <_ZL12MX_GPIO_Initv+0x10c>)
 8000902:	f043 0308 	orr.w	r3, r3, #8
 8000906:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800090a:	4b2a      	ldr	r3, [pc, #168]	@ (80009b4 <_ZL12MX_GPIO_Initv+0x10c>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000910:	f003 0308 	and.w	r3, r3, #8
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000918:	4b26      	ldr	r3, [pc, #152]	@ (80009b4 <_ZL12MX_GPIO_Initv+0x10c>)
 800091a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091e:	4a25      	ldr	r2, [pc, #148]	@ (80009b4 <_ZL12MX_GPIO_Initv+0x10c>)
 8000920:	f043 0310 	orr.w	r3, r3, #16
 8000924:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000928:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <_ZL12MX_GPIO_Initv+0x10c>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2101      	movs	r1, #1
 800093a:	481f      	ldr	r0, [pc, #124]	@ (80009b8 <_ZL12MX_GPIO_Initv+0x110>)
 800093c:	f001 fec8 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000946:	481d      	ldr	r0, [pc, #116]	@ (80009bc <_ZL12MX_GPIO_Initv+0x114>)
 8000948:	f001 fec2 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2102      	movs	r1, #2
 8000950:	481b      	ldr	r0, [pc, #108]	@ (80009c0 <_ZL12MX_GPIO_Initv+0x118>)
 8000952:	f001 febd 	bl	80026d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000956:	2301      	movs	r3, #1
 8000958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	4812      	ldr	r0, [pc, #72]	@ (80009b8 <_ZL12MX_GPIO_Initv+0x110>)
 800096e:	f001 fce7 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000972:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	480c      	ldr	r0, [pc, #48]	@ (80009bc <_ZL12MX_GPIO_Initv+0x114>)
 800098c:	f001 fcd8 	bl	8002340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000990:	2302      	movs	r3, #2
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4806      	ldr	r0, [pc, #24]	@ (80009c0 <_ZL12MX_GPIO_Initv+0x118>)
 80009a8:	f001 fcca 	bl	8002340 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	@ 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	58024400 	.word	0x58024400
 80009b8:	58021400 	.word	0x58021400
 80009bc:	58020400 	.word	0x58020400
 80009c0:	58021000 	.word	0x58021000

080009c4 <_Z13StartmainTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartmainTask */
void StartmainTask(void *argument)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	int i = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
	uint8_t new_data_rtos;
	BTM222_init_reset();
 80009d0:	f000 fa5c 	bl	8000e8c <_Z17BTM222_init_resetv>


  /* Infinite loop */
  for(;;)
  {
	  i++;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3301      	adds	r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
	  if(compareArrays(RxData, RxData_on_array_AT, 8,7))
 80009da:	2307      	movs	r3, #7
 80009dc:	2208      	movs	r2, #8
 80009de:	493d      	ldr	r1, [pc, #244]	@ (8000ad4 <_Z13StartmainTaskPv+0x110>)
 80009e0:	483d      	ldr	r0, [pc, #244]	@ (8000ad8 <_Z13StartmainTaskPv+0x114>)
 80009e2:	f000 fa13 	bl	8000e0c <_Z13compareArraysPhS_ii>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf14      	ite	ne
 80009ec:	2301      	movne	r3, #1
 80009ee:	2300      	moveq	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d004      	beq.n	8000a00 <_Z13StartmainTaskPv+0x3c>
	 	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2102      	movs	r1, #2
 80009fa:	4838      	ldr	r0, [pc, #224]	@ (8000adc <_Z13StartmainTaskPv+0x118>)
 80009fc:	f001 fe68 	bl	80026d0 <HAL_GPIO_WritePin>
	  }
	  if(compareArrays(RxData, RxData_off_array_AT, 11,10))
 8000a00:	230a      	movs	r3, #10
 8000a02:	220b      	movs	r2, #11
 8000a04:	4936      	ldr	r1, [pc, #216]	@ (8000ae0 <_Z13StartmainTaskPv+0x11c>)
 8000a06:	4834      	ldr	r0, [pc, #208]	@ (8000ad8 <_Z13StartmainTaskPv+0x114>)
 8000a08:	f000 fa00 	bl	8000e0c <_Z13compareArraysPhS_ii>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf14      	ite	ne
 8000a12:	2301      	movne	r3, #1
 8000a14:	2300      	moveq	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d004      	beq.n	8000a26 <_Z13StartmainTaskPv+0x62>
	  	 	  {
	  		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2102      	movs	r1, #2
 8000a20:	482e      	ldr	r0, [pc, #184]	@ (8000adc <_Z13StartmainTaskPv+0x118>)
 8000a22:	f001 fe55 	bl	80026d0 <HAL_GPIO_WritePin>
	 // if(ATMode == 1){
		//  ATMode_Pcom();
	  	//  }


	  if(compareArrays(RxData, RxData_on_array, 32, 0))
 8000a26:	2300      	movs	r3, #0
 8000a28:	2220      	movs	r2, #32
 8000a2a:	492e      	ldr	r1, [pc, #184]	@ (8000ae4 <_Z13StartmainTaskPv+0x120>)
 8000a2c:	482a      	ldr	r0, [pc, #168]	@ (8000ad8 <_Z13StartmainTaskPv+0x114>)
 8000a2e:	f000 f9ed 	bl	8000e0c <_Z13compareArraysPhS_ii>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	bf14      	ite	ne
 8000a38:	2301      	movne	r3, #1
 8000a3a:	2300      	moveq	r3, #0
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d008      	beq.n	8000a54 <_Z13StartmainTaskPv+0x90>
	  {
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2102      	movs	r1, #2
 8000a46:	4825      	ldr	r0, [pc, #148]	@ (8000adc <_Z13StartmainTaskPv+0x118>)
 8000a48:	f001 fe42 	bl	80026d0 <HAL_GPIO_WritePin>
	  	  clearArray(RxData, 32);
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	4822      	ldr	r0, [pc, #136]	@ (8000ad8 <_Z13StartmainTaskPv+0x114>)
 8000a50:	f000 fa00 	bl	8000e54 <_Z10clearArrayPhi>
	  	 // ATMode = 0;
	  	  //BTconnectMode = 1;
	  }
	  if((BTconnectMode) && (compareArrays(RxData, RxData_off_array, 32, 0)))
 8000a54:	4b24      	ldr	r3, [pc, #144]	@ (8000ae8 <_Z13StartmainTaskPv+0x124>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00a      	beq.n	8000a72 <_Z13StartmainTaskPv+0xae>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2220      	movs	r2, #32
 8000a60:	4922      	ldr	r1, [pc, #136]	@ (8000aec <_Z13StartmainTaskPv+0x128>)
 8000a62:	481d      	ldr	r0, [pc, #116]	@ (8000ad8 <_Z13StartmainTaskPv+0x114>)
 8000a64:	f000 f9d2 	bl	8000e0c <_Z13compareArraysPhS_ii>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <_Z13StartmainTaskPv+0xae>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <_Z13StartmainTaskPv+0xb0>
 8000a72:	2300      	movs	r3, #0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d009      	beq.n	8000a8c <_Z13StartmainTaskPv+0xc8>
	  {
		 // HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1,GPIO_PIN_RESET);
		  clearArray(RxData, 32);
 8000a78:	2120      	movs	r1, #32
 8000a7a:	4817      	ldr	r0, [pc, #92]	@ (8000ad8 <_Z13StartmainTaskPv+0x114>)
 8000a7c:	f000 f9ea 	bl	8000e54 <_Z10clearArrayPhi>
	  	  osDelay(500);
 8000a80:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a84:	f007 fcea 	bl	800845c <osDelay>
	  	  BTM222_init_reset();
 8000a88:	f000 fa00 	bl	8000e8c <_Z17BTM222_init_resetv>
	  	  //ATMode = 1;
	  	  //BTconnectMode = 0;
	  }
	  status1 = osMessageQueueGet(user_MsgQueue, &new_data_rtos,0,osWaitForever);
 8000a8c:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <_Z13StartmainTaskPv+0x12c>)
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	f107 010b 	add.w	r1, r7, #11
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f007 fdcd 	bl	8008638 <osMessageQueueGet>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a14      	ldr	r2, [pc, #80]	@ (8000af4 <_Z13StartmainTaskPv+0x130>)
 8000aa2:	6013      	str	r3, [r2, #0]
	  if (status1 == osOK && new_data_rtos == 1)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <_Z13StartmainTaskPv+0x130>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d10e      	bne.n	8000aca <_Z13StartmainTaskPv+0x106>
 8000aac:	7afb      	ldrb	r3, [r7, #11]
 8000aae:	2b01      	cmp	r3, #1
 8000ab0:	d10b      	bne.n	8000aca <_Z13StartmainTaskPv+0x106>
	  {
		  status3 = osMessageQueuePut(taskComm_MsgQueue, &new_data_rtos,0,1000);
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <_Z13StartmainTaskPv+0x134>)
 8000ab4:	6818      	ldr	r0, [r3, #0]
 8000ab6:	f107 010b 	add.w	r1, r7, #11
 8000aba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f007 fd5a 	bl	8008578 <osMessageQueuePut>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	4a0d      	ldr	r2, [pc, #52]	@ (8000afc <_Z13StartmainTaskPv+0x138>)
 8000ac8:	6013      	str	r3, [r2, #0]
	  //{
		//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);
	  //}


	  osDelay(10);
 8000aca:	200a      	movs	r0, #10
 8000acc:	f007 fcc6 	bl	800845c <osDelay>
	  i++;
 8000ad0:	e780      	b.n	80009d4 <_Z13StartmainTaskPv+0x10>
 8000ad2:	bf00      	nop
 8000ad4:	24000130 	.word	0x24000130
 8000ad8:	24000030 	.word	0x24000030
 8000adc:	58021000 	.word	0x58021000
 8000ae0:	24000170 	.word	0x24000170
 8000ae4:	240000b0 	.word	0x240000b0
 8000ae8:	240001d0 	.word	0x240001d0
 8000aec:	240000f0 	.word	0x240000f0
 8000af0:	240001b8 	.word	0x240001b8
 8000af4:	240001bc 	.word	0x240001bc
 8000af8:	240001c8 	.word	0x240001c8
 8000afc:	240001cc 	.word	0x240001cc

08000b00 <_Z13StartSendTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendTask */
void StartSendTask(void *argument)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  for(;;)
  {


	  status2 = osMessageQueueGet(rxtx_MsgQueue, &function_code_rtos_send,0,1000);
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <_Z13StartSendTaskPv+0x54>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	f107 010f 	add.w	r1, r7, #15
 8000b10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b14:	2200      	movs	r2, #0
 8000b16:	f007 fd8f 	bl	8008638 <osMessageQueueGet>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8000b58 <_Z13StartSendTaskPv+0x58>)
 8000b1e:	6013      	str	r3, [r2, #0]
	  if (status2 == osOK)
 8000b20:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <_Z13StartSendTaskPv+0x58>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d110      	bne.n	8000b4a <_Z13StartSendTaskPv+0x4a>
	  {
	  		  if(function_code_rtos_send == 3)
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d106      	bne.n	8000b3c <_Z13StartSendTaskPv+0x3c>
	  		  {
	  			  sendData(TxData, bytes+2);
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <_Z13StartSendTaskPv+0x5c>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3302      	adds	r3, #2
 8000b34:	4619      	mov	r1, r3
 8000b36:	480a      	ldr	r0, [pc, #40]	@ (8000b60 <_Z13StartSendTaskPv+0x60>)
 8000b38:	f000 fad6 	bl	80010e8 <_Z8sendDataPhi>
	  		  }
	  		  if(function_code_rtos_send == 6)
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d103      	bne.n	8000b4a <_Z13StartSendTaskPv+0x4a>
	  		  {

	  			  sendData(TxData, 8);
 8000b42:	2108      	movs	r1, #8
 8000b44:	4806      	ldr	r0, [pc, #24]	@ (8000b60 <_Z13StartSendTaskPv+0x60>)
 8000b46:	f000 facf 	bl	80010e8 <_Z8sendDataPhi>
	  		  }
	 }

	 osDelay(12);
 8000b4a:	200c      	movs	r0, #12
 8000b4c:	f007 fc86 	bl	800845c <osDelay>
	  status2 = osMessageQueueGet(rxtx_MsgQueue, &function_code_rtos_send,0,1000);
 8000b50:	e7da      	b.n	8000b08 <_Z13StartSendTaskPv+0x8>
 8000b52:	bf00      	nop
 8000b54:	240001c0 	.word	0x240001c0
 8000b58:	240001c4 	.word	0x240001c4
 8000b5c:	240001b4 	.word	0x240001b4
 8000b60:	24000070 	.word	0x24000070

08000b64 <_Z16StartReceiveTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void *argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	uint8_t new_data_rtos_rx;
	uint8_t function_code;

  for(;;)
  {
	  status3 = osMessageQueueGet(taskComm_MsgQueue, &new_data_rtos_rx,0,1000);
 8000b6c:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <_Z16StartReceiveTaskPv+0x8c>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	f107 010f 	add.w	r1, r7, #15
 8000b74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f007 fd5d 	bl	8008638 <osMessageQueueGet>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf4 <_Z16StartReceiveTaskPv+0x90>)
 8000b82:	6013      	str	r3, [r2, #0]
	  if (status3 == osOK)
 8000b84:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <_Z16StartReceiveTaskPv+0x90>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d12c      	bne.n	8000be6 <_Z16StartReceiveTaskPv+0x82>
	  {
	  if (RxData[0] == SLAVE_ID)
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <_Z16StartReceiveTaskPv+0x94>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b07      	cmp	r3, #7
 8000b92:	d128      	bne.n	8000be6 <_Z16StartReceiveTaskPv+0x82>
	  {
	  			switch (RxData[1]){
 8000b94:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <_Z16StartReceiveTaskPv+0x94>)
 8000b96:	785b      	ldrb	r3, [r3, #1]
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d002      	beq.n	8000ba2 <_Z16StartReceiveTaskPv+0x3e>
 8000b9c:	2b06      	cmp	r3, #6
 8000b9e:	d011      	beq.n	8000bc4 <_Z16StartReceiveTaskPv+0x60>
	  				writeSingleReg();
	  				function_code = 6;
	  				status2 = osMessageQueuePut(rxtx_MsgQueue, &function_code,0,1000);
	  				break;
	  			default:
	  				break;
 8000ba0:	e021      	b.n	8000be6 <_Z16StartReceiveTaskPv+0x82>
	  				readHoldingRegs();
 8000ba2:	f000 f98f 	bl	8000ec4 <_Z15readHoldingRegsv>
	  				function_code = 3;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	73bb      	strb	r3, [r7, #14]
	  				status2 = osMessageQueuePut(rxtx_MsgQueue, &function_code,0,1000);
 8000baa:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <_Z16StartReceiveTaskPv+0x98>)
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	f107 010e 	add.w	r1, r7, #14
 8000bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f007 fcde 	bl	8008578 <osMessageQueuePut>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4a10      	ldr	r2, [pc, #64]	@ (8000c00 <_Z16StartReceiveTaskPv+0x9c>)
 8000bc0:	6013      	str	r3, [r2, #0]
	  				break;
 8000bc2:	e010      	b.n	8000be6 <_Z16StartReceiveTaskPv+0x82>
	  				writeSingleReg();
 8000bc4:	f000 fa1c 	bl	8001000 <_Z14writeSingleRegv>
	  				function_code = 6;
 8000bc8:	2306      	movs	r3, #6
 8000bca:	73bb      	strb	r3, [r7, #14]
	  				status2 = osMessageQueuePut(rxtx_MsgQueue, &function_code,0,1000);
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <_Z16StartReceiveTaskPv+0x98>)
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	f107 010e 	add.w	r1, r7, #14
 8000bd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bd8:	2200      	movs	r2, #0
 8000bda:	f007 fccd 	bl	8008578 <osMessageQueuePut>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a07      	ldr	r2, [pc, #28]	@ (8000c00 <_Z16StartReceiveTaskPv+0x9c>)
 8000be2:	6013      	str	r3, [r2, #0]
	  				break;
 8000be4:	bf00      	nop
	  			}

	  }
	  }

	  osDelay(14);
 8000be6:	200e      	movs	r0, #14
 8000be8:	f007 fc38 	bl	800845c <osDelay>
	  status3 = osMessageQueueGet(taskComm_MsgQueue, &new_data_rtos_rx,0,1000);
 8000bec:	e7be      	b.n	8000b6c <_Z16StartReceiveTaskPv+0x8>
 8000bee:	bf00      	nop
 8000bf0:	240001c8 	.word	0x240001c8
 8000bf4:	240001cc 	.word	0x240001cc
 8000bf8:	24000030 	.word	0x24000030
 8000bfc:	240001c0 	.word	0x240001c0
 8000c00:	240001c4 	.word	0x240001c4

08000c04 <_ZL10MPU_Configv>:
}
}
 /* MPU Configuration */

void MPU_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c16:	f000 fdb7 	bl	8001788 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c26:	231f      	movs	r3, #31
 8000c28:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c2a:	2387      	movs	r3, #135	@ 0x87
 8000c2c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c32:	2300      	movs	r3, #0
 8000c34:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c36:	2301      	movs	r3, #1
 8000c38:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c46:	463b      	mov	r3, r7
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fdd5 	bl	80017f8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c4e:	2004      	movs	r0, #4
 8000c50:	f000 fdb2 	bl	80017b8 <HAL_MPU_Enable>

}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d101      	bne.n	8000c72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c6e:	f000 fc5b 	bl	8001528 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40010000 	.word	0x40010000

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <Error_Handler+0x8>

08000c8c <_Z5crc16Pht>:
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};


uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 8000c98:	23ff      	movs	r3, #255	@ 0xff
 8000c9a:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 8000c9c:	23ff      	movs	r3, #255	@ 0xff
 8000c9e:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 8000ca0:	e013      	b.n	8000cca <_Z5crc16Pht+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	1c5a      	adds	r2, r3, #1
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	7bbb      	ldrb	r3, [r7, #14]
 8000cac:	4053      	eors	r3, r2
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 8000cb2:	4a12      	ldr	r2, [pc, #72]	@ (8000cfc <_Z5crc16Pht+0x70>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	4053      	eors	r3, r2
 8000cbe:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8000cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8000d00 <_Z5crc16Pht+0x74>)
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8000cca:	887b      	ldrh	r3, [r7, #2]
 8000ccc:	1e5a      	subs	r2, r3, #1
 8000cce:	807a      	strh	r2, [r7, #2]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	bf14      	ite	ne
 8000cd4:	2301      	movne	r3, #1
 8000cd6:	2300      	moveq	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1e1      	bne.n	8000ca2 <_Z5crc16Pht+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	021b      	lsls	r3, r3, #8
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	b29b      	uxth	r3, r3
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	0800b2bc 	.word	0x0800b2bc
 8000d00:	0800b3bc 	.word	0x0800b3bc

08000d04 <_Z23modbus_on_compare_arrayv>:

void modbus_on_compare_array(){
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
	RxData_on_array[0] = 0x27;
 8000d08:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <_Z23modbus_on_compare_arrayv+0x58>)
 8000d0a:	2227      	movs	r2, #39	@ 0x27
 8000d0c:	701a      	strb	r2, [r3, #0]
	RxData_on_array[1] = 0xd;
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <_Z23modbus_on_compare_arrayv+0x58>)
 8000d10:	220d      	movs	r2, #13
 8000d12:	705a      	strb	r2, [r3, #1]
	RxData_on_array[2] = 0xa;
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <_Z23modbus_on_compare_arrayv+0x58>)
 8000d16:	220a      	movs	r2, #10
 8000d18:	709a      	strb	r2, [r3, #2]
	RxData_on_array[3] = 0x39;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <_Z23modbus_on_compare_arrayv+0x58>)
 8000d1c:	2239      	movs	r2, #57	@ 0x39
 8000d1e:	70da      	strb	r2, [r3, #3]
	RxData_on_array[4] = 0x44;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <_Z23modbus_on_compare_arrayv+0x58>)
 8000d22:	2244      	movs	r2, #68	@ 0x44
 8000d24:	711a      	strb	r2, [r3, #4]
	RxData_on_array[5] = 0x44;
 8000d26:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <_Z23modbus_on_compare_arrayv+0x58>)
 8000d28:	2244      	movs	r2, #68	@ 0x44
 8000d2a:	715a      	strb	r2, [r3, #5]
	RxData_on_array[6] = 0x45;
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <_Z23modbus_on_compare_arrayv+0x58>)
 8000d2e:	2245      	movs	r2, #69	@ 0x45
 8000d30:	719a      	strb	r2, [r3, #6]
	RxData_on_array[7] = 0x43;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <_Z23modbus_on_compare_arrayv+0x58>)
 8000d34:	2243      	movs	r2, #67	@ 0x43
 8000d36:	71da      	strb	r2, [r3, #7]
	RxData_on_array[8] = 0x54;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <_Z23modbus_on_compare_arrayv+0x58>)
 8000d3a:	2254      	movs	r2, #84	@ 0x54
 8000d3c:	721a      	strb	r2, [r3, #8]
	RxData_on_array[9] = 0x20;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <_Z23modbus_on_compare_arrayv+0x58>)
 8000d40:	2220      	movs	r2, #32
 8000d42:	725a      	strb	r2, [r3, #9]
	RxData_on_array[10] = 0x20;
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <_Z23modbus_on_compare_arrayv+0x58>)
 8000d46:	2220      	movs	r2, #32
 8000d48:	729a      	strb	r2, [r3, #10]
	RxData_on_array[11] = 0x27;
 8000d4a:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <_Z23modbus_on_compare_arrayv+0x58>)
 8000d4c:	2227      	movs	r2, #39	@ 0x27
 8000d4e:	72da      	strb	r2, [r3, #11]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	240000b0 	.word	0x240000b0

08000d60 <_Z26modbus_on_compare_array_ATv>:
void modbus_on_compare_array_AT(){
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
	//	RxData_on_array_AT[2] = 0x43; //C
	//	RxData_on_array_AT[3] = 0x4f; //O
	//	RxData_on_array_AT[4] = 0x4e; //N
	//	RxData_on_array_AT[5] = 0x4e; //N
	//	RxData_on_array_AT[6] = 0x45; //E
		RxData_on_array_AT[7] = 0x43; //C
 8000d64:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <_Z26modbus_on_compare_array_ATv+0x1c>)
 8000d66:	2243      	movs	r2, #67	@ 0x43
 8000d68:	71da      	strb	r2, [r3, #7]
		RxData_on_array_AT[8] = 0x54; //T
 8000d6a:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <_Z26modbus_on_compare_array_ATv+0x1c>)
 8000d6c:	2254      	movs	r2, #84	@ 0x54
 8000d6e:	721a      	strb	r2, [r3, #8]


}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	24000130 	.word	0x24000130

08000d80 <_Z27modbus_off_compare_array_ATv>:
void modbus_off_compare_array_AT(){
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
		//RxData_off_array_AT[5] = 0x43;  //C
		//RxData_off_array_AT[6] = 0x4f;  //O
		//RxData_off_array_AT[7] = 0x4e;  //N
		//RxData_off_array_AT[8] = 0x4e;  //N
		//RxData_off_array_AT[9] = 0x45;  //E
		RxData_off_array_AT[10] = 0x43; //C
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <_Z27modbus_off_compare_array_ATv+0x1c>)
 8000d86:	2243      	movs	r2, #67	@ 0x43
 8000d88:	729a      	strb	r2, [r3, #10]
		RxData_off_array_AT[11] = 0x54; //T
 8000d8a:	4b04      	ldr	r3, [pc, #16]	@ (8000d9c <_Z27modbus_off_compare_array_ATv+0x1c>)
 8000d8c:	2254      	movs	r2, #84	@ 0x54
 8000d8e:	72da      	strb	r2, [r3, #11]


}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	24000170 	.word	0x24000170

08000da0 <_Z24modbus_off_compare_arrayv>:
void modbus_off_compare_array(){
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
	RxData_off_array[0] = 0x27;
 8000da4:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000da6:	2227      	movs	r2, #39	@ 0x27
 8000da8:	701a      	strb	r2, [r3, #0]
	RxData_off_array[1] = 0xd;
 8000daa:	4b17      	ldr	r3, [pc, #92]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000dac:	220d      	movs	r2, #13
 8000dae:	705a      	strb	r2, [r3, #1]
	RxData_off_array[2] = 0xa;
 8000db0:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000db2:	220a      	movs	r2, #10
 8000db4:	709a      	strb	r2, [r3, #2]
	RxData_off_array[3] = 0x39;
 8000db6:	4b14      	ldr	r3, [pc, #80]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000db8:	2239      	movs	r2, #57	@ 0x39
 8000dba:	70da      	strb	r2, [r3, #3]
	RxData_off_array[4] = 0x44;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000dbe:	2244      	movs	r2, #68	@ 0x44
 8000dc0:	711a      	strb	r2, [r3, #4]
	RxData_off_array[5] = 0x44;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000dc4:	2244      	movs	r2, #68	@ 0x44
 8000dc6:	715a      	strb	r2, [r3, #5]
	RxData_off_array[6] = 0x4f;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000dca:	224f      	movs	r2, #79	@ 0x4f
 8000dcc:	719a      	strb	r2, [r3, #6]
	RxData_off_array[7] = 0x4e;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000dd0:	224e      	movs	r2, #78	@ 0x4e
 8000dd2:	71da      	strb	r2, [r3, #7]
	RxData_off_array[8] = 0x4e;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000dd6:	224e      	movs	r2, #78	@ 0x4e
 8000dd8:	721a      	strb	r2, [r3, #8]
	RxData_off_array[9] = 0x45;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000ddc:	2245      	movs	r2, #69	@ 0x45
 8000dde:	725a      	strb	r2, [r3, #9]
	RxData_off_array[10] = 0x43;
 8000de0:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000de2:	2243      	movs	r2, #67	@ 0x43
 8000de4:	729a      	strb	r2, [r3, #10]
	RxData_off_array[11] = 0x54;
 8000de6:	4b08      	ldr	r3, [pc, #32]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000de8:	2254      	movs	r2, #84	@ 0x54
 8000dea:	72da      	strb	r2, [r3, #11]
	RxData_off_array[12] = 0x20;
 8000dec:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000dee:	2220      	movs	r2, #32
 8000df0:	731a      	strb	r2, [r3, #12]
	RxData_off_array[13] = 0x20;
 8000df2:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000df4:	2220      	movs	r2, #32
 8000df6:	735a      	strb	r2, [r3, #13]
	RxData_off_array[14] = 0x27;
 8000df8:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <_Z24modbus_off_compare_arrayv+0x68>)
 8000dfa:	2227      	movs	r2, #39	@ 0x27
 8000dfc:	739a      	strb	r2, [r3, #14]
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	240000f0 	.word	0x240000f0

08000e0c <_Z13compareArraysPhS_ii>:

int compareArrays(uint8_t arr1[], uint8_t arr2[], int size, int i_start) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	603b      	str	r3, [r7, #0]
    for (int i = i_start; i < size; ++i) {
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e00e      	b.n	8000e3e <_Z13compareArraysPhS_ii+0x32>
        if (arr1[i] != arr2[i]) {
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	4413      	add	r3, r2
 8000e26:	781a      	ldrb	r2, [r3, #0]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	68b9      	ldr	r1, [r7, #8]
 8000e2c:	440b      	add	r3, r1
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d001      	beq.n	8000e38 <_Z13compareArraysPhS_ii+0x2c>
            return 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e007      	b.n	8000e48 <_Z13compareArraysPhS_ii+0x3c>
    for (int i = i_start; i < size; ++i) {
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	dbec      	blt.n	8000e20 <_Z13compareArraysPhS_ii+0x14>
        }
    }
    return 1;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	371c      	adds	r7, #28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <_Z10clearArrayPhi>:

int clearArray(uint8_t arr1[], int size) {
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < size; ++i) {
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	e007      	b.n	8000e74 <_Z10clearArrayPhi+0x20>
        arr1[i] = 0;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < size; ++i) {
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	3301      	adds	r3, #1
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf3      	blt.n	8000e64 <_Z10clearArrayPhi+0x10>
    }
    return 1;
 8000e7c:	2301      	movs	r3, #1
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <_Z17BTM222_init_resetv>:

void BTM222_init_reset()
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0,GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2101      	movs	r1, #1
 8000e94:	480a      	ldr	r0, [pc, #40]	@ (8000ec0 <_Z17BTM222_init_resetv+0x34>)
 8000e96:	f001 fc1b 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000e9a:	2096      	movs	r0, #150	@ 0x96
 8000e9c:	f000 fb64 	bl	8001568 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0,GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2101      	movs	r1, #1
 8000ea4:	4806      	ldr	r0, [pc, #24]	@ (8000ec0 <_Z17BTM222_init_resetv+0x34>)
 8000ea6:	f001 fc13 	bl	80026d0 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000eaa:	2096      	movs	r0, #150	@ 0x96
 8000eac:	f000 fb5c 	bl	8001568 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0,GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <_Z17BTM222_init_resetv+0x34>)
 8000eb6:	f001 fc0b 	bl	80026d0 <HAL_GPIO_WritePin>
	//ATMode = 1;
	//BTconnectMode = 0;
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	58021400 	.word	0x58021400

08000ec4 <_Z15readHoldingRegsv>:
	//HAL_UART_Receive(&huart4, AT_active, 8, 1000);

}

uint8_t readHoldingRegs (void)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);  // start Register Address
 8000eca:	4b48      	ldr	r3, [pc, #288]	@ (8000fec <_Z15readHoldingRegsv+0x128>)
 8000ecc:	789b      	ldrb	r3, [r3, #2]
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	4b46      	ldr	r3, [pc, #280]	@ (8000fec <_Z15readHoldingRegsv+0x128>)
 8000ed4:	78db      	ldrb	r3, [r3, #3]
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	81fb      	strh	r3, [r7, #14]
	uint16_t numRegs = ((RxData[4]<<8)|RxData[5]);   // number to registers master has requested
 8000ede:	4b43      	ldr	r3, [pc, #268]	@ (8000fec <_Z15readHoldingRegsv+0x128>)
 8000ee0:	791b      	ldrb	r3, [r3, #4]
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	4b41      	ldr	r3, [pc, #260]	@ (8000fec <_Z15readHoldingRegsv+0x128>)
 8000ee8:	795b      	ldrb	r3, [r3, #5]
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b21b      	sxth	r3, r3
 8000ef0:	807b      	strh	r3, [r7, #2]

	TxData[0] = SLAVE_ID;  // slave ID
 8000ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ff0 <_Z15readHoldingRegsv+0x12c>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];  // function code
 8000ef8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fec <_Z15readHoldingRegsv+0x128>)
 8000efa:	785a      	ldrb	r2, [r3, #1]
 8000efc:	4b3c      	ldr	r3, [pc, #240]	@ (8000ff0 <_Z15readHoldingRegsv+0x12c>)
 8000efe:	705a      	strb	r2, [r3, #1]
	TxData[2] = numRegs*2;  // Byte count
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b39      	ldr	r3, [pc, #228]	@ (8000ff0 <_Z15readHoldingRegsv+0x12c>)
 8000f0a:	709a      	strb	r2, [r3, #2]
	int indx = 3;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	60bb      	str	r3, [r7, #8]
	TxData[indx++] = 0;
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	4a36      	ldr	r2, [pc, #216]	@ (8000ff0 <_Z15readHoldingRegsv+0x12c>)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	54d1      	strb	r1, [r2, r3]
	TxData[indx++] = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))&0xFF;
 8000f1c:	68bc      	ldr	r4, [r7, #8]
 8000f1e:	1c63      	adds	r3, r4, #1
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f26:	4833      	ldr	r0, [pc, #204]	@ (8000ff4 <_Z15readHoldingRegsv+0x130>)
 8000f28:	f001 fbba 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff0 <_Z15readHoldingRegsv+0x12c>)
 8000f32:	551a      	strb	r2, [r3, r4]
	startAddr++;
 8000f34:	89fb      	ldrh	r3, [r7, #14]
 8000f36:	3301      	adds	r3, #1
 8000f38:	81fb      	strh	r3, [r7, #14]
	TxData[indx++] = 0;
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	60ba      	str	r2, [r7, #8]
 8000f40:	4a2b      	ldr	r2, [pc, #172]	@ (8000ff0 <_Z15readHoldingRegsv+0x12c>)
 8000f42:	2100      	movs	r1, #0
 8000f44:	54d1      	strb	r1, [r2, r3]
	TxData[indx++] = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))&0xFF;
 8000f46:	68bc      	ldr	r4, [r7, #8]
 8000f48:	1c63      	adds	r3, r4, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f50:	4828      	ldr	r0, [pc, #160]	@ (8000ff4 <_Z15readHoldingRegsv+0x130>)
 8000f52:	f001 fba5 	bl	80026a0 <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b25      	ldr	r3, [pc, #148]	@ (8000ff0 <_Z15readHoldingRegsv+0x12c>)
 8000f5c:	551a      	strb	r2, [r3, r4]
	startAddr++;
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	3301      	adds	r3, #1
 8000f62:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<(numRegs-2); i++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	e01b      	b.n	8000fa2 <_Z15readHoldingRegsv+0xde>
	{


		TxData[indx++] = (Holding_Registers_Database[startAddr]>>8)&0xFF;
 8000f6a:	89fb      	ldrh	r3, [r7, #14]
 8000f6c:	4a22      	ldr	r2, [pc, #136]	@ (8000ff8 <_Z15readHoldingRegsv+0x134>)
 8000f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	b299      	uxth	r1, r3
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	60ba      	str	r2, [r7, #8]
 8000f7c:	b2c9      	uxtb	r1, r1
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff0 <_Z15readHoldingRegsv+0x12c>)
 8000f80:	54d1      	strb	r1, [r2, r3]
		TxData[indx++] = (Holding_Registers_Database[startAddr])&0xFF;
 8000f82:	89fb      	ldrh	r3, [r7, #14]
 8000f84:	4a1c      	ldr	r2, [pc, #112]	@ (8000ff8 <_Z15readHoldingRegsv+0x134>)
 8000f86:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	60ba      	str	r2, [r7, #8]
 8000f90:	b2c9      	uxtb	r1, r1
 8000f92:	4a17      	ldr	r2, [pc, #92]	@ (8000ff0 <_Z15readHoldingRegsv+0x12c>)
 8000f94:	54d1      	strb	r1, [r2, r3]
		startAddr++;
 8000f96:	89fb      	ldrh	r3, [r7, #14]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<(numRegs-2); i++)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	3b02      	subs	r3, #2
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	dbde      	blt.n	8000f6a <_Z15readHoldingRegsv+0xa6>
		//	TxData[indx++] = 0;
		//	TxData[indx++] = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14))&0xFF;
		//	startAddr++;
		//}

		uint16_t crc = crc16(TxData, indx);
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480f      	ldr	r0, [pc, #60]	@ (8000ff0 <_Z15readHoldingRegsv+0x12c>)
 8000fb4:	f7ff fe6a 	bl	8000c8c <_Z5crc16Pht>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	803b      	strh	r3, [r7, #0]
		TxData[indx] = crc&0xFF;   // CRC LOW
 8000fbc:	883b      	ldrh	r3, [r7, #0]
 8000fbe:	b2d9      	uxtb	r1, r3
 8000fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff0 <_Z15readHoldingRegsv+0x12c>)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	460a      	mov	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]
		TxData[indx+1] = (crc>>8)&0xFF;  // CRC HIGH
 8000fca:	883b      	ldrh	r3, [r7, #0]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	b2d1      	uxtb	r1, r2
 8000fd6:	4a06      	ldr	r2, [pc, #24]	@ (8000ff0 <_Z15readHoldingRegsv+0x12c>)
 8000fd8:	54d1      	strb	r1, [r2, r3]
		bytes = indx;
 8000fda:	4a08      	ldr	r2, [pc, #32]	@ (8000ffc <_Z15readHoldingRegsv+0x138>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	6013      	str	r3, [r2, #0]

	return 1;
 8000fe0:	2301      	movs	r3, #1
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	bf00      	nop
 8000fec:	24000030 	.word	0x24000030
 8000ff0:	24000070 	.word	0x24000070
 8000ff4:	58020400 	.word	0x58020400
 8000ff8:	24000274 	.word	0x24000274
 8000ffc:	240001b4 	.word	0x240001b4

08001000 <_Z14writeSingleRegv>:

uint8_t writeSingleReg (void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	uint16_t startAddr = ((RxData[2]<<8)|RxData[3]);
 8001006:	4b34      	ldr	r3, [pc, #208]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 8001008:	789b      	ldrb	r3, [r3, #2]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b32      	ldr	r3, [pc, #200]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 8001010:	78db      	ldrb	r3, [r3, #3]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21b      	sxth	r3, r3
 8001018:	80fb      	strh	r3, [r7, #6]

	Holding_Registers_Database[startAddr] = (RxData[4]<<8)|RxData[5];
 800101a:	4b2f      	ldr	r3, [pc, #188]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 800101c:	791b      	ldrb	r3, [r3, #4]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21a      	sxth	r2, r3
 8001022:	4b2d      	ldr	r3, [pc, #180]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 8001024:	795b      	ldrb	r3, [r3, #5]
 8001026:	b21b      	sxth	r3, r3
 8001028:	4313      	orrs	r3, r2
 800102a:	b21a      	sxth	r2, r3
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	b291      	uxth	r1, r2
 8001030:	4a2a      	ldr	r2, [pc, #168]	@ (80010dc <_Z14writeSingleRegv+0xdc>)
 8001032:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	if(RxData[3] && ((RxData[4]<<8|RxData[5]) != 0)){
 8001036:	4b28      	ldr	r3, [pc, #160]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 8001038:	78db      	ldrb	r3, [r3, #3]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00d      	beq.n	800105a <_Z14writeSingleRegv+0x5a>
 800103e:	4b26      	ldr	r3, [pc, #152]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 8001040:	791b      	ldrb	r3, [r3, #4]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	4a24      	ldr	r2, [pc, #144]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 8001046:	7952      	ldrb	r2, [r2, #5]
 8001048:	4313      	orrs	r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <_Z14writeSingleRegv+0x5a>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_SET);// dioda 1 dodaj warunek
 800104e:	2201      	movs	r2, #1
 8001050:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001054:	4822      	ldr	r0, [pc, #136]	@ (80010e0 <_Z14writeSingleRegv+0xe0>)
 8001056:	f001 fb3b 	bl	80026d0 <HAL_GPIO_WritePin>

	}
	if(RxData[3] && ((RxData[4]<<8|RxData[5]) == 0)){
 800105a:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 800105c:	78db      	ldrb	r3, [r3, #3]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00d      	beq.n	800107e <_Z14writeSingleRegv+0x7e>
 8001062:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 8001064:	791b      	ldrb	r3, [r3, #4]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	4a1b      	ldr	r2, [pc, #108]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 800106a:	7952      	ldrb	r2, [r2, #5]
 800106c:	4313      	orrs	r3, r2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d105      	bne.n	800107e <_Z14writeSingleRegv+0x7e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,GPIO_PIN_RESET);// dioda 1 dodaj warunek
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001078:	4819      	ldr	r0, [pc, #100]	@ (80010e0 <_Z14writeSingleRegv+0xe0>)
 800107a:	f001 fb29 	bl	80026d0 <HAL_GPIO_WritePin>

		}

	TxData[0] = SLAVE_ID;    // slave ID
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <_Z14writeSingleRegv+0xe4>)
 8001080:	2207      	movs	r2, #7
 8001082:	701a      	strb	r2, [r3, #0]
	TxData[1] = RxData[1];   // function code
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 8001086:	785a      	ldrb	r2, [r3, #1]
 8001088:	4b16      	ldr	r3, [pc, #88]	@ (80010e4 <_Z14writeSingleRegv+0xe4>)
 800108a:	705a      	strb	r2, [r3, #1]
	TxData[2] = RxData[2];   // Start Addr HIGH Byte
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 800108e:	789a      	ldrb	r2, [r3, #2]
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <_Z14writeSingleRegv+0xe4>)
 8001092:	709a      	strb	r2, [r3, #2]
	TxData[3] = RxData[3];   // Start Addr LOW Byte
 8001094:	4b10      	ldr	r3, [pc, #64]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 8001096:	78da      	ldrb	r2, [r3, #3]
 8001098:	4b12      	ldr	r3, [pc, #72]	@ (80010e4 <_Z14writeSingleRegv+0xe4>)
 800109a:	70da      	strb	r2, [r3, #3]
	TxData[4] = RxData[4];   // Reg Data HIGH Byte
 800109c:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 800109e:	791a      	ldrb	r2, [r3, #4]
 80010a0:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <_Z14writeSingleRegv+0xe4>)
 80010a2:	711a      	strb	r2, [r3, #4]
	TxData[5] = RxData[5];   // Reg Data LOW  Byte
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <_Z14writeSingleRegv+0xd8>)
 80010a6:	795a      	ldrb	r2, [r3, #5]
 80010a8:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <_Z14writeSingleRegv+0xe4>)
 80010aa:	715a      	strb	r2, [r3, #5]

	uint16_t crc = crc16(TxData, 6);
 80010ac:	2106      	movs	r1, #6
 80010ae:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <_Z14writeSingleRegv+0xe4>)
 80010b0:	f7ff fdec 	bl	8000c8c <_Z5crc16Pht>
 80010b4:	4603      	mov	r3, r0
 80010b6:	80bb      	strh	r3, [r7, #4]
	TxData[6] = crc&0xFF;   // CRC LOW
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <_Z14writeSingleRegv+0xe4>)
 80010be:	719a      	strb	r2, [r3, #6]
	TxData[7] = (crc>>8)&0xFF;  // CRC HIGH
 80010c0:	88bb      	ldrh	r3, [r7, #4]
 80010c2:	0a1b      	lsrs	r3, r3, #8
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <_Z14writeSingleRegv+0xe4>)
 80010ca:	71da      	strb	r2, [r3, #7]

	return 1;
 80010cc:	2301      	movs	r3, #1
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	24000030 	.word	0x24000030
 80010dc:	24000274 	.word	0x24000274
 80010e0:	58020400 	.word	0x58020400
 80010e4:	24000070 	.word	0x24000070

080010e8 <_Z8sendDataPhi>:

void sendData (uint8_t *data, int size)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart4, data, size, 1000);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	4803      	ldr	r0, [pc, #12]	@ (800110c <_Z8sendDataPhi+0x24>)
 80010fe:	f004 fcad 	bl	8005a5c <HAL_UART_Transmit>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	240001d4 	.word	0x240001d4

08001110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <HAL_MspInit+0x38>)
 8001118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800111c:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <HAL_MspInit+0x38>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001126:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <HAL_MspInit+0x38>)
 8001128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	210f      	movs	r1, #15
 8001138:	f06f 0001 	mvn.w	r0, #1
 800113c:	f000 fafc 	bl	8001738 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	58024400 	.word	0x58024400

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b0ba      	sub	sp, #232	@ 0xe8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	22c0      	movs	r2, #192	@ 0xc0
 800116a:	2100      	movs	r1, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f00a f80b 	bl	800b188 <memset>
  if(huart->Instance==UART4)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a2a      	ldr	r2, [pc, #168]	@ (8001220 <HAL_UART_MspInit+0xd4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d14d      	bne.n	8001218 <HAL_UART_MspInit+0xcc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800117c:	f04f 0202 	mov.w	r2, #2
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001188:	2300      	movs	r3, #0
 800118a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800118e:	f107 0310 	add.w	r3, r7, #16
 8001192:	4618      	mov	r0, r3
 8001194:	f002 fb18 	bl	80037c8 <HAL_RCCEx_PeriphCLKConfig>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800119e:	f7ff fd6f 	bl	8000c80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011a2:	4b20      	ldr	r3, [pc, #128]	@ (8001224 <HAL_UART_MspInit+0xd8>)
 80011a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001224 <HAL_UART_MspInit+0xd8>)
 80011aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <HAL_UART_MspInit+0xd8>)
 80011b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c0:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <HAL_UART_MspInit+0xd8>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c6:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <HAL_UART_MspInit+0xd8>)
 80011c8:	f043 0308 	orr.w	r3, r3, #8
 80011cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <HAL_UART_MspInit+0xd8>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011de:	2303      	movs	r3, #3
 80011e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011f6:	2308      	movs	r3, #8
 80011f8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001200:	4619      	mov	r1, r3
 8001202:	4809      	ldr	r0, [pc, #36]	@ (8001228 <HAL_UART_MspInit+0xdc>)
 8001204:	f001 f89c 	bl	8002340 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	2105      	movs	r1, #5
 800120c:	2034      	movs	r0, #52	@ 0x34
 800120e:	f000 fa93 	bl	8001738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001212:	2034      	movs	r0, #52	@ 0x34
 8001214:	f000 faaa 	bl	800176c <HAL_NVIC_EnableIRQ>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001218:	bf00      	nop
 800121a:	37e8      	adds	r7, #232	@ 0xe8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40004c00 	.word	0x40004c00
 8001224:	58024400 	.word	0x58024400
 8001228:	58020c00 	.word	0x58020c00

0800122c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	@ 0x38
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b0f      	cmp	r3, #15
 8001238:	d842      	bhi.n	80012c0 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800123a:	2200      	movs	r2, #0
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	2019      	movs	r0, #25
 8001240:	f000 fa7a 	bl	8001738 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001244:	2019      	movs	r0, #25
 8001246:	f000 fa91 	bl	800176c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800124a:	4a23      	ldr	r2, [pc, #140]	@ (80012d8 <HAL_InitTick+0xac>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001250:	4b22      	ldr	r3, [pc, #136]	@ (80012dc <HAL_InitTick+0xb0>)
 8001252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001256:	4a21      	ldr	r2, [pc, #132]	@ (80012dc <HAL_InitTick+0xb0>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001260:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <HAL_InitTick+0xb0>)
 8001262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800126e:	f107 020c 	add.w	r2, r7, #12
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f002 fa63 	bl	8003744 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800127e:	f002 fa4b 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 8001282:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001286:	4a16      	ldr	r2, [pc, #88]	@ (80012e0 <HAL_InitTick+0xb4>)
 8001288:	fba2 2303 	umull	r2, r3, r2, r3
 800128c:	0c9b      	lsrs	r3, r3, #18
 800128e:	3b01      	subs	r3, #1
 8001290:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <HAL_InitTick+0xb8>)
 8001294:	4a14      	ldr	r2, [pc, #80]	@ (80012e8 <HAL_InitTick+0xbc>)
 8001296:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <HAL_InitTick+0xb8>)
 800129a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800129e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012a0:	4a10      	ldr	r2, [pc, #64]	@ (80012e4 <HAL_InitTick+0xb8>)
 80012a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012a4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012a6:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <HAL_InitTick+0xb8>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ac:	4b0d      	ldr	r3, [pc, #52]	@ (80012e4 <HAL_InitTick+0xb8>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80012b2:	480c      	ldr	r0, [pc, #48]	@ (80012e4 <HAL_InitTick+0xb8>)
 80012b4:	f004 f8b4 	bl	8005420 <HAL_TIM_Base_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d107      	bne.n	80012ce <HAL_InitTick+0xa2>
 80012be:	e001      	b.n	80012c4 <HAL_InitTick+0x98>
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e005      	b.n	80012d0 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80012c4:	4807      	ldr	r0, [pc, #28]	@ (80012e4 <HAL_InitTick+0xb8>)
 80012c6:	f004 f90d 	bl	80054e4 <HAL_TIM_Base_Start_IT>
 80012ca:	4603      	mov	r3, r0
 80012cc:	e000      	b.n	80012d0 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3738      	adds	r7, #56	@ 0x38
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	24000008 	.word	0x24000008
 80012dc:	58024400 	.word	0x58024400
 80012e0:	431bde83 	.word	0x431bde83
 80012e4:	240002d8 	.word	0x240002d8
 80012e8:	40010000 	.word	0x40010000

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <NMI_Handler+0x4>

080012f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	bf00      	nop
 8001302:	e7fd      	b.n	8001300 <MemManage_Handler+0x4>

08001304 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001308:	bf00      	nop
 800130a:	e7fd      	b.n	8001308 <BusFault_Handler+0x4>

0800130c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001310:	bf00      	nop
 8001312:	e7fd      	b.n	8001310 <UsageFault_Handler+0x4>

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001328:	4802      	ldr	r0, [pc, #8]	@ (8001334 <TIM1_UP_IRQHandler+0x10>)
 800132a:	f004 f953 	bl	80055d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	240002d8 	.word	0x240002d8

08001338 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800133c:	4802      	ldr	r0, [pc, #8]	@ (8001348 <UART4_IRQHandler+0x10>)
 800133e:	f004 fc1b 	bl	8005b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	240001d4 	.word	0x240001d4

0800134c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001350:	4b37      	ldr	r3, [pc, #220]	@ (8001430 <SystemInit+0xe4>)
 8001352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001356:	4a36      	ldr	r2, [pc, #216]	@ (8001430 <SystemInit+0xe4>)
 8001358:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800135c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001360:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <SystemInit+0xe8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	2b06      	cmp	r3, #6
 800136a:	d807      	bhi.n	800137c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800136c:	4b31      	ldr	r3, [pc, #196]	@ (8001434 <SystemInit+0xe8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f023 030f 	bic.w	r3, r3, #15
 8001374:	4a2f      	ldr	r2, [pc, #188]	@ (8001434 <SystemInit+0xe8>)
 8001376:	f043 0307 	orr.w	r3, r3, #7
 800137a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800137c:	4b2e      	ldr	r3, [pc, #184]	@ (8001438 <SystemInit+0xec>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a2d      	ldr	r2, [pc, #180]	@ (8001438 <SystemInit+0xec>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001388:	4b2b      	ldr	r3, [pc, #172]	@ (8001438 <SystemInit+0xec>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800138e:	4b2a      	ldr	r3, [pc, #168]	@ (8001438 <SystemInit+0xec>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4929      	ldr	r1, [pc, #164]	@ (8001438 <SystemInit+0xec>)
 8001394:	4b29      	ldr	r3, [pc, #164]	@ (800143c <SystemInit+0xf0>)
 8001396:	4013      	ands	r3, r2
 8001398:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800139a:	4b26      	ldr	r3, [pc, #152]	@ (8001434 <SystemInit+0xe8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d007      	beq.n	80013b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013a6:	4b23      	ldr	r3, [pc, #140]	@ (8001434 <SystemInit+0xe8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 030f 	bic.w	r3, r3, #15
 80013ae:	4a21      	ldr	r2, [pc, #132]	@ (8001434 <SystemInit+0xe8>)
 80013b0:	f043 0307 	orr.w	r3, r3, #7
 80013b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013b6:	4b20      	ldr	r3, [pc, #128]	@ (8001438 <SystemInit+0xec>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <SystemInit+0xec>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <SystemInit+0xec>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <SystemInit+0xec>)
 80013ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001440 <SystemInit+0xf4>)
 80013cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <SystemInit+0xec>)
 80013d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001444 <SystemInit+0xf8>)
 80013d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013d4:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <SystemInit+0xec>)
 80013d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001448 <SystemInit+0xfc>)
 80013d8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013da:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <SystemInit+0xec>)
 80013dc:	2200      	movs	r2, #0
 80013de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <SystemInit+0xec>)
 80013e2:	4a19      	ldr	r2, [pc, #100]	@ (8001448 <SystemInit+0xfc>)
 80013e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013e6:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <SystemInit+0xec>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <SystemInit+0xec>)
 80013ee:	4a16      	ldr	r2, [pc, #88]	@ (8001448 <SystemInit+0xfc>)
 80013f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013f2:	4b11      	ldr	r3, [pc, #68]	@ (8001438 <SystemInit+0xec>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <SystemInit+0xec>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001438 <SystemInit+0xec>)
 80013fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001402:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001404:	4b0c      	ldr	r3, [pc, #48]	@ (8001438 <SystemInit+0xec>)
 8001406:	2200      	movs	r2, #0
 8001408:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <SystemInit+0x100>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b10      	ldr	r3, [pc, #64]	@ (8001450 <SystemInit+0x104>)
 8001410:	4013      	ands	r3, r2
 8001412:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001416:	d202      	bcs.n	800141e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001418:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <SystemInit+0x108>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <SystemInit+0x10c>)
 8001420:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001424:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000ed00 	.word	0xe000ed00
 8001434:	52002000 	.word	0x52002000
 8001438:	58024400 	.word	0x58024400
 800143c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001440:	02020200 	.word	0x02020200
 8001444:	01ff0000 	.word	0x01ff0000
 8001448:	01010280 	.word	0x01010280
 800144c:	5c001000 	.word	0x5c001000
 8001450:	ffff0000 	.word	0xffff0000
 8001454:	51008108 	.word	0x51008108
 8001458:	52004000 	.word	0x52004000

0800145c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800145c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001494 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001460:	f7ff ff74 	bl	800134c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001464:	480c      	ldr	r0, [pc, #48]	@ (8001498 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001466:	490d      	ldr	r1, [pc, #52]	@ (800149c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001468:	4a0d      	ldr	r2, [pc, #52]	@ (80014a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800146c:	e002      	b.n	8001474 <LoopCopyDataInit>

0800146e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800146e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001472:	3304      	adds	r3, #4

08001474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001478:	d3f9      	bcc.n	800146e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147a:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800147c:	4c0a      	ldr	r4, [pc, #40]	@ (80014a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800147e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001480:	e001      	b.n	8001486 <LoopFillZerobss>

08001482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001484:	3204      	adds	r2, #4

08001486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001488:	d3fb      	bcc.n	8001482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800148a:	f009 fe85 	bl	800b198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800148e:	f7ff f8c5 	bl	800061c <main>
  bx  lr
 8001492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001494:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001498:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800149c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80014a0:	0800b504 	.word	0x0800b504
  ldr r2, =_sbss
 80014a4:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80014a8:	24004c78 	.word	0x24004c78

080014ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014ac:	e7fe      	b.n	80014ac <ADC3_IRQHandler>
	...

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014b6:	2003      	movs	r0, #3
 80014b8:	f000 f933 	bl	8001722 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014bc:	f001 ff6c 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <HAL_Init+0x68>)
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	f003 030f 	and.w	r3, r3, #15
 80014cc:	4913      	ldr	r1, [pc, #76]	@ (800151c <HAL_Init+0x6c>)
 80014ce:	5ccb      	ldrb	r3, [r1, r3]
 80014d0:	f003 031f 	and.w	r3, r3, #31
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
 80014d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014da:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <HAL_Init+0x68>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	4a0e      	ldr	r2, [pc, #56]	@ (800151c <HAL_Init+0x6c>)
 80014e4:	5cd3      	ldrb	r3, [r2, r3]
 80014e6:	f003 031f 	and.w	r3, r3, #31
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	fa22 f303 	lsr.w	r3, r2, r3
 80014f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001520 <HAL_Init+0x70>)
 80014f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001524 <HAL_Init+0x74>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014fa:	200f      	movs	r0, #15
 80014fc:	f7ff fe96 	bl	800122c <HAL_InitTick>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e002      	b.n	8001510 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800150a:	f7ff fe01 	bl	8001110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	58024400 	.word	0x58024400
 800151c:	0800b4bc 	.word	0x0800b4bc
 8001520:	24000004 	.word	0x24000004
 8001524:	24000000 	.word	0x24000000

08001528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800152c:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_IncTick+0x20>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_IncTick+0x24>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	4a04      	ldr	r2, [pc, #16]	@ (800154c <HAL_IncTick+0x24>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	2400000c 	.word	0x2400000c
 800154c:	24000324 	.word	0x24000324

08001550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return uwTick;
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <HAL_GetTick+0x14>)
 8001556:	681b      	ldr	r3, [r3, #0]
}
 8001558:	4618      	mov	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	24000324 	.word	0x24000324

08001568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001570:	f7ff ffee 	bl	8001550 <HAL_GetTick>
 8001574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001580:	d005      	beq.n	800158e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001582:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <HAL_Delay+0x44>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800158e:	bf00      	nop
 8001590:	f7ff ffde 	bl	8001550 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	429a      	cmp	r2, r3
 800159e:	d8f7      	bhi.n	8001590 <HAL_Delay+0x28>
  {
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2400000c 	.word	0x2400000c

080015b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015b4:	4b03      	ldr	r3, [pc, #12]	@ (80015c4 <HAL_GetREVID+0x14>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	0c1b      	lsrs	r3, r3, #16
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	5c001000 	.word	0x5c001000

080015c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <__NVIC_SetPriorityGrouping+0x40>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e4:	4013      	ands	r3, r2
 80015e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	@ (8001608 <__NVIC_SetPriorityGrouping+0x40>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00
 800160c:	05fa0000 	.word	0x05fa0000

08001610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001614:	4b04      	ldr	r3, [pc, #16]	@ (8001628 <__NVIC_GetPriorityGrouping+0x18>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 0307 	and.w	r3, r3, #7
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001636:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163a:	2b00      	cmp	r3, #0
 800163c:	db0b      	blt.n	8001656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	f003 021f 	and.w	r2, r3, #31
 8001644:	4907      	ldr	r1, [pc, #28]	@ (8001664 <__NVIC_EnableIRQ+0x38>)
 8001646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	2001      	movs	r0, #1
 800164e:	fa00 f202 	lsl.w	r2, r0, r2
 8001652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	@ (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	@ (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	@ 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	@ 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff4c 	bl	80015c8 <__NVIC_SetPriorityGrouping>
}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001746:	f7ff ff63 	bl	8001610 <__NVIC_GetPriorityGrouping>
 800174a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	68b9      	ldr	r1, [r7, #8]
 8001750:	6978      	ldr	r0, [r7, #20]
 8001752:	f7ff ffb3 	bl	80016bc <NVIC_EncodePriority>
 8001756:	4602      	mov	r2, r0
 8001758:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff82 	bl	8001668 <__NVIC_SetPriority>
}
 8001764:	bf00      	nop
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff56 	bl	800162c <__NVIC_EnableIRQ>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800178c:	f3bf 8f5f 	dmb	sy
}
 8001790:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <HAL_MPU_Disable+0x28>)
 8001794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001796:	4a06      	ldr	r2, [pc, #24]	@ (80017b0 <HAL_MPU_Disable+0x28>)
 8001798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800179c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800179e:	4b05      	ldr	r3, [pc, #20]	@ (80017b4 <HAL_MPU_Disable+0x2c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	605a      	str	r2, [r3, #4]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00
 80017b4:	e000ed90 	.word	0xe000ed90

080017b8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80017c0:	4a0b      	ldr	r2, [pc, #44]	@ (80017f0 <HAL_MPU_Enable+0x38>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80017ca:	4b0a      	ldr	r3, [pc, #40]	@ (80017f4 <HAL_MPU_Enable+0x3c>)
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ce:	4a09      	ldr	r2, [pc, #36]	@ (80017f4 <HAL_MPU_Enable+0x3c>)
 80017d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80017d6:	f3bf 8f4f 	dsb	sy
}
 80017da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017dc:	f3bf 8f6f 	isb	sy
}
 80017e0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed90 	.word	0xe000ed90
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	785a      	ldrb	r2, [r3, #1]
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <HAL_MPU_ConfigRegion+0x7c>)
 8001806:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001808:	4b1a      	ldr	r3, [pc, #104]	@ (8001874 <HAL_MPU_ConfigRegion+0x7c>)
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	4a19      	ldr	r2, [pc, #100]	@ (8001874 <HAL_MPU_ConfigRegion+0x7c>)
 800180e:	f023 0301 	bic.w	r3, r3, #1
 8001812:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001814:	4a17      	ldr	r2, [pc, #92]	@ (8001874 <HAL_MPU_ConfigRegion+0x7c>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7b1b      	ldrb	r3, [r3, #12]
 8001820:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7adb      	ldrb	r3, [r3, #11]
 8001826:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001828:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7a9b      	ldrb	r3, [r3, #10]
 800182e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001830:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	7b5b      	ldrb	r3, [r3, #13]
 8001836:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001838:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7b9b      	ldrb	r3, [r3, #14]
 800183e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001840:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	7bdb      	ldrb	r3, [r3, #15]
 8001846:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001848:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7a5b      	ldrb	r3, [r3, #9]
 800184e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001850:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	7a1b      	ldrb	r3, [r3, #8]
 8001856:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001858:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	7812      	ldrb	r2, [r2, #0]
 800185e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001860:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001862:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001864:	6113      	str	r3, [r2, #16]
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed90 	.word	0xe000ed90

08001878 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff fe66 	bl	8001550 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e2dc      	b.n	8001e4a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d008      	beq.n	80018ae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2280      	movs	r2, #128	@ 0x80
 80018a0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e2cd      	b.n	8001e4a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a76      	ldr	r2, [pc, #472]	@ (8001a8c <HAL_DMA_Abort+0x214>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d04a      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a74      	ldr	r2, [pc, #464]	@ (8001a90 <HAL_DMA_Abort+0x218>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d045      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a73      	ldr	r2, [pc, #460]	@ (8001a94 <HAL_DMA_Abort+0x21c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d040      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a71      	ldr	r2, [pc, #452]	@ (8001a98 <HAL_DMA_Abort+0x220>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d03b      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a70      	ldr	r2, [pc, #448]	@ (8001a9c <HAL_DMA_Abort+0x224>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d036      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a6e      	ldr	r2, [pc, #440]	@ (8001aa0 <HAL_DMA_Abort+0x228>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d031      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a6d      	ldr	r2, [pc, #436]	@ (8001aa4 <HAL_DMA_Abort+0x22c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d02c      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a6b      	ldr	r2, [pc, #428]	@ (8001aa8 <HAL_DMA_Abort+0x230>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d027      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a6a      	ldr	r2, [pc, #424]	@ (8001aac <HAL_DMA_Abort+0x234>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d022      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a68      	ldr	r2, [pc, #416]	@ (8001ab0 <HAL_DMA_Abort+0x238>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d01d      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a67      	ldr	r2, [pc, #412]	@ (8001ab4 <HAL_DMA_Abort+0x23c>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d018      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a65      	ldr	r2, [pc, #404]	@ (8001ab8 <HAL_DMA_Abort+0x240>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d013      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a64      	ldr	r2, [pc, #400]	@ (8001abc <HAL_DMA_Abort+0x244>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d00e      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a62      	ldr	r2, [pc, #392]	@ (8001ac0 <HAL_DMA_Abort+0x248>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d009      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a61      	ldr	r2, [pc, #388]	@ (8001ac4 <HAL_DMA_Abort+0x24c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d004      	beq.n	800194e <HAL_DMA_Abort+0xd6>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a5f      	ldr	r2, [pc, #380]	@ (8001ac8 <HAL_DMA_Abort+0x250>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <HAL_DMA_Abort+0xda>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_DMA_Abort+0xdc>
 8001952:	2300      	movs	r3, #0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 021e 	bic.w	r2, r2, #30
 8001966:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001976:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	e00a      	b.n	8001996 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f022 020e 	bic.w	r2, r2, #14
 800198e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a3c      	ldr	r2, [pc, #240]	@ (8001a8c <HAL_DMA_Abort+0x214>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d072      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a3a      	ldr	r2, [pc, #232]	@ (8001a90 <HAL_DMA_Abort+0x218>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d06d      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a39      	ldr	r2, [pc, #228]	@ (8001a94 <HAL_DMA_Abort+0x21c>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d068      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a37      	ldr	r2, [pc, #220]	@ (8001a98 <HAL_DMA_Abort+0x220>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d063      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a36      	ldr	r2, [pc, #216]	@ (8001a9c <HAL_DMA_Abort+0x224>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d05e      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a34      	ldr	r2, [pc, #208]	@ (8001aa0 <HAL_DMA_Abort+0x228>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d059      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a33      	ldr	r2, [pc, #204]	@ (8001aa4 <HAL_DMA_Abort+0x22c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d054      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a31      	ldr	r2, [pc, #196]	@ (8001aa8 <HAL_DMA_Abort+0x230>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d04f      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a30      	ldr	r2, [pc, #192]	@ (8001aac <HAL_DMA_Abort+0x234>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d04a      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a2e      	ldr	r2, [pc, #184]	@ (8001ab0 <HAL_DMA_Abort+0x238>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d045      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab4 <HAL_DMA_Abort+0x23c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d040      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a2b      	ldr	r2, [pc, #172]	@ (8001ab8 <HAL_DMA_Abort+0x240>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d03b      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a2a      	ldr	r2, [pc, #168]	@ (8001abc <HAL_DMA_Abort+0x244>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d036      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a28      	ldr	r2, [pc, #160]	@ (8001ac0 <HAL_DMA_Abort+0x248>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d031      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a27      	ldr	r2, [pc, #156]	@ (8001ac4 <HAL_DMA_Abort+0x24c>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d02c      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a25      	ldr	r2, [pc, #148]	@ (8001ac8 <HAL_DMA_Abort+0x250>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d027      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a24      	ldr	r2, [pc, #144]	@ (8001acc <HAL_DMA_Abort+0x254>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d022      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a22      	ldr	r2, [pc, #136]	@ (8001ad0 <HAL_DMA_Abort+0x258>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d01d      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a21      	ldr	r2, [pc, #132]	@ (8001ad4 <HAL_DMA_Abort+0x25c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d018      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1f      	ldr	r2, [pc, #124]	@ (8001ad8 <HAL_DMA_Abort+0x260>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d013      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1e      	ldr	r2, [pc, #120]	@ (8001adc <HAL_DMA_Abort+0x264>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00e      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ae0 <HAL_DMA_Abort+0x268>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d009      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae4 <HAL_DMA_Abort+0x26c>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d004      	beq.n	8001a86 <HAL_DMA_Abort+0x20e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	@ (8001ae8 <HAL_DMA_Abort+0x270>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d132      	bne.n	8001aec <HAL_DMA_Abort+0x274>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e031      	b.n	8001aee <HAL_DMA_Abort+0x276>
 8001a8a:	bf00      	nop
 8001a8c:	40020010 	.word	0x40020010
 8001a90:	40020028 	.word	0x40020028
 8001a94:	40020040 	.word	0x40020040
 8001a98:	40020058 	.word	0x40020058
 8001a9c:	40020070 	.word	0x40020070
 8001aa0:	40020088 	.word	0x40020088
 8001aa4:	400200a0 	.word	0x400200a0
 8001aa8:	400200b8 	.word	0x400200b8
 8001aac:	40020410 	.word	0x40020410
 8001ab0:	40020428 	.word	0x40020428
 8001ab4:	40020440 	.word	0x40020440
 8001ab8:	40020458 	.word	0x40020458
 8001abc:	40020470 	.word	0x40020470
 8001ac0:	40020488 	.word	0x40020488
 8001ac4:	400204a0 	.word	0x400204a0
 8001ac8:	400204b8 	.word	0x400204b8
 8001acc:	58025408 	.word	0x58025408
 8001ad0:	5802541c 	.word	0x5802541c
 8001ad4:	58025430 	.word	0x58025430
 8001ad8:	58025444 	.word	0x58025444
 8001adc:	58025458 	.word	0x58025458
 8001ae0:	5802546c 	.word	0x5802546c
 8001ae4:	58025480 	.word	0x58025480
 8001ae8:	58025494 	.word	0x58025494
 8001aec:	2300      	movs	r3, #0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b00:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a6d      	ldr	r2, [pc, #436]	@ (8001cbc <HAL_DMA_Abort+0x444>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d04a      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a6b      	ldr	r2, [pc, #428]	@ (8001cc0 <HAL_DMA_Abort+0x448>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d045      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a6a      	ldr	r2, [pc, #424]	@ (8001cc4 <HAL_DMA_Abort+0x44c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d040      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a68      	ldr	r2, [pc, #416]	@ (8001cc8 <HAL_DMA_Abort+0x450>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d03b      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a67      	ldr	r2, [pc, #412]	@ (8001ccc <HAL_DMA_Abort+0x454>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d036      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a65      	ldr	r2, [pc, #404]	@ (8001cd0 <HAL_DMA_Abort+0x458>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d031      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a64      	ldr	r2, [pc, #400]	@ (8001cd4 <HAL_DMA_Abort+0x45c>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d02c      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a62      	ldr	r2, [pc, #392]	@ (8001cd8 <HAL_DMA_Abort+0x460>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d027      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a61      	ldr	r2, [pc, #388]	@ (8001cdc <HAL_DMA_Abort+0x464>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d022      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a5f      	ldr	r2, [pc, #380]	@ (8001ce0 <HAL_DMA_Abort+0x468>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d01d      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a5e      	ldr	r2, [pc, #376]	@ (8001ce4 <HAL_DMA_Abort+0x46c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d018      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a5c      	ldr	r2, [pc, #368]	@ (8001ce8 <HAL_DMA_Abort+0x470>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d013      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a5b      	ldr	r2, [pc, #364]	@ (8001cec <HAL_DMA_Abort+0x474>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d00e      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a59      	ldr	r2, [pc, #356]	@ (8001cf0 <HAL_DMA_Abort+0x478>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d009      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a58      	ldr	r2, [pc, #352]	@ (8001cf4 <HAL_DMA_Abort+0x47c>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d004      	beq.n	8001ba2 <HAL_DMA_Abort+0x32a>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a56      	ldr	r2, [pc, #344]	@ (8001cf8 <HAL_DMA_Abort+0x480>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d108      	bne.n	8001bb4 <HAL_DMA_Abort+0x33c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 0201 	bic.w	r2, r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	e007      	b.n	8001bc4 <HAL_DMA_Abort+0x34c>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001bc4:	e013      	b.n	8001bee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bc6:	f7ff fcc3 	bl	8001550 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d90c      	bls.n	8001bee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2203      	movs	r2, #3
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e12d      	b.n	8001e4a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1e5      	bne.n	8001bc6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a2f      	ldr	r2, [pc, #188]	@ (8001cbc <HAL_DMA_Abort+0x444>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d04a      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc0 <HAL_DMA_Abort+0x448>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d045      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a2c      	ldr	r2, [pc, #176]	@ (8001cc4 <HAL_DMA_Abort+0x44c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d040      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001cc8 <HAL_DMA_Abort+0x450>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d03b      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a29      	ldr	r2, [pc, #164]	@ (8001ccc <HAL_DMA_Abort+0x454>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d036      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a27      	ldr	r2, [pc, #156]	@ (8001cd0 <HAL_DMA_Abort+0x458>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d031      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a26      	ldr	r2, [pc, #152]	@ (8001cd4 <HAL_DMA_Abort+0x45c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d02c      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a24      	ldr	r2, [pc, #144]	@ (8001cd8 <HAL_DMA_Abort+0x460>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d027      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a23      	ldr	r2, [pc, #140]	@ (8001cdc <HAL_DMA_Abort+0x464>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d022      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a21      	ldr	r2, [pc, #132]	@ (8001ce0 <HAL_DMA_Abort+0x468>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d01d      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a20      	ldr	r2, [pc, #128]	@ (8001ce4 <HAL_DMA_Abort+0x46c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d018      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ce8 <HAL_DMA_Abort+0x470>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a1d      	ldr	r2, [pc, #116]	@ (8001cec <HAL_DMA_Abort+0x474>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d00e      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf0 <HAL_DMA_Abort+0x478>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d009      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001cf4 <HAL_DMA_Abort+0x47c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d004      	beq.n	8001c9a <HAL_DMA_Abort+0x422>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a18      	ldr	r2, [pc, #96]	@ (8001cf8 <HAL_DMA_Abort+0x480>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d101      	bne.n	8001c9e <HAL_DMA_Abort+0x426>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_DMA_Abort+0x428>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d02b      	beq.n	8001cfc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	223f      	movs	r2, #63	@ 0x3f
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	e02a      	b.n	8001d12 <HAL_DMA_Abort+0x49a>
 8001cbc:	40020010 	.word	0x40020010
 8001cc0:	40020028 	.word	0x40020028
 8001cc4:	40020040 	.word	0x40020040
 8001cc8:	40020058 	.word	0x40020058
 8001ccc:	40020070 	.word	0x40020070
 8001cd0:	40020088 	.word	0x40020088
 8001cd4:	400200a0 	.word	0x400200a0
 8001cd8:	400200b8 	.word	0x400200b8
 8001cdc:	40020410 	.word	0x40020410
 8001ce0:	40020428 	.word	0x40020428
 8001ce4:	40020440 	.word	0x40020440
 8001ce8:	40020458 	.word	0x40020458
 8001cec:	40020470 	.word	0x40020470
 8001cf0:	40020488 	.word	0x40020488
 8001cf4:	400204a0 	.word	0x400204a0
 8001cf8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d00:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d06:	f003 031f 	and.w	r3, r3, #31
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a4f      	ldr	r2, [pc, #316]	@ (8001e54 <HAL_DMA_Abort+0x5dc>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d072      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a4d      	ldr	r2, [pc, #308]	@ (8001e58 <HAL_DMA_Abort+0x5e0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d06d      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a4c      	ldr	r2, [pc, #304]	@ (8001e5c <HAL_DMA_Abort+0x5e4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d068      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a4a      	ldr	r2, [pc, #296]	@ (8001e60 <HAL_DMA_Abort+0x5e8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d063      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a49      	ldr	r2, [pc, #292]	@ (8001e64 <HAL_DMA_Abort+0x5ec>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d05e      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a47      	ldr	r2, [pc, #284]	@ (8001e68 <HAL_DMA_Abort+0x5f0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d059      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a46      	ldr	r2, [pc, #280]	@ (8001e6c <HAL_DMA_Abort+0x5f4>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d054      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a44      	ldr	r2, [pc, #272]	@ (8001e70 <HAL_DMA_Abort+0x5f8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d04f      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a43      	ldr	r2, [pc, #268]	@ (8001e74 <HAL_DMA_Abort+0x5fc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d04a      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a41      	ldr	r2, [pc, #260]	@ (8001e78 <HAL_DMA_Abort+0x600>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d045      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a40      	ldr	r2, [pc, #256]	@ (8001e7c <HAL_DMA_Abort+0x604>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d040      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a3e      	ldr	r2, [pc, #248]	@ (8001e80 <HAL_DMA_Abort+0x608>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d03b      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e84 <HAL_DMA_Abort+0x60c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d036      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a3b      	ldr	r2, [pc, #236]	@ (8001e88 <HAL_DMA_Abort+0x610>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d031      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a3a      	ldr	r2, [pc, #232]	@ (8001e8c <HAL_DMA_Abort+0x614>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d02c      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a38      	ldr	r2, [pc, #224]	@ (8001e90 <HAL_DMA_Abort+0x618>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d027      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a37      	ldr	r2, [pc, #220]	@ (8001e94 <HAL_DMA_Abort+0x61c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d022      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a35      	ldr	r2, [pc, #212]	@ (8001e98 <HAL_DMA_Abort+0x620>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01d      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a34      	ldr	r2, [pc, #208]	@ (8001e9c <HAL_DMA_Abort+0x624>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d018      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a32      	ldr	r2, [pc, #200]	@ (8001ea0 <HAL_DMA_Abort+0x628>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a31      	ldr	r2, [pc, #196]	@ (8001ea4 <HAL_DMA_Abort+0x62c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00e      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea8 <HAL_DMA_Abort+0x630>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d009      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a2e      	ldr	r2, [pc, #184]	@ (8001eac <HAL_DMA_Abort+0x634>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d004      	beq.n	8001e02 <HAL_DMA_Abort+0x58a>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a2c      	ldr	r2, [pc, #176]	@ (8001eb0 <HAL_DMA_Abort+0x638>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_DMA_Abort+0x58e>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_DMA_Abort+0x590>
 8001e06:	2300      	movs	r3, #0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d015      	beq.n	8001e38 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e14:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00c      	beq.n	8001e38 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e2c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e36:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40020010 	.word	0x40020010
 8001e58:	40020028 	.word	0x40020028
 8001e5c:	40020040 	.word	0x40020040
 8001e60:	40020058 	.word	0x40020058
 8001e64:	40020070 	.word	0x40020070
 8001e68:	40020088 	.word	0x40020088
 8001e6c:	400200a0 	.word	0x400200a0
 8001e70:	400200b8 	.word	0x400200b8
 8001e74:	40020410 	.word	0x40020410
 8001e78:	40020428 	.word	0x40020428
 8001e7c:	40020440 	.word	0x40020440
 8001e80:	40020458 	.word	0x40020458
 8001e84:	40020470 	.word	0x40020470
 8001e88:	40020488 	.word	0x40020488
 8001e8c:	400204a0 	.word	0x400204a0
 8001e90:	400204b8 	.word	0x400204b8
 8001e94:	58025408 	.word	0x58025408
 8001e98:	5802541c 	.word	0x5802541c
 8001e9c:	58025430 	.word	0x58025430
 8001ea0:	58025444 	.word	0x58025444
 8001ea4:	58025458 	.word	0x58025458
 8001ea8:	5802546c 	.word	0x5802546c
 8001eac:	58025480 	.word	0x58025480
 8001eb0:	58025494 	.word	0x58025494

08001eb4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e237      	b.n	8002336 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d004      	beq.n	8001edc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2280      	movs	r2, #128	@ 0x80
 8001ed6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e22c      	b.n	8002336 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a5c      	ldr	r2, [pc, #368]	@ (8002054 <HAL_DMA_Abort_IT+0x1a0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d04a      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a5b      	ldr	r2, [pc, #364]	@ (8002058 <HAL_DMA_Abort_IT+0x1a4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d045      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a59      	ldr	r2, [pc, #356]	@ (800205c <HAL_DMA_Abort_IT+0x1a8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d040      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a58      	ldr	r2, [pc, #352]	@ (8002060 <HAL_DMA_Abort_IT+0x1ac>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d03b      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a56      	ldr	r2, [pc, #344]	@ (8002064 <HAL_DMA_Abort_IT+0x1b0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d036      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a55      	ldr	r2, [pc, #340]	@ (8002068 <HAL_DMA_Abort_IT+0x1b4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d031      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a53      	ldr	r2, [pc, #332]	@ (800206c <HAL_DMA_Abort_IT+0x1b8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02c      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a52      	ldr	r2, [pc, #328]	@ (8002070 <HAL_DMA_Abort_IT+0x1bc>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d027      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a50      	ldr	r2, [pc, #320]	@ (8002074 <HAL_DMA_Abort_IT+0x1c0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d022      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a4f      	ldr	r2, [pc, #316]	@ (8002078 <HAL_DMA_Abort_IT+0x1c4>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d01d      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a4d      	ldr	r2, [pc, #308]	@ (800207c <HAL_DMA_Abort_IT+0x1c8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d018      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8002080 <HAL_DMA_Abort_IT+0x1cc>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d013      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a4a      	ldr	r2, [pc, #296]	@ (8002084 <HAL_DMA_Abort_IT+0x1d0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00e      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a49      	ldr	r2, [pc, #292]	@ (8002088 <HAL_DMA_Abort_IT+0x1d4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d009      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a47      	ldr	r2, [pc, #284]	@ (800208c <HAL_DMA_Abort_IT+0x1d8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d004      	beq.n	8001f7c <HAL_DMA_Abort_IT+0xc8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a46      	ldr	r2, [pc, #280]	@ (8002090 <HAL_DMA_Abort_IT+0x1dc>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d101      	bne.n	8001f80 <HAL_DMA_Abort_IT+0xcc>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_DMA_Abort_IT+0xce>
 8001f80:	2300      	movs	r3, #0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8086 	beq.w	8002094 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a2f      	ldr	r2, [pc, #188]	@ (8002054 <HAL_DMA_Abort_IT+0x1a0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d04a      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a2e      	ldr	r2, [pc, #184]	@ (8002058 <HAL_DMA_Abort_IT+0x1a4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d045      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a2c      	ldr	r2, [pc, #176]	@ (800205c <HAL_DMA_Abort_IT+0x1a8>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d040      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a2b      	ldr	r2, [pc, #172]	@ (8002060 <HAL_DMA_Abort_IT+0x1ac>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d03b      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a29      	ldr	r2, [pc, #164]	@ (8002064 <HAL_DMA_Abort_IT+0x1b0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d036      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a28      	ldr	r2, [pc, #160]	@ (8002068 <HAL_DMA_Abort_IT+0x1b4>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d031      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a26      	ldr	r2, [pc, #152]	@ (800206c <HAL_DMA_Abort_IT+0x1b8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d02c      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a25      	ldr	r2, [pc, #148]	@ (8002070 <HAL_DMA_Abort_IT+0x1bc>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d027      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a23      	ldr	r2, [pc, #140]	@ (8002074 <HAL_DMA_Abort_IT+0x1c0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d022      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a22      	ldr	r2, [pc, #136]	@ (8002078 <HAL_DMA_Abort_IT+0x1c4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d01d      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a20      	ldr	r2, [pc, #128]	@ (800207c <HAL_DMA_Abort_IT+0x1c8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d018      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a1f      	ldr	r2, [pc, #124]	@ (8002080 <HAL_DMA_Abort_IT+0x1cc>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d013      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1d      	ldr	r2, [pc, #116]	@ (8002084 <HAL_DMA_Abort_IT+0x1d0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00e      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1c      	ldr	r2, [pc, #112]	@ (8002088 <HAL_DMA_Abort_IT+0x1d4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d009      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1a      	ldr	r2, [pc, #104]	@ (800208c <HAL_DMA_Abort_IT+0x1d8>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d004      	beq.n	8002030 <HAL_DMA_Abort_IT+0x17c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a19      	ldr	r2, [pc, #100]	@ (8002090 <HAL_DMA_Abort_IT+0x1dc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d108      	bne.n	8002042 <HAL_DMA_Abort_IT+0x18e>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e178      	b.n	8002334 <HAL_DMA_Abort_IT+0x480>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0201 	bic.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e16f      	b.n	8002334 <HAL_DMA_Abort_IT+0x480>
 8002054:	40020010 	.word	0x40020010
 8002058:	40020028 	.word	0x40020028
 800205c:	40020040 	.word	0x40020040
 8002060:	40020058 	.word	0x40020058
 8002064:	40020070 	.word	0x40020070
 8002068:	40020088 	.word	0x40020088
 800206c:	400200a0 	.word	0x400200a0
 8002070:	400200b8 	.word	0x400200b8
 8002074:	40020410 	.word	0x40020410
 8002078:	40020428 	.word	0x40020428
 800207c:	40020440 	.word	0x40020440
 8002080:	40020458 	.word	0x40020458
 8002084:	40020470 	.word	0x40020470
 8002088:	40020488 	.word	0x40020488
 800208c:	400204a0 	.word	0x400204a0
 8002090:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 020e 	bic.w	r2, r2, #14
 80020a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a6c      	ldr	r2, [pc, #432]	@ (800225c <HAL_DMA_Abort_IT+0x3a8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d04a      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a6b      	ldr	r2, [pc, #428]	@ (8002260 <HAL_DMA_Abort_IT+0x3ac>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d045      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a69      	ldr	r2, [pc, #420]	@ (8002264 <HAL_DMA_Abort_IT+0x3b0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d040      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a68      	ldr	r2, [pc, #416]	@ (8002268 <HAL_DMA_Abort_IT+0x3b4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d03b      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a66      	ldr	r2, [pc, #408]	@ (800226c <HAL_DMA_Abort_IT+0x3b8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d036      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a65      	ldr	r2, [pc, #404]	@ (8002270 <HAL_DMA_Abort_IT+0x3bc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d031      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a63      	ldr	r2, [pc, #396]	@ (8002274 <HAL_DMA_Abort_IT+0x3c0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d02c      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a62      	ldr	r2, [pc, #392]	@ (8002278 <HAL_DMA_Abort_IT+0x3c4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d027      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a60      	ldr	r2, [pc, #384]	@ (800227c <HAL_DMA_Abort_IT+0x3c8>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d022      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a5f      	ldr	r2, [pc, #380]	@ (8002280 <HAL_DMA_Abort_IT+0x3cc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d01d      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a5d      	ldr	r2, [pc, #372]	@ (8002284 <HAL_DMA_Abort_IT+0x3d0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d018      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a5c      	ldr	r2, [pc, #368]	@ (8002288 <HAL_DMA_Abort_IT+0x3d4>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d013      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a5a      	ldr	r2, [pc, #360]	@ (800228c <HAL_DMA_Abort_IT+0x3d8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00e      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a59      	ldr	r2, [pc, #356]	@ (8002290 <HAL_DMA_Abort_IT+0x3dc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d009      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a57      	ldr	r2, [pc, #348]	@ (8002294 <HAL_DMA_Abort_IT+0x3e0>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d004      	beq.n	8002144 <HAL_DMA_Abort_IT+0x290>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a56      	ldr	r2, [pc, #344]	@ (8002298 <HAL_DMA_Abort_IT+0x3e4>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d108      	bne.n	8002156 <HAL_DMA_Abort_IT+0x2a2>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e007      	b.n	8002166 <HAL_DMA_Abort_IT+0x2b2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0201 	bic.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a3c      	ldr	r2, [pc, #240]	@ (800225c <HAL_DMA_Abort_IT+0x3a8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d072      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a3a      	ldr	r2, [pc, #232]	@ (8002260 <HAL_DMA_Abort_IT+0x3ac>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d06d      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a39      	ldr	r2, [pc, #228]	@ (8002264 <HAL_DMA_Abort_IT+0x3b0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d068      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a37      	ldr	r2, [pc, #220]	@ (8002268 <HAL_DMA_Abort_IT+0x3b4>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d063      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a36      	ldr	r2, [pc, #216]	@ (800226c <HAL_DMA_Abort_IT+0x3b8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d05e      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a34      	ldr	r2, [pc, #208]	@ (8002270 <HAL_DMA_Abort_IT+0x3bc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d059      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a33      	ldr	r2, [pc, #204]	@ (8002274 <HAL_DMA_Abort_IT+0x3c0>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d054      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a31      	ldr	r2, [pc, #196]	@ (8002278 <HAL_DMA_Abort_IT+0x3c4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d04f      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a30      	ldr	r2, [pc, #192]	@ (800227c <HAL_DMA_Abort_IT+0x3c8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d04a      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002280 <HAL_DMA_Abort_IT+0x3cc>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d045      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002284 <HAL_DMA_Abort_IT+0x3d0>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d040      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002288 <HAL_DMA_Abort_IT+0x3d4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d03b      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a2a      	ldr	r2, [pc, #168]	@ (800228c <HAL_DMA_Abort_IT+0x3d8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d036      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a28      	ldr	r2, [pc, #160]	@ (8002290 <HAL_DMA_Abort_IT+0x3dc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d031      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a27      	ldr	r2, [pc, #156]	@ (8002294 <HAL_DMA_Abort_IT+0x3e0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d02c      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a25      	ldr	r2, [pc, #148]	@ (8002298 <HAL_DMA_Abort_IT+0x3e4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d027      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a24      	ldr	r2, [pc, #144]	@ (800229c <HAL_DMA_Abort_IT+0x3e8>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d022      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a22      	ldr	r2, [pc, #136]	@ (80022a0 <HAL_DMA_Abort_IT+0x3ec>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d01d      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a21      	ldr	r2, [pc, #132]	@ (80022a4 <HAL_DMA_Abort_IT+0x3f0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d018      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1f      	ldr	r2, [pc, #124]	@ (80022a8 <HAL_DMA_Abort_IT+0x3f4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a1e      	ldr	r2, [pc, #120]	@ (80022ac <HAL_DMA_Abort_IT+0x3f8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d00e      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a1c      	ldr	r2, [pc, #112]	@ (80022b0 <HAL_DMA_Abort_IT+0x3fc>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a1b      	ldr	r2, [pc, #108]	@ (80022b4 <HAL_DMA_Abort_IT+0x400>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d004      	beq.n	8002256 <HAL_DMA_Abort_IT+0x3a2>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a19      	ldr	r2, [pc, #100]	@ (80022b8 <HAL_DMA_Abort_IT+0x404>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d132      	bne.n	80022bc <HAL_DMA_Abort_IT+0x408>
 8002256:	2301      	movs	r3, #1
 8002258:	e031      	b.n	80022be <HAL_DMA_Abort_IT+0x40a>
 800225a:	bf00      	nop
 800225c:	40020010 	.word	0x40020010
 8002260:	40020028 	.word	0x40020028
 8002264:	40020040 	.word	0x40020040
 8002268:	40020058 	.word	0x40020058
 800226c:	40020070 	.word	0x40020070
 8002270:	40020088 	.word	0x40020088
 8002274:	400200a0 	.word	0x400200a0
 8002278:	400200b8 	.word	0x400200b8
 800227c:	40020410 	.word	0x40020410
 8002280:	40020428 	.word	0x40020428
 8002284:	40020440 	.word	0x40020440
 8002288:	40020458 	.word	0x40020458
 800228c:	40020470 	.word	0x40020470
 8002290:	40020488 	.word	0x40020488
 8002294:	400204a0 	.word	0x400204a0
 8002298:	400204b8 	.word	0x400204b8
 800229c:	58025408 	.word	0x58025408
 80022a0:	5802541c 	.word	0x5802541c
 80022a4:	58025430 	.word	0x58025430
 80022a8:	58025444 	.word	0x58025444
 80022ac:	58025458 	.word	0x58025458
 80022b0:	5802546c 	.word	0x5802546c
 80022b4:	58025480 	.word	0x58025480
 80022b8:	58025494 	.word	0x58025494
 80022bc:	2300      	movs	r3, #0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d028      	beq.n	8002314 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	2201      	movs	r2, #1
 80022e2:	409a      	lsls	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80022f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002304:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002308:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002312:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop

08002340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	@ 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800234e:	4b89      	ldr	r3, [pc, #548]	@ (8002574 <HAL_GPIO_Init+0x234>)
 8002350:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002352:	e194      	b.n	800267e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	2101      	movs	r1, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8186 	beq.w	8002678 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d005      	beq.n	8002384 <HAL_GPIO_Init+0x44>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d130      	bne.n	80023e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023ba:	2201      	movs	r2, #1
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4013      	ands	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	091b      	lsrs	r3, r3, #4
 80023d0:	f003 0201 	and.w	r2, r3, #1
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d017      	beq.n	8002422 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	2203      	movs	r2, #3
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d123      	bne.n	8002476 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	08da      	lsrs	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3208      	adds	r2, #8
 8002436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	220f      	movs	r2, #15
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4013      	ands	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	08da      	lsrs	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3208      	adds	r2, #8
 8002470:	69b9      	ldr	r1, [r7, #24]
 8002472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	2203      	movs	r2, #3
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0203 	and.w	r2, r3, #3
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80e0 	beq.w	8002678 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002578 <HAL_GPIO_Init+0x238>)
 80024ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024be:	4a2e      	ldr	r2, [pc, #184]	@ (8002578 <HAL_GPIO_Init+0x238>)
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002578 <HAL_GPIO_Init+0x238>)
 80024ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024d6:	4a29      	ldr	r2, [pc, #164]	@ (800257c <HAL_GPIO_Init+0x23c>)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3302      	adds	r3, #2
 80024de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a20      	ldr	r2, [pc, #128]	@ (8002580 <HAL_GPIO_Init+0x240>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d052      	beq.n	80025a8 <HAL_GPIO_Init+0x268>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a1f      	ldr	r2, [pc, #124]	@ (8002584 <HAL_GPIO_Init+0x244>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d031      	beq.n	800256e <HAL_GPIO_Init+0x22e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a1e      	ldr	r2, [pc, #120]	@ (8002588 <HAL_GPIO_Init+0x248>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d02b      	beq.n	800256a <HAL_GPIO_Init+0x22a>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a1d      	ldr	r2, [pc, #116]	@ (800258c <HAL_GPIO_Init+0x24c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d025      	beq.n	8002566 <HAL_GPIO_Init+0x226>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a1c      	ldr	r2, [pc, #112]	@ (8002590 <HAL_GPIO_Init+0x250>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01f      	beq.n	8002562 <HAL_GPIO_Init+0x222>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a1b      	ldr	r2, [pc, #108]	@ (8002594 <HAL_GPIO_Init+0x254>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d019      	beq.n	800255e <HAL_GPIO_Init+0x21e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a1a      	ldr	r2, [pc, #104]	@ (8002598 <HAL_GPIO_Init+0x258>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <HAL_GPIO_Init+0x21a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a19      	ldr	r2, [pc, #100]	@ (800259c <HAL_GPIO_Init+0x25c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00d      	beq.n	8002556 <HAL_GPIO_Init+0x216>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a18      	ldr	r2, [pc, #96]	@ (80025a0 <HAL_GPIO_Init+0x260>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d007      	beq.n	8002552 <HAL_GPIO_Init+0x212>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a17      	ldr	r2, [pc, #92]	@ (80025a4 <HAL_GPIO_Init+0x264>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d101      	bne.n	800254e <HAL_GPIO_Init+0x20e>
 800254a:	2309      	movs	r3, #9
 800254c:	e02d      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 800254e:	230a      	movs	r3, #10
 8002550:	e02b      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 8002552:	2308      	movs	r3, #8
 8002554:	e029      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 8002556:	2307      	movs	r3, #7
 8002558:	e027      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 800255a:	2306      	movs	r3, #6
 800255c:	e025      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 800255e:	2305      	movs	r3, #5
 8002560:	e023      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 8002562:	2304      	movs	r3, #4
 8002564:	e021      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 8002566:	2303      	movs	r3, #3
 8002568:	e01f      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 800256a:	2302      	movs	r3, #2
 800256c:	e01d      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 800256e:	2301      	movs	r3, #1
 8002570:	e01b      	b.n	80025aa <HAL_GPIO_Init+0x26a>
 8002572:	bf00      	nop
 8002574:	58000080 	.word	0x58000080
 8002578:	58024400 	.word	0x58024400
 800257c:	58000400 	.word	0x58000400
 8002580:	58020000 	.word	0x58020000
 8002584:	58020400 	.word	0x58020400
 8002588:	58020800 	.word	0x58020800
 800258c:	58020c00 	.word	0x58020c00
 8002590:	58021000 	.word	0x58021000
 8002594:	58021400 	.word	0x58021400
 8002598:	58021800 	.word	0x58021800
 800259c:	58021c00 	.word	0x58021c00
 80025a0:	58022000 	.word	0x58022000
 80025a4:	58022400 	.word	0x58022400
 80025a8:	2300      	movs	r3, #0
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	f002 0203 	and.w	r2, r2, #3
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	4093      	lsls	r3, r2
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ba:	4938      	ldr	r1, [pc, #224]	@ (800269c <HAL_GPIO_Init+0x35c>)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80025ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80025f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800261c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	3301      	adds	r3, #1
 800267c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f ae63 	bne.w	8002354 <HAL_GPIO_Init+0x14>
  }
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	3724      	adds	r7, #36	@ 0x24
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	58000400 	.word	0x58000400

080026a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691a      	ldr	r2, [r3, #16]
 80026b0:	887b      	ldrh	r3, [r7, #2]
 80026b2:	4013      	ands	r3, r2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e001      	b.n	80026c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	807b      	strh	r3, [r7, #2]
 80026dc:	4613      	mov	r3, r2
 80026de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026e0:	787b      	ldrb	r3, [r7, #1]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026e6:	887a      	ldrh	r2, [r7, #2]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80026ec:	e003      	b.n	80026f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026ee:	887b      	ldrh	r3, [r7, #2]
 80026f0:	041a      	lsls	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	619a      	str	r2, [r3, #24]
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800270c:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <HAL_PWREx_ConfigSupply+0x70>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b04      	cmp	r3, #4
 8002716:	d00a      	beq.n	800272e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002718:	4b16      	ldr	r3, [pc, #88]	@ (8002774 <HAL_PWREx_ConfigSupply+0x70>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	429a      	cmp	r2, r3
 8002724:	d001      	beq.n	800272a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e01f      	b.n	800276a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	e01d      	b.n	800276a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800272e:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <HAL_PWREx_ConfigSupply+0x70>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	f023 0207 	bic.w	r2, r3, #7
 8002736:	490f      	ldr	r1, [pc, #60]	@ (8002774 <HAL_PWREx_ConfigSupply+0x70>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4313      	orrs	r3, r2
 800273c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800273e:	f7fe ff07 	bl	8001550 <HAL_GetTick>
 8002742:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002744:	e009      	b.n	800275a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002746:	f7fe ff03 	bl	8001550 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002754:	d901      	bls.n	800275a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e007      	b.n	800276a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800275a:	4b06      	ldr	r3, [pc, #24]	@ (8002774 <HAL_PWREx_ConfigSupply+0x70>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002766:	d1ee      	bne.n	8002746 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	58024800 	.word	0x58024800

08002778 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08c      	sub	sp, #48	@ 0x30
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	f000 bc48 	b.w	800301c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 8088 	beq.w	80028aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800279a:	4b99      	ldr	r3, [pc, #612]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027a4:	4b96      	ldr	r3, [pc, #600]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 80027a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027ac:	2b10      	cmp	r3, #16
 80027ae:	d007      	beq.n	80027c0 <HAL_RCC_OscConfig+0x48>
 80027b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b2:	2b18      	cmp	r3, #24
 80027b4:	d111      	bne.n	80027da <HAL_RCC_OscConfig+0x62>
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027c0:	4b8f      	ldr	r3, [pc, #572]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d06d      	beq.n	80028a8 <HAL_RCC_OscConfig+0x130>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d169      	bne.n	80028a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	f000 bc21 	b.w	800301c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027e2:	d106      	bne.n	80027f2 <HAL_RCC_OscConfig+0x7a>
 80027e4:	4b86      	ldr	r3, [pc, #536]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a85      	ldr	r2, [pc, #532]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 80027ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027ee:	6013      	str	r3, [r2, #0]
 80027f0:	e02e      	b.n	8002850 <HAL_RCC_OscConfig+0xd8>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10c      	bne.n	8002814 <HAL_RCC_OscConfig+0x9c>
 80027fa:	4b81      	ldr	r3, [pc, #516]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a80      	ldr	r2, [pc, #512]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 8002800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b7e      	ldr	r3, [pc, #504]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a7d      	ldr	r2, [pc, #500]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 800280c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e01d      	b.n	8002850 <HAL_RCC_OscConfig+0xd8>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0xc0>
 800281e:	4b78      	ldr	r3, [pc, #480]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a77      	ldr	r2, [pc, #476]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b75      	ldr	r3, [pc, #468]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a74      	ldr	r2, [pc, #464]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0xd8>
 8002838:	4b71      	ldr	r3, [pc, #452]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a70      	ldr	r2, [pc, #448]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 800283e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b6e      	ldr	r3, [pc, #440]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a6d      	ldr	r2, [pc, #436]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 800284a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800284e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fe7a 	bl	8001550 <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002860:	f7fe fe76 	bl	8001550 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	@ 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e3d4      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002872:	4b63      	ldr	r3, [pc, #396]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0xe8>
 800287e:	e014      	b.n	80028aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe fe66 	bl	8001550 <HAL_GetTick>
 8002884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002888:	f7fe fe62 	bl	8001550 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	@ 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e3c0      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800289a:	4b59      	ldr	r3, [pc, #356]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x110>
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80ca 	beq.w	8002a4c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b8:	4b51      	ldr	r3, [pc, #324]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028c2:	4b4f      	ldr	r3, [pc, #316]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_RCC_OscConfig+0x166>
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	2b18      	cmp	r3, #24
 80028d2:	d156      	bne.n	8002982 <HAL_RCC_OscConfig+0x20a>
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d151      	bne.n	8002982 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028de:	4b48      	ldr	r3, [pc, #288]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x17e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e392      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028f6:	4b42      	ldr	r3, [pc, #264]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 0219 	bic.w	r2, r3, #25
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	493f      	ldr	r1, [pc, #252]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 8002904:	4313      	orrs	r3, r2
 8002906:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fe22 	bl	8001550 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002910:	f7fe fe1e 	bl	8001550 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e37c      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002922:	4b37      	ldr	r3, [pc, #220]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292e:	f7fe fe3f 	bl	80015b0 <HAL_GetREVID>
 8002932:	4603      	mov	r3, r0
 8002934:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002938:	4293      	cmp	r3, r2
 800293a:	d817      	bhi.n	800296c <HAL_RCC_OscConfig+0x1f4>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b40      	cmp	r3, #64	@ 0x40
 8002942:	d108      	bne.n	8002956 <HAL_RCC_OscConfig+0x1de>
 8002944:	4b2e      	ldr	r3, [pc, #184]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800294c:	4a2c      	ldr	r2, [pc, #176]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 800294e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002952:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002954:	e07a      	b.n	8002a4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002956:	4b2a      	ldr	r3, [pc, #168]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	031b      	lsls	r3, r3, #12
 8002964:	4926      	ldr	r1, [pc, #152]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 8002966:	4313      	orrs	r3, r2
 8002968:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800296a:	e06f      	b.n	8002a4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296c:	4b24      	ldr	r3, [pc, #144]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	061b      	lsls	r3, r3, #24
 800297a:	4921      	ldr	r1, [pc, #132]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002980:	e064      	b.n	8002a4c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d047      	beq.n	8002a1a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800298a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 0219 	bic.w	r2, r3, #25
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	491a      	ldr	r1, [pc, #104]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 8002998:	4313      	orrs	r3, r2
 800299a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fdd8 	bl	8001550 <HAL_GetTick>
 80029a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a4:	f7fe fdd4 	bl	8001550 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e332      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029b6:	4b12      	ldr	r3, [pc, #72]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0f0      	beq.n	80029a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c2:	f7fe fdf5 	bl	80015b0 <HAL_GetREVID>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d819      	bhi.n	8002a04 <HAL_RCC_OscConfig+0x28c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b40      	cmp	r3, #64	@ 0x40
 80029d6:	d108      	bne.n	80029ea <HAL_RCC_OscConfig+0x272>
 80029d8:	4b09      	ldr	r3, [pc, #36]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80029e0:	4a07      	ldr	r2, [pc, #28]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 80029e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e6:	6053      	str	r3, [r2, #4]
 80029e8:	e030      	b.n	8002a4c <HAL_RCC_OscConfig+0x2d4>
 80029ea:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	031b      	lsls	r3, r3, #12
 80029f8:	4901      	ldr	r1, [pc, #4]	@ (8002a00 <HAL_RCC_OscConfig+0x288>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
 80029fe:	e025      	b.n	8002a4c <HAL_RCC_OscConfig+0x2d4>
 8002a00:	58024400 	.word	0x58024400
 8002a04:	4b9a      	ldr	r3, [pc, #616]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	061b      	lsls	r3, r3, #24
 8002a12:	4997      	ldr	r1, [pc, #604]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
 8002a18:	e018      	b.n	8002a4c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1a:	4b95      	ldr	r3, [pc, #596]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a94      	ldr	r2, [pc, #592]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7fe fd93 	bl	8001550 <HAL_GetTick>
 8002a2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2e:	f7fe fd8f 	bl	8001550 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e2ed      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a40:	4b8b      	ldr	r3, [pc, #556]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1f0      	bne.n	8002a2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 80a9 	beq.w	8002bac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5a:	4b85      	ldr	r3, [pc, #532]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a64:	4b82      	ldr	r3, [pc, #520]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a68:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d007      	beq.n	8002a80 <HAL_RCC_OscConfig+0x308>
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b18      	cmp	r3, #24
 8002a74:	d13a      	bne.n	8002aec <HAL_RCC_OscConfig+0x374>
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d135      	bne.n	8002aec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a80:	4b7b      	ldr	r3, [pc, #492]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_OscConfig+0x320>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	2b80      	cmp	r3, #128	@ 0x80
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e2c1      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a98:	f7fe fd8a 	bl	80015b0 <HAL_GetREVID>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d817      	bhi.n	8002ad6 <HAL_RCC_OscConfig+0x35e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	2b20      	cmp	r3, #32
 8002aac:	d108      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x348>
 8002aae:	4b70      	ldr	r3, [pc, #448]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ab6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002ab8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002abc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002abe:	e075      	b.n	8002bac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ac0:	4b6b      	ldr	r3, [pc, #428]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	069b      	lsls	r3, r3, #26
 8002ace:	4968      	ldr	r1, [pc, #416]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ad4:	e06a      	b.n	8002bac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ad6:	4b66      	ldr	r3, [pc, #408]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	061b      	lsls	r3, r3, #24
 8002ae4:	4962      	ldr	r1, [pc, #392]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002aea:	e05f      	b.n	8002bac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d042      	beq.n	8002b7a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002af4:	4b5e      	ldr	r3, [pc, #376]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a5d      	ldr	r2, [pc, #372]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002afa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002afe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe fd26 	bl	8001550 <HAL_GetTick>
 8002b04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b08:	f7fe fd22 	bl	8001550 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e280      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b1a:	4b55      	ldr	r3, [pc, #340]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b26:	f7fe fd43 	bl	80015b0 <HAL_GetREVID>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d817      	bhi.n	8002b64 <HAL_RCC_OscConfig+0x3ec>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d108      	bne.n	8002b4e <HAL_RCC_OscConfig+0x3d6>
 8002b3c:	4b4c      	ldr	r3, [pc, #304]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002b44:	4a4a      	ldr	r2, [pc, #296]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002b46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002b4a:	6053      	str	r3, [r2, #4]
 8002b4c:	e02e      	b.n	8002bac <HAL_RCC_OscConfig+0x434>
 8002b4e:	4b48      	ldr	r3, [pc, #288]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	069b      	lsls	r3, r3, #26
 8002b5c:	4944      	ldr	r1, [pc, #272]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
 8002b62:	e023      	b.n	8002bac <HAL_RCC_OscConfig+0x434>
 8002b64:	4b42      	ldr	r3, [pc, #264]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	493f      	ldr	r1, [pc, #252]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	60cb      	str	r3, [r1, #12]
 8002b78:	e018      	b.n	8002bac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a3c      	ldr	r2, [pc, #240]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002b80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b86:	f7fe fce3 	bl	8001550 <HAL_GetTick>
 8002b8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fcdf 	bl	8001550 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e23d      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ba0:	4b33      	ldr	r3, [pc, #204]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d036      	beq.n	8002c26 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d019      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc4:	4a2a      	ldr	r2, [pc, #168]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bcc:	f7fe fcc0 	bl	8001550 <HAL_GetTick>
 8002bd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd4:	f7fe fcbc 	bl	8001550 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e21a      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002be6:	4b22      	ldr	r3, [pc, #136]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x45c>
 8002bf2:	e018      	b.n	8002c26 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002bfa:	f023 0301 	bic.w	r3, r3, #1
 8002bfe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c00:	f7fe fca6 	bl	8001550 <HAL_GetTick>
 8002c04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c08:	f7fe fca2 	bl	8001550 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e200      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c1a:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0320 	and.w	r3, r3, #32
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d039      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d01c      	beq.n	8002c74 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002c40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002c44:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c46:	f7fe fc83 	bl	8001550 <HAL_GetTick>
 8002c4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c4e:	f7fe fc7f 	bl	8001550 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e1dd      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002c60:	4b03      	ldr	r3, [pc, #12]	@ (8002c70 <HAL_RCC_OscConfig+0x4f8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x4d6>
 8002c6c:	e01b      	b.n	8002ca6 <HAL_RCC_OscConfig+0x52e>
 8002c6e:	bf00      	nop
 8002c70:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c74:	4b9b      	ldr	r3, [pc, #620]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a9a      	ldr	r2, [pc, #616]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002c7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002c80:	f7fe fc66 	bl	8001550 <HAL_GetTick>
 8002c84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c88:	f7fe fc62 	bl	8001550 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e1c0      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002c9a:	4b92      	ldr	r3, [pc, #584]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8081 	beq.w	8002db6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cb4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ee8 <HAL_RCC_OscConfig+0x770>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a8b      	ldr	r2, [pc, #556]	@ (8002ee8 <HAL_RCC_OscConfig+0x770>)
 8002cba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cc0:	f7fe fc46 	bl	8001550 <HAL_GetTick>
 8002cc4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc8:	f7fe fc42 	bl	8001550 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b64      	cmp	r3, #100	@ 0x64
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e1a0      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cda:	4b83      	ldr	r3, [pc, #524]	@ (8002ee8 <HAL_RCC_OscConfig+0x770>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d106      	bne.n	8002cfc <HAL_RCC_OscConfig+0x584>
 8002cee:	4b7d      	ldr	r3, [pc, #500]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cfa:	e02d      	b.n	8002d58 <HAL_RCC_OscConfig+0x5e0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10c      	bne.n	8002d1e <HAL_RCC_OscConfig+0x5a6>
 8002d04:	4b77      	ldr	r3, [pc, #476]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d08:	4a76      	ldr	r2, [pc, #472]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d10:	4b74      	ldr	r3, [pc, #464]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d14:	4a73      	ldr	r2, [pc, #460]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002d16:	f023 0304 	bic.w	r3, r3, #4
 8002d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d1c:	e01c      	b.n	8002d58 <HAL_RCC_OscConfig+0x5e0>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x5c8>
 8002d26:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2a:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d32:	4b6c      	ldr	r3, [pc, #432]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d36:	4a6b      	ldr	r2, [pc, #428]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0x5e0>
 8002d40:	4b68      	ldr	r3, [pc, #416]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d44:	4a67      	ldr	r2, [pc, #412]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4c:	4b65      	ldr	r3, [pc, #404]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d50:	4a64      	ldr	r2, [pc, #400]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002d52:	f023 0304 	bic.w	r3, r3, #4
 8002d56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d015      	beq.n	8002d8c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7fe fbf6 	bl	8001550 <HAL_GetTick>
 8002d64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7fe fbf2 	bl	8001550 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e14e      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d7e:	4b59      	ldr	r3, [pc, #356]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0ee      	beq.n	8002d68 <HAL_RCC_OscConfig+0x5f0>
 8002d8a:	e014      	b.n	8002db6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7fe fbe0 	bl	8001550 <HAL_GetTick>
 8002d90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d94:	f7fe fbdc 	bl	8001550 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e138      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002daa:	4b4e      	ldr	r3, [pc, #312]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1ee      	bne.n	8002d94 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 812d 	beq.w	800301a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002dc0:	4b48      	ldr	r3, [pc, #288]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dc8:	2b18      	cmp	r3, #24
 8002dca:	f000 80bd 	beq.w	8002f48 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	f040 809e 	bne.w	8002f14 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd8:	4b42      	ldr	r3, [pc, #264]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a41      	ldr	r2, [pc, #260]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002dde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fbb4 	bl	8001550 <HAL_GetTick>
 8002de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dec:	f7fe fbb0 	bl	8001550 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e10e      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dfe:	4b39      	ldr	r3, [pc, #228]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e0a:	4b36      	ldr	r3, [pc, #216]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002e0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e0e:	4b37      	ldr	r3, [pc, #220]	@ (8002eec <HAL_RCC_OscConfig+0x774>)
 8002e10:	4013      	ands	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e1a:	0112      	lsls	r2, r2, #4
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	4931      	ldr	r1, [pc, #196]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	628b      	str	r3, [r1, #40]	@ 0x28
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e32:	3b01      	subs	r3, #1
 8002e34:	025b      	lsls	r3, r3, #9
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	041b      	lsls	r3, r3, #16
 8002e42:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	061b      	lsls	r3, r3, #24
 8002e50:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002e54:	4923      	ldr	r1, [pc, #140]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002e5a:	4b22      	ldr	r3, [pc, #136]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5e:	4a21      	ldr	r2, [pc, #132]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e66:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002e68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e6a:	4b21      	ldr	r3, [pc, #132]	@ (8002ef0 <HAL_RCC_OscConfig+0x778>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e72:	00d2      	lsls	r2, r2, #3
 8002e74:	491b      	ldr	r1, [pc, #108]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7e:	f023 020c 	bic.w	r2, r3, #12
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	4917      	ldr	r1, [pc, #92]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002e8c:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e90:	f023 0202 	bic.w	r2, r3, #2
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e98:	4912      	ldr	r1, [pc, #72]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea2:	4a10      	ldr	r2, [pc, #64]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002ea4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eae:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002ebc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ec0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ec2:	4b08      	ldr	r3, [pc, #32]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ec6:	4a07      	ldr	r2, [pc, #28]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ece:	4b05      	ldr	r3, [pc, #20]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a04      	ldr	r2, [pc, #16]	@ (8002ee4 <HAL_RCC_OscConfig+0x76c>)
 8002ed4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ed8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eda:	f7fe fb39 	bl	8001550 <HAL_GetTick>
 8002ede:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ee0:	e011      	b.n	8002f06 <HAL_RCC_OscConfig+0x78e>
 8002ee2:	bf00      	nop
 8002ee4:	58024400 	.word	0x58024400
 8002ee8:	58024800 	.word	0x58024800
 8002eec:	fffffc0c 	.word	0xfffffc0c
 8002ef0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe fb2c 	bl	8001550 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e08a      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f06:	4b47      	ldr	r3, [pc, #284]	@ (8003024 <HAL_RCC_OscConfig+0x8ac>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x77c>
 8002f12:	e082      	b.n	800301a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f14:	4b43      	ldr	r3, [pc, #268]	@ (8003024 <HAL_RCC_OscConfig+0x8ac>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a42      	ldr	r2, [pc, #264]	@ (8003024 <HAL_RCC_OscConfig+0x8ac>)
 8002f1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f20:	f7fe fb16 	bl	8001550 <HAL_GetTick>
 8002f24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f28:	f7fe fb12 	bl	8001550 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e070      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003024 <HAL_RCC_OscConfig+0x8ac>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x7b0>
 8002f46:	e068      	b.n	800301a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002f48:	4b36      	ldr	r3, [pc, #216]	@ (8003024 <HAL_RCC_OscConfig+0x8ac>)
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002f4e:	4b35      	ldr	r3, [pc, #212]	@ (8003024 <HAL_RCC_OscConfig+0x8ac>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f52:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d031      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	f003 0203 	and.w	r2, r3, #3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d12a      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	091b      	lsrs	r3, r3, #4
 8002f6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d122      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d11a      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	0a5b      	lsrs	r3, r3, #9
 8002f8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f96:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d111      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	0c1b      	lsrs	r3, r3, #16
 8002fa0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d108      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	0e1b      	lsrs	r3, r3, #24
 8002fb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e02b      	b.n	800301c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002fc4:	4b17      	ldr	r3, [pc, #92]	@ (8003024 <HAL_RCC_OscConfig+0x8ac>)
 8002fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fc8:	08db      	lsrs	r3, r3, #3
 8002fca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d01f      	beq.n	800301a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002fda:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <HAL_RCC_OscConfig+0x8ac>)
 8002fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fde:	4a11      	ldr	r2, [pc, #68]	@ (8003024 <HAL_RCC_OscConfig+0x8ac>)
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fe6:	f7fe fab3 	bl	8001550 <HAL_GetTick>
 8002fea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002fec:	bf00      	nop
 8002fee:	f7fe faaf 	bl	8001550 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d0f9      	beq.n	8002fee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <HAL_RCC_OscConfig+0x8ac>)
 8002ffc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8003028 <HAL_RCC_OscConfig+0x8b0>)
 8003000:	4013      	ands	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003006:	00d2      	lsls	r2, r2, #3
 8003008:	4906      	ldr	r1, [pc, #24]	@ (8003024 <HAL_RCC_OscConfig+0x8ac>)
 800300a:	4313      	orrs	r3, r2
 800300c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800300e:	4b05      	ldr	r3, [pc, #20]	@ (8003024 <HAL_RCC_OscConfig+0x8ac>)
 8003010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003012:	4a04      	ldr	r2, [pc, #16]	@ (8003024 <HAL_RCC_OscConfig+0x8ac>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3730      	adds	r7, #48	@ 0x30
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	58024400 	.word	0x58024400
 8003028:	ffff0007 	.word	0xffff0007

0800302c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e19c      	b.n	800337a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003040:	4b8a      	ldr	r3, [pc, #552]	@ (800326c <HAL_RCC_ClockConfig+0x240>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 030f 	and.w	r3, r3, #15
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d910      	bls.n	8003070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304e:	4b87      	ldr	r3, [pc, #540]	@ (800326c <HAL_RCC_ClockConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 020f 	bic.w	r2, r3, #15
 8003056:	4985      	ldr	r1, [pc, #532]	@ (800326c <HAL_RCC_ClockConfig+0x240>)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800305e:	4b83      	ldr	r3, [pc, #524]	@ (800326c <HAL_RCC_ClockConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	429a      	cmp	r2, r3
 800306a:	d001      	beq.n	8003070 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e184      	b.n	800337a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d010      	beq.n	800309e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	4b7b      	ldr	r3, [pc, #492]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003088:	429a      	cmp	r2, r3
 800308a:	d908      	bls.n	800309e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800308c:	4b78      	ldr	r3, [pc, #480]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	4975      	ldr	r1, [pc, #468]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 800309a:	4313      	orrs	r3, r2
 800309c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d010      	beq.n	80030cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	4b70      	ldr	r3, [pc, #448]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d908      	bls.n	80030cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	496a      	ldr	r1, [pc, #424]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d010      	beq.n	80030fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699a      	ldr	r2, [r3, #24]
 80030dc:	4b64      	ldr	r3, [pc, #400]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d908      	bls.n	80030fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030e8:	4b61      	ldr	r3, [pc, #388]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	495e      	ldr	r1, [pc, #376]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d010      	beq.n	8003128 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69da      	ldr	r2, [r3, #28]
 800310a:	4b59      	ldr	r3, [pc, #356]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003112:	429a      	cmp	r2, r3
 8003114:	d908      	bls.n	8003128 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003116:	4b56      	ldr	r3, [pc, #344]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4953      	ldr	r1, [pc, #332]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 8003124:	4313      	orrs	r3, r2
 8003126:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d010      	beq.n	8003156 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	4b4d      	ldr	r3, [pc, #308]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	429a      	cmp	r2, r3
 8003142:	d908      	bls.n	8003156 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003144:	4b4a      	ldr	r3, [pc, #296]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f023 020f 	bic.w	r2, r3, #15
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4947      	ldr	r1, [pc, #284]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 8003152:	4313      	orrs	r3, r2
 8003154:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d055      	beq.n	800320e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003162:	4b43      	ldr	r3, [pc, #268]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	4940      	ldr	r1, [pc, #256]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 8003170:	4313      	orrs	r3, r2
 8003172:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d107      	bne.n	800318c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800317c:	4b3c      	ldr	r3, [pc, #240]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d121      	bne.n	80031cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0f6      	b.n	800337a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b03      	cmp	r3, #3
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003194:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d115      	bne.n	80031cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e0ea      	b.n	800337a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d107      	bne.n	80031bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031ac:	4b30      	ldr	r3, [pc, #192]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d109      	bne.n	80031cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0de      	b.n	800337a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0d6      	b.n	800337a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031cc:	4b28      	ldr	r3, [pc, #160]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	f023 0207 	bic.w	r2, r3, #7
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4925      	ldr	r1, [pc, #148]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031de:	f7fe f9b7 	bl	8001550 <HAL_GetTick>
 80031e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e6:	f7fe f9b3 	bl	8001550 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e0be      	b.n	800337a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	429a      	cmp	r2, r3
 800320c:	d1eb      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d010      	beq.n	800323c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	4b14      	ldr	r3, [pc, #80]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	429a      	cmp	r2, r3
 8003228:	d208      	bcs.n	800323c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322a:	4b11      	ldr	r3, [pc, #68]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f023 020f 	bic.w	r2, r3, #15
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	490e      	ldr	r1, [pc, #56]	@ (8003270 <HAL_RCC_ClockConfig+0x244>)
 8003238:	4313      	orrs	r3, r2
 800323a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800323c:	4b0b      	ldr	r3, [pc, #44]	@ (800326c <HAL_RCC_ClockConfig+0x240>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d214      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b08      	ldr	r3, [pc, #32]	@ (800326c <HAL_RCC_ClockConfig+0x240>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 020f 	bic.w	r2, r3, #15
 8003252:	4906      	ldr	r1, [pc, #24]	@ (800326c <HAL_RCC_ClockConfig+0x240>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b04      	ldr	r3, [pc, #16]	@ (800326c <HAL_RCC_ClockConfig+0x240>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d005      	beq.n	8003274 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e086      	b.n	800337a <HAL_RCC_ClockConfig+0x34e>
 800326c:	52002000 	.word	0x52002000
 8003270:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d010      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	4b3f      	ldr	r3, [pc, #252]	@ (8003384 <HAL_RCC_ClockConfig+0x358>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800328c:	429a      	cmp	r2, r3
 800328e:	d208      	bcs.n	80032a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003290:	4b3c      	ldr	r3, [pc, #240]	@ (8003384 <HAL_RCC_ClockConfig+0x358>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	4939      	ldr	r1, [pc, #228]	@ (8003384 <HAL_RCC_ClockConfig+0x358>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d010      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	4b34      	ldr	r3, [pc, #208]	@ (8003384 <HAL_RCC_ClockConfig+0x358>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d208      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032be:	4b31      	ldr	r3, [pc, #196]	@ (8003384 <HAL_RCC_ClockConfig+0x358>)
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	492e      	ldr	r1, [pc, #184]	@ (8003384 <HAL_RCC_ClockConfig+0x358>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d010      	beq.n	80032fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699a      	ldr	r2, [r3, #24]
 80032e0:	4b28      	ldr	r3, [pc, #160]	@ (8003384 <HAL_RCC_ClockConfig+0x358>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d208      	bcs.n	80032fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032ec:	4b25      	ldr	r3, [pc, #148]	@ (8003384 <HAL_RCC_ClockConfig+0x358>)
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	4922      	ldr	r1, [pc, #136]	@ (8003384 <HAL_RCC_ClockConfig+0x358>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b00      	cmp	r3, #0
 8003308:	d010      	beq.n	800332c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69da      	ldr	r2, [r3, #28]
 800330e:	4b1d      	ldr	r3, [pc, #116]	@ (8003384 <HAL_RCC_ClockConfig+0x358>)
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003316:	429a      	cmp	r2, r3
 8003318:	d208      	bcs.n	800332c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800331a:	4b1a      	ldr	r3, [pc, #104]	@ (8003384 <HAL_RCC_ClockConfig+0x358>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	4917      	ldr	r1, [pc, #92]	@ (8003384 <HAL_RCC_ClockConfig+0x358>)
 8003328:	4313      	orrs	r3, r2
 800332a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800332c:	f000 f834 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003330:	4602      	mov	r2, r0
 8003332:	4b14      	ldr	r3, [pc, #80]	@ (8003384 <HAL_RCC_ClockConfig+0x358>)
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	4912      	ldr	r1, [pc, #72]	@ (8003388 <HAL_RCC_ClockConfig+0x35c>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
 8003348:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800334a:	4b0e      	ldr	r3, [pc, #56]	@ (8003384 <HAL_RCC_ClockConfig+0x358>)
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	4a0d      	ldr	r2, [pc, #52]	@ (8003388 <HAL_RCC_ClockConfig+0x35c>)
 8003354:	5cd3      	ldrb	r3, [r2, r3]
 8003356:	f003 031f 	and.w	r3, r3, #31
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
 8003360:	4a0a      	ldr	r2, [pc, #40]	@ (800338c <HAL_RCC_ClockConfig+0x360>)
 8003362:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003364:	4a0a      	ldr	r2, [pc, #40]	@ (8003390 <HAL_RCC_ClockConfig+0x364>)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800336a:	4b0a      	ldr	r3, [pc, #40]	@ (8003394 <HAL_RCC_ClockConfig+0x368>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd ff5c 	bl	800122c <HAL_InitTick>
 8003374:	4603      	mov	r3, r0
 8003376:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003378:	7bfb      	ldrb	r3, [r7, #15]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	58024400 	.word	0x58024400
 8003388:	0800b4bc 	.word	0x0800b4bc
 800338c:	24000004 	.word	0x24000004
 8003390:	24000000 	.word	0x24000000
 8003394:	24000008 	.word	0x24000008

08003398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	@ 0x24
 800339c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800339e:	4bb3      	ldr	r3, [pc, #716]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033a6:	2b18      	cmp	r3, #24
 80033a8:	f200 8155 	bhi.w	8003656 <HAL_RCC_GetSysClockFreq+0x2be>
 80033ac:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	08003419 	.word	0x08003419
 80033b8:	08003657 	.word	0x08003657
 80033bc:	08003657 	.word	0x08003657
 80033c0:	08003657 	.word	0x08003657
 80033c4:	08003657 	.word	0x08003657
 80033c8:	08003657 	.word	0x08003657
 80033cc:	08003657 	.word	0x08003657
 80033d0:	08003657 	.word	0x08003657
 80033d4:	0800343f 	.word	0x0800343f
 80033d8:	08003657 	.word	0x08003657
 80033dc:	08003657 	.word	0x08003657
 80033e0:	08003657 	.word	0x08003657
 80033e4:	08003657 	.word	0x08003657
 80033e8:	08003657 	.word	0x08003657
 80033ec:	08003657 	.word	0x08003657
 80033f0:	08003657 	.word	0x08003657
 80033f4:	08003445 	.word	0x08003445
 80033f8:	08003657 	.word	0x08003657
 80033fc:	08003657 	.word	0x08003657
 8003400:	08003657 	.word	0x08003657
 8003404:	08003657 	.word	0x08003657
 8003408:	08003657 	.word	0x08003657
 800340c:	08003657 	.word	0x08003657
 8003410:	08003657 	.word	0x08003657
 8003414:	0800344b 	.word	0x0800344b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003418:	4b94      	ldr	r3, [pc, #592]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b00      	cmp	r3, #0
 8003422:	d009      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003424:	4b91      	ldr	r3, [pc, #580]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	08db      	lsrs	r3, r3, #3
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	4a90      	ldr	r2, [pc, #576]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003430:	fa22 f303 	lsr.w	r3, r2, r3
 8003434:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003436:	e111      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003438:	4b8d      	ldr	r3, [pc, #564]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800343a:	61bb      	str	r3, [r7, #24]
      break;
 800343c:	e10e      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800343e:	4b8d      	ldr	r3, [pc, #564]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003440:	61bb      	str	r3, [r7, #24]
      break;
 8003442:	e10b      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003444:	4b8c      	ldr	r3, [pc, #560]	@ (8003678 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003446:	61bb      	str	r3, [r7, #24]
      break;
 8003448:	e108      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800344a:	4b88      	ldr	r3, [pc, #544]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800344c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003454:	4b85      	ldr	r3, [pc, #532]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003458:	091b      	lsrs	r3, r3, #4
 800345a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800345e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003460:	4b82      	ldr	r3, [pc, #520]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800346a:	4b80      	ldr	r3, [pc, #512]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800346c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346e:	08db      	lsrs	r3, r3, #3
 8003470:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003482:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80e1 	beq.w	8003650 <HAL_RCC_GetSysClockFreq+0x2b8>
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b02      	cmp	r3, #2
 8003492:	f000 8083 	beq.w	800359c <HAL_RCC_GetSysClockFreq+0x204>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b02      	cmp	r3, #2
 800349a:	f200 80a1 	bhi.w	80035e0 <HAL_RCC_GetSysClockFreq+0x248>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x114>
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d056      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x1c0>
 80034aa:	e099      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034ac:	4b6f      	ldr	r3, [pc, #444]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d02d      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80034b8:	4b6c      	ldr	r3, [pc, #432]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	08db      	lsrs	r3, r3, #3
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	4a6b      	ldr	r2, [pc, #428]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
 80034c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	ee07 3a90 	vmov	s15, r3
 80034da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034e2:	4b62      	ldr	r3, [pc, #392]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800367c <HAL_RCC_GetSysClockFreq+0x2e4>
 80034fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800350a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800350e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003512:	e087      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	ee07 3a90 	vmov	s15, r3
 800351a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800351e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003680 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003526:	4b51      	ldr	r3, [pc, #324]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003536:	ed97 6a02 	vldr	s12, [r7, #8]
 800353a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800367c <HAL_RCC_GetSysClockFreq+0x2e4>
 800353e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003546:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800354a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800354e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003552:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003556:	e065      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	ee07 3a90 	vmov	s15, r3
 800355e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003562:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003684 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800356a:	4b40      	ldr	r3, [pc, #256]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800357a:	ed97 6a02 	vldr	s12, [r7, #8]
 800357e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800367c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800358a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800358e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003596:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800359a:	e043      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	ee07 3a90 	vmov	s15, r3
 80035a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003688 <HAL_RCC_GetSysClockFreq+0x2f0>
 80035aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ae:	4b2f      	ldr	r3, [pc, #188]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035be:	ed97 6a02 	vldr	s12, [r7, #8]
 80035c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800367c <HAL_RCC_GetSysClockFreq+0x2e4>
 80035c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80035d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80035de:	e021      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	ee07 3a90 	vmov	s15, r3
 80035e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003684 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f2:	4b1e      	ldr	r3, [pc, #120]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fa:	ee07 3a90 	vmov	s15, r3
 80035fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003602:	ed97 6a02 	vldr	s12, [r7, #8]
 8003606:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800367c <HAL_RCC_GetSysClockFreq+0x2e4>
 800360a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800360e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003612:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800361a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800361e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003622:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003624:	4b11      	ldr	r3, [pc, #68]	@ (800366c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003628:	0a5b      	lsrs	r3, r3, #9
 800362a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800362e:	3301      	adds	r3, #1
 8003630:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	ee07 3a90 	vmov	s15, r3
 8003638:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800363c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003648:	ee17 3a90 	vmov	r3, s15
 800364c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800364e:	e005      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	61bb      	str	r3, [r7, #24]
      break;
 8003654:	e002      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003656:	4b07      	ldr	r3, [pc, #28]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003658:	61bb      	str	r3, [r7, #24]
      break;
 800365a:	bf00      	nop
  }

  return sysclockfreq;
 800365c:	69bb      	ldr	r3, [r7, #24]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3724      	adds	r7, #36	@ 0x24
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	58024400 	.word	0x58024400
 8003670:	03d09000 	.word	0x03d09000
 8003674:	003d0900 	.word	0x003d0900
 8003678:	017d7840 	.word	0x017d7840
 800367c:	46000000 	.word	0x46000000
 8003680:	4c742400 	.word	0x4c742400
 8003684:	4a742400 	.word	0x4a742400
 8003688:	4bbebc20 	.word	0x4bbebc20

0800368c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003692:	f7ff fe81 	bl	8003398 <HAL_RCC_GetSysClockFreq>
 8003696:	4602      	mov	r2, r0
 8003698:	4b10      	ldr	r3, [pc, #64]	@ (80036dc <HAL_RCC_GetHCLKFreq+0x50>)
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	490f      	ldr	r1, [pc, #60]	@ (80036e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80036a4:	5ccb      	ldrb	r3, [r1, r3]
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	fa22 f303 	lsr.w	r3, r2, r3
 80036ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036b0:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <HAL_RCC_GetHCLKFreq+0x50>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	4a09      	ldr	r2, [pc, #36]	@ (80036e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80036ba:	5cd3      	ldrb	r3, [r2, r3]
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	fa22 f303 	lsr.w	r3, r2, r3
 80036c6:	4a07      	ldr	r2, [pc, #28]	@ (80036e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80036c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036ca:	4a07      	ldr	r2, [pc, #28]	@ (80036e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80036d0:	4b04      	ldr	r3, [pc, #16]	@ (80036e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80036d2:	681b      	ldr	r3, [r3, #0]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	58024400 	.word	0x58024400
 80036e0:	0800b4bc 	.word	0x0800b4bc
 80036e4:	24000004 	.word	0x24000004
 80036e8:	24000000 	.word	0x24000000

080036ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036f0:	f7ff ffcc 	bl	800368c <HAL_RCC_GetHCLKFreq>
 80036f4:	4602      	mov	r2, r0
 80036f6:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	f003 0307 	and.w	r3, r3, #7
 8003700:	4904      	ldr	r1, [pc, #16]	@ (8003714 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003702:	5ccb      	ldrb	r3, [r1, r3]
 8003704:	f003 031f 	and.w	r3, r3, #31
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800370c:	4618      	mov	r0, r3
 800370e:	bd80      	pop	{r7, pc}
 8003710:	58024400 	.word	0x58024400
 8003714:	0800b4bc 	.word	0x0800b4bc

08003718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800371c:	f7ff ffb6 	bl	800368c <HAL_RCC_GetHCLKFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	0a1b      	lsrs	r3, r3, #8
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4904      	ldr	r1, [pc, #16]	@ (8003740 <HAL_RCC_GetPCLK2Freq+0x28>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	58024400 	.word	0x58024400
 8003740:	0800b4bc 	.word	0x0800b4bc

08003744 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	223f      	movs	r2, #63	@ 0x3f
 8003752:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003754:	4b1a      	ldr	r3, [pc, #104]	@ (80037c0 <HAL_RCC_GetClockConfig+0x7c>)
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f003 0207 	and.w	r2, r3, #7
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003760:	4b17      	ldr	r3, [pc, #92]	@ (80037c0 <HAL_RCC_GetClockConfig+0x7c>)
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800376c:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <HAL_RCC_GetClockConfig+0x7c>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 020f 	and.w	r2, r3, #15
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003778:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <HAL_RCC_GetClockConfig+0x7c>)
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003784:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <HAL_RCC_GetClockConfig+0x7c>)
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003790:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <HAL_RCC_GetClockConfig+0x7c>)
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800379c:	4b08      	ldr	r3, [pc, #32]	@ (80037c0 <HAL_RCC_GetClockConfig+0x7c>)
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037a8:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <HAL_RCC_GetClockConfig+0x80>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 020f 	and.w	r2, r3, #15
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	601a      	str	r2, [r3, #0]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	58024400 	.word	0x58024400
 80037c4:	52002000 	.word	0x52002000

080037c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037cc:	b0ca      	sub	sp, #296	@ 0x128
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037d4:	2300      	movs	r3, #0
 80037d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037da:	2300      	movs	r3, #0
 80037dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80037ec:	2500      	movs	r5, #0
 80037ee:	ea54 0305 	orrs.w	r3, r4, r5
 80037f2:	d049      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80037fe:	d02f      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003800:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003804:	d828      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003806:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800380a:	d01a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800380c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003810:	d822      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800381a:	d007      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800381c:	e01c      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800381e:	4bb8      	ldr	r3, [pc, #736]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003822:	4ab7      	ldr	r2, [pc, #732]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003828:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800382a:	e01a      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800382c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003830:	3308      	adds	r3, #8
 8003832:	2102      	movs	r1, #2
 8003834:	4618      	mov	r0, r3
 8003836:	f001 fc8f 	bl	8005158 <RCCEx_PLL2_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003840:	e00f      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003846:	3328      	adds	r3, #40	@ 0x28
 8003848:	2102      	movs	r1, #2
 800384a:	4618      	mov	r0, r3
 800384c:	f001 fd36 	bl	80052bc <RCCEx_PLL3_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003856:	e004      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800385e:	e000      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800386a:	4ba5      	ldr	r3, [pc, #660]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800386c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003876:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003878:	4aa1      	ldr	r2, [pc, #644]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800387a:	430b      	orrs	r3, r1
 800387c:	6513      	str	r3, [r2, #80]	@ 0x50
 800387e:	e003      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003894:	f04f 0900 	mov.w	r9, #0
 8003898:	ea58 0309 	orrs.w	r3, r8, r9
 800389c:	d047      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800389e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d82a      	bhi.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x136>
 80038a8:	a201      	add	r2, pc, #4	@ (adr r2, 80038b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	080038c5 	.word	0x080038c5
 80038b4:	080038d3 	.word	0x080038d3
 80038b8:	080038e9 	.word	0x080038e9
 80038bc:	08003907 	.word	0x08003907
 80038c0:	08003907 	.word	0x08003907
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c4:	4b8e      	ldr	r3, [pc, #568]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c8:	4a8d      	ldr	r2, [pc, #564]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038d0:	e01a      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d6:	3308      	adds	r3, #8
 80038d8:	2100      	movs	r1, #0
 80038da:	4618      	mov	r0, r3
 80038dc:	f001 fc3c 	bl	8005158 <RCCEx_PLL2_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038e6:	e00f      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ec:	3328      	adds	r3, #40	@ 0x28
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f001 fce3 	bl	80052bc <RCCEx_PLL3_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038fc:	e004      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003904:	e000      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003910:	4b7b      	ldr	r3, [pc, #492]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003914:	f023 0107 	bic.w	r1, r3, #7
 8003918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391e:	4a78      	ldr	r2, [pc, #480]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003920:	430b      	orrs	r3, r1
 8003922:	6513      	str	r3, [r2, #80]	@ 0x50
 8003924:	e003      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800392a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800393a:	f04f 0b00 	mov.w	fp, #0
 800393e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003942:	d04c      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800394e:	d030      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003950:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003954:	d829      	bhi.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003956:	2bc0      	cmp	r3, #192	@ 0xc0
 8003958:	d02d      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800395a:	2bc0      	cmp	r3, #192	@ 0xc0
 800395c:	d825      	bhi.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800395e:	2b80      	cmp	r3, #128	@ 0x80
 8003960:	d018      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003962:	2b80      	cmp	r3, #128	@ 0x80
 8003964:	d821      	bhi.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800396a:	2b40      	cmp	r3, #64	@ 0x40
 800396c:	d007      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800396e:	e01c      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003970:	4b63      	ldr	r3, [pc, #396]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003974:	4a62      	ldr	r2, [pc, #392]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800397a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800397c:	e01c      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003982:	3308      	adds	r3, #8
 8003984:	2100      	movs	r1, #0
 8003986:	4618      	mov	r0, r3
 8003988:	f001 fbe6 	bl	8005158 <RCCEx_PLL2_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003992:	e011      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003998:	3328      	adds	r3, #40	@ 0x28
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f001 fc8d 	bl	80052bc <RCCEx_PLL3_Config>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80039a8:	e006      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039b0:	e002      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80039b2:	bf00      	nop
 80039b4:	e000      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80039b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10a      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80039c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80039c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ce:	4a4c      	ldr	r2, [pc, #304]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039d0:	430b      	orrs	r3, r1
 80039d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80039d4:	e003      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80039ea:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80039f4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80039f8:	460b      	mov	r3, r1
 80039fa:	4313      	orrs	r3, r2
 80039fc:	d053      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a02:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a0a:	d035      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003a0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a10:	d82e      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a12:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a16:	d031      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003a18:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003a1c:	d828      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a22:	d01a      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003a24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a28:	d822      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003a2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a32:	d007      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003a34:	e01c      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a36:	4b32      	ldr	r3, [pc, #200]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3a:	4a31      	ldr	r2, [pc, #196]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a42:	e01c      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a48:	3308      	adds	r3, #8
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f001 fb83 	bl	8005158 <RCCEx_PLL2_Config>
 8003a52:	4603      	mov	r3, r0
 8003a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a58:	e011      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5e:	3328      	adds	r3, #40	@ 0x28
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f001 fc2a 	bl	80052bc <RCCEx_PLL3_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a6e:	e006      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a76:	e002      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a78:	bf00      	nop
 8003a7a:	e000      	b.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10b      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a86:	4b1e      	ldr	r3, [pc, #120]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a96:	4a1a      	ldr	r2, [pc, #104]	@ (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a9c:	e003      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003ab2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003abc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	d056      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ace:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ad2:	d038      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003ad4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ad8:	d831      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ada:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ade:	d034      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ae0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ae4:	d82b      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ae6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003aea:	d01d      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003aec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003af0:	d825      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003af6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003afa:	d00a      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003afc:	e01f      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003afe:	bf00      	nop
 8003b00:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b04:	4ba2      	ldr	r3, [pc, #648]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b08:	4aa1      	ldr	r2, [pc, #644]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b10:	e01c      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b16:	3308      	adds	r3, #8
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 fb1c 	bl	8005158 <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003b26:	e011      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2c:	3328      	adds	r3, #40	@ 0x28
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 fbc3 	bl	80052bc <RCCEx_PLL3_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003b3c:	e006      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b44:	e002      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10b      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003b54:	4b8e      	ldr	r3, [pc, #568]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b58:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b64:	4a8a      	ldr	r2, [pc, #552]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b66:	430b      	orrs	r3, r1
 8003b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b6a:	e003      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003b80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003b84:	2300      	movs	r3, #0
 8003b86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003b8a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4313      	orrs	r3, r2
 8003b92:	d03a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9a:	2b30      	cmp	r3, #48	@ 0x30
 8003b9c:	d01f      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b9e:	2b30      	cmp	r3, #48	@ 0x30
 8003ba0:	d819      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d00c      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d815      	bhi.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d019      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003bae:	2b10      	cmp	r3, #16
 8003bb0:	d111      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb2:	4b77      	ldr	r3, [pc, #476]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb6:	4a76      	ldr	r2, [pc, #472]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003bbe:	e011      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f001 fac5 	bl	8005158 <RCCEx_PLL2_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003bd4:	e006      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bdc:	e002      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10a      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bec:	4b68      	ldr	r3, [pc, #416]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bf0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfa:	4a65      	ldr	r2, [pc, #404]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c00:	e003      	b.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c12:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003c16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003c20:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4313      	orrs	r3, r2
 8003c28:	d051      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c34:	d035      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003c36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c3a:	d82e      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c40:	d031      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003c42:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c46:	d828      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c4c:	d01a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003c4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c52:	d822      	bhi.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c5c:	d007      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003c5e:	e01c      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c60:	4b4b      	ldr	r3, [pc, #300]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c64:	4a4a      	ldr	r2, [pc, #296]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c6c:	e01c      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c72:	3308      	adds	r3, #8
 8003c74:	2100      	movs	r1, #0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 fa6e 	bl	8005158 <RCCEx_PLL2_Config>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c82:	e011      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c88:	3328      	adds	r3, #40	@ 0x28
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f001 fb15 	bl	80052bc <RCCEx_PLL3_Config>
 8003c92:	4603      	mov	r3, r0
 8003c94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003c98:	e006      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ca0:	e002      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ca2:	bf00      	nop
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003ca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003cb0:	4b37      	ldr	r3, [pc, #220]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cbe:	4a34      	ldr	r2, [pc, #208]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cc4:	e003      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003cda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003ce4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4313      	orrs	r3, r2
 8003cec:	d056      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cf8:	d033      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003cfa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cfe:	d82c      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d04:	d02f      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003d06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d0a:	d826      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d10:	d02b      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003d12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d16:	d820      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d1c:	d012      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003d1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d22:	d81a      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d022      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d2c:	d115      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	3308      	adds	r3, #8
 8003d34:	2101      	movs	r1, #1
 8003d36:	4618      	mov	r0, r3
 8003d38:	f001 fa0e 	bl	8005158 <RCCEx_PLL2_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d42:	e015      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	3328      	adds	r3, #40	@ 0x28
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f001 fab5 	bl	80052bc <RCCEx_PLL3_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003d58:	e00a      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d60:	e006      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d62:	bf00      	nop
 8003d64:	e004      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d66:	bf00      	nop
 8003d68:	e002      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d6a:	bf00      	nop
 8003d6c:	e000      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003d6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10d      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003d78:	4b05      	ldr	r3, [pc, #20]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d86:	4a02      	ldr	r2, [pc, #8]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d8c:	e006      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003d8e:	bf00      	nop
 8003d90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003da8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003db2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4313      	orrs	r3, r2
 8003dba:	d055      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dc8:	d033      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dce:	d82c      	bhi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd4:	d02f      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dda:	d826      	bhi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ddc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003de0:	d02b      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003de2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003de6:	d820      	bhi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003de8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dec:	d012      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003df2:	d81a      	bhi.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d022      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003df8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dfc:	d115      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	3308      	adds	r3, #8
 8003e04:	2101      	movs	r1, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 f9a6 	bl	8005158 <RCCEx_PLL2_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e12:	e015      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e18:	3328      	adds	r3, #40	@ 0x28
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f001 fa4d 	bl	80052bc <RCCEx_PLL3_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003e28:	e00a      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e30:	e006      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e32:	bf00      	nop
 8003e34:	e004      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e36:	bf00      	nop
 8003e38:	e002      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e3a:	bf00      	nop
 8003e3c:	e000      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10b      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003e48:	4ba3      	ldr	r3, [pc, #652]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003e58:	4a9f      	ldr	r2, [pc, #636]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e5e:	e003      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003e74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003e7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e82:	460b      	mov	r3, r1
 8003e84:	4313      	orrs	r3, r2
 8003e86:	d037      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e92:	d00e      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e98:	d816      	bhi.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d018      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003e9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ea2:	d111      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea4:	4b8c      	ldr	r3, [pc, #560]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea8:	4a8b      	ldr	r2, [pc, #556]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003eb0:	e00f      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	2101      	movs	r1, #1
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 f94c 	bl	8005158 <RCCEx_PLL2_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003ec6:	e004      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ece:	e000      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003eda:	4b7f      	ldr	r3, [pc, #508]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ede:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee8:	4a7b      	ldr	r2, [pc, #492]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eea:	430b      	orrs	r3, r1
 8003eec:	6513      	str	r3, [r2, #80]	@ 0x50
 8003eee:	e003      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003f04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003f0e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4313      	orrs	r3, r2
 8003f16:	d039      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f1e:	2b03      	cmp	r3, #3
 8003f20:	d81c      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003f22:	a201      	add	r2, pc, #4	@ (adr r2, 8003f28 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f65 	.word	0x08003f65
 8003f2c:	08003f39 	.word	0x08003f39
 8003f30:	08003f47 	.word	0x08003f47
 8003f34:	08003f65 	.word	0x08003f65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f38:	4b67      	ldr	r3, [pc, #412]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3c:	4a66      	ldr	r2, [pc, #408]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f44:	e00f      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f001 f902 	bl	8005158 <RCCEx_PLL2_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003f5a:	e004      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f62:	e000      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003f6e:	4b5a      	ldr	r3, [pc, #360]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f72:	f023 0103 	bic.w	r1, r3, #3
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7c:	4a56      	ldr	r2, [pc, #344]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f7e:	430b      	orrs	r3, r1
 8003f80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f82:	e003      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f94:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003f98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003fa2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f000 809f 	beq.w	80040ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fae:	4b4b      	ldr	r3, [pc, #300]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a4a      	ldr	r2, [pc, #296]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fba:	f7fd fac9 	bl	8001550 <HAL_GetTick>
 8003fbe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc2:	e00b      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc4:	f7fd fac4 	bl	8001550 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b64      	cmp	r3, #100	@ 0x64
 8003fd2:	d903      	bls.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fda:	e005      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80040dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d0ed      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d179      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ff0:	4b39      	ldr	r3, [pc, #228]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ffc:	4053      	eors	r3, r2
 8003ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004002:	2b00      	cmp	r3, #0
 8004004:	d015      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004006:	4b34      	ldr	r3, [pc, #208]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800400e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004012:	4b31      	ldr	r3, [pc, #196]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004016:	4a30      	ldr	r2, [pc, #192]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800401c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800401e:	4b2e      	ldr	r3, [pc, #184]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004022:	4a2d      	ldr	r2, [pc, #180]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004024:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004028:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800402a:	4a2b      	ldr	r2, [pc, #172]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800402c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004030:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004036:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800403a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800403e:	d118      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fd fa86 	bl	8001550 <HAL_GetTick>
 8004044:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004048:	e00d      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fd fa81 	bl	8001550 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004054:	1ad2      	subs	r2, r2, r3
 8004056:	f241 3388 	movw	r3, #5000	@ 0x1388
 800405a:	429a      	cmp	r2, r3
 800405c:	d903      	bls.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004064:	e005      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004066:	4b1c      	ldr	r3, [pc, #112]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0eb      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004076:	2b00      	cmp	r3, #0
 8004078:	d129      	bne.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004082:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004086:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800408a:	d10e      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800408c:	4b12      	ldr	r3, [pc, #72]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004098:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800409c:	091a      	lsrs	r2, r3, #4
 800409e:	4b10      	ldr	r3, [pc, #64]	@ (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	4a0d      	ldr	r2, [pc, #52]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6113      	str	r3, [r2, #16]
 80040a8:	e005      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80040aa:	4b0b      	ldr	r3, [pc, #44]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	4a0a      	ldr	r2, [pc, #40]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80040b4:	6113      	str	r3, [r2, #16]
 80040b6:	4b08      	ldr	r3, [pc, #32]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040b8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80040c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c6:	4a04      	ldr	r2, [pc, #16]	@ (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80040cc:	e00e      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80040d6:	e009      	b.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 80040d8:	58024400 	.word	0x58024400
 80040dc:	58024800 	.word	0x58024800
 80040e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80040ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f4:	f002 0301 	and.w	r3, r2, #1
 80040f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004102:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004106:	460b      	mov	r3, r1
 8004108:	4313      	orrs	r3, r2
 800410a:	f000 8089 	beq.w	8004220 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800410e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004112:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004114:	2b28      	cmp	r3, #40	@ 0x28
 8004116:	d86b      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004118:	a201      	add	r2, pc, #4	@ (adr r2, 8004120 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800411a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411e:	bf00      	nop
 8004120:	080041f9 	.word	0x080041f9
 8004124:	080041f1 	.word	0x080041f1
 8004128:	080041f1 	.word	0x080041f1
 800412c:	080041f1 	.word	0x080041f1
 8004130:	080041f1 	.word	0x080041f1
 8004134:	080041f1 	.word	0x080041f1
 8004138:	080041f1 	.word	0x080041f1
 800413c:	080041f1 	.word	0x080041f1
 8004140:	080041c5 	.word	0x080041c5
 8004144:	080041f1 	.word	0x080041f1
 8004148:	080041f1 	.word	0x080041f1
 800414c:	080041f1 	.word	0x080041f1
 8004150:	080041f1 	.word	0x080041f1
 8004154:	080041f1 	.word	0x080041f1
 8004158:	080041f1 	.word	0x080041f1
 800415c:	080041f1 	.word	0x080041f1
 8004160:	080041db 	.word	0x080041db
 8004164:	080041f1 	.word	0x080041f1
 8004168:	080041f1 	.word	0x080041f1
 800416c:	080041f1 	.word	0x080041f1
 8004170:	080041f1 	.word	0x080041f1
 8004174:	080041f1 	.word	0x080041f1
 8004178:	080041f1 	.word	0x080041f1
 800417c:	080041f1 	.word	0x080041f1
 8004180:	080041f9 	.word	0x080041f9
 8004184:	080041f1 	.word	0x080041f1
 8004188:	080041f1 	.word	0x080041f1
 800418c:	080041f1 	.word	0x080041f1
 8004190:	080041f1 	.word	0x080041f1
 8004194:	080041f1 	.word	0x080041f1
 8004198:	080041f1 	.word	0x080041f1
 800419c:	080041f1 	.word	0x080041f1
 80041a0:	080041f9 	.word	0x080041f9
 80041a4:	080041f1 	.word	0x080041f1
 80041a8:	080041f1 	.word	0x080041f1
 80041ac:	080041f1 	.word	0x080041f1
 80041b0:	080041f1 	.word	0x080041f1
 80041b4:	080041f1 	.word	0x080041f1
 80041b8:	080041f1 	.word	0x080041f1
 80041bc:	080041f1 	.word	0x080041f1
 80041c0:	080041f9 	.word	0x080041f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c8:	3308      	adds	r3, #8
 80041ca:	2101      	movs	r1, #1
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 ffc3 	bl	8005158 <RCCEx_PLL2_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041d8:	e00f      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041de:	3328      	adds	r3, #40	@ 0x28
 80041e0:	2101      	movs	r1, #1
 80041e2:	4618      	mov	r0, r3
 80041e4:	f001 f86a 	bl	80052bc <RCCEx_PLL3_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80041ee:	e004      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041f6:	e000      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80041f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004202:	4bbf      	ldr	r3, [pc, #764]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004206:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004210:	4abb      	ldr	r2, [pc, #748]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004212:	430b      	orrs	r3, r1
 8004214:	6553      	str	r3, [r2, #84]	@ 0x54
 8004216:	e003      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800421c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f002 0302 	and.w	r3, r2, #2
 800422c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004230:	2300      	movs	r3, #0
 8004232:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004236:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800423a:	460b      	mov	r3, r1
 800423c:	4313      	orrs	r3, r2
 800423e:	d041      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004244:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004246:	2b05      	cmp	r3, #5
 8004248:	d824      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800424a:	a201      	add	r2, pc, #4	@ (adr r2, 8004250 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800424c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004250:	0800429d 	.word	0x0800429d
 8004254:	08004269 	.word	0x08004269
 8004258:	0800427f 	.word	0x0800427f
 800425c:	0800429d 	.word	0x0800429d
 8004260:	0800429d 	.word	0x0800429d
 8004264:	0800429d 	.word	0x0800429d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426c:	3308      	adds	r3, #8
 800426e:	2101      	movs	r1, #1
 8004270:	4618      	mov	r0, r3
 8004272:	f000 ff71 	bl	8005158 <RCCEx_PLL2_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800427c:	e00f      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004282:	3328      	adds	r3, #40	@ 0x28
 8004284:	2101      	movs	r1, #1
 8004286:	4618      	mov	r0, r3
 8004288:	f001 f818 	bl	80052bc <RCCEx_PLL3_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004292:	e004      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800429a:	e000      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800429c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800429e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80042a6:	4b96      	ldr	r3, [pc, #600]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042aa:	f023 0107 	bic.w	r1, r3, #7
 80042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042b4:	4a92      	ldr	r2, [pc, #584]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042b6:	430b      	orrs	r3, r1
 80042b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80042ba:	e003      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f002 0304 	and.w	r3, r2, #4
 80042d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80042de:	460b      	mov	r3, r1
 80042e0:	4313      	orrs	r3, r2
 80042e2:	d044      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80042e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ec:	2b05      	cmp	r3, #5
 80042ee:	d825      	bhi.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80042f0:	a201      	add	r2, pc, #4	@ (adr r2, 80042f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	08004345 	.word	0x08004345
 80042fc:	08004311 	.word	0x08004311
 8004300:	08004327 	.word	0x08004327
 8004304:	08004345 	.word	0x08004345
 8004308:	08004345 	.word	0x08004345
 800430c:	08004345 	.word	0x08004345
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004314:	3308      	adds	r3, #8
 8004316:	2101      	movs	r1, #1
 8004318:	4618      	mov	r0, r3
 800431a:	f000 ff1d 	bl	8005158 <RCCEx_PLL2_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004324:	e00f      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432a:	3328      	adds	r3, #40	@ 0x28
 800432c:	2101      	movs	r1, #1
 800432e:	4618      	mov	r0, r3
 8004330:	f000 ffc4 	bl	80052bc <RCCEx_PLL3_Config>
 8004334:	4603      	mov	r3, r0
 8004336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800433a:	e004      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004342:	e000      	b.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10b      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800434e:	4b6c      	ldr	r3, [pc, #432]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004352:	f023 0107 	bic.w	r1, r3, #7
 8004356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800435e:	4a68      	ldr	r2, [pc, #416]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004360:	430b      	orrs	r3, r1
 8004362:	6593      	str	r3, [r2, #88]	@ 0x58
 8004364:	e003      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004366:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	f002 0320 	and.w	r3, r2, #32
 800437a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004384:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004388:	460b      	mov	r3, r1
 800438a:	4313      	orrs	r3, r2
 800438c:	d055      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004396:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800439a:	d033      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800439c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043a0:	d82c      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80043a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a6:	d02f      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80043a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ac:	d826      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80043ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043b2:	d02b      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80043b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80043b8:	d820      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80043ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043be:	d012      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80043c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043c4:	d81a      	bhi.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d022      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80043ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ce:	d115      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d4:	3308      	adds	r3, #8
 80043d6:	2100      	movs	r1, #0
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 febd 	bl	8005158 <RCCEx_PLL2_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043e4:	e015      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ea:	3328      	adds	r3, #40	@ 0x28
 80043ec:	2102      	movs	r1, #2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 ff64 	bl	80052bc <RCCEx_PLL3_Config>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80043fa:	e00a      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004402:	e006      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004404:	bf00      	nop
 8004406:	e004      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004408:	bf00      	nop
 800440a:	e002      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800440c:	bf00      	nop
 800440e:	e000      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800441a:	4b39      	ldr	r3, [pc, #228]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800441c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800442a:	4a35      	ldr	r2, [pc, #212]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800442c:	430b      	orrs	r3, r1
 800442e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004430:	e003      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800444a:	2300      	movs	r3, #0
 800444c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004450:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004454:	460b      	mov	r3, r1
 8004456:	4313      	orrs	r3, r2
 8004458:	d058      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004462:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004466:	d033      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004468:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800446c:	d82c      	bhi.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800446e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004472:	d02f      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004478:	d826      	bhi.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800447a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800447e:	d02b      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004480:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004484:	d820      	bhi.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004486:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800448a:	d012      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800448c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004490:	d81a      	bhi.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004492:	2b00      	cmp	r3, #0
 8004494:	d022      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800449a:	d115      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800449c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a0:	3308      	adds	r3, #8
 80044a2:	2100      	movs	r1, #0
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fe57 	bl	8005158 <RCCEx_PLL2_Config>
 80044aa:	4603      	mov	r3, r0
 80044ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044b0:	e015      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b6:	3328      	adds	r3, #40	@ 0x28
 80044b8:	2102      	movs	r1, #2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fefe 	bl	80052bc <RCCEx_PLL3_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80044c6:	e00a      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044ce:	e006      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044d0:	bf00      	nop
 80044d2:	e004      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044d4:	bf00      	nop
 80044d6:	e002      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044d8:	bf00      	nop
 80044da:	e000      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80044dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10e      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044e6:	4b06      	ldr	r3, [pc, #24]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044f6:	4a02      	ldr	r2, [pc, #8]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044f8:	430b      	orrs	r3, r1
 80044fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80044fc:	e006      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80044fe:	bf00      	nop
 8004500:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004508:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004518:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004522:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	d055      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004530:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004534:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004538:	d033      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800453a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800453e:	d82c      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004544:	d02f      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800454a:	d826      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800454c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004550:	d02b      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004552:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004556:	d820      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800455c:	d012      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800455e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004562:	d81a      	bhi.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004564:	2b00      	cmp	r3, #0
 8004566:	d022      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800456c:	d115      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004572:	3308      	adds	r3, #8
 8004574:	2100      	movs	r1, #0
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fdee 	bl	8005158 <RCCEx_PLL2_Config>
 800457c:	4603      	mov	r3, r0
 800457e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004582:	e015      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004588:	3328      	adds	r3, #40	@ 0x28
 800458a:	2102      	movs	r1, #2
 800458c:	4618      	mov	r0, r3
 800458e:	f000 fe95 	bl	80052bc <RCCEx_PLL3_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004598:	e00a      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045a0:	e006      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80045a2:	bf00      	nop
 80045a4:	e004      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80045a6:	bf00      	nop
 80045a8:	e002      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80045aa:	bf00      	nop
 80045ac:	e000      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80045ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10b      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80045b8:	4ba1      	ldr	r3, [pc, #644]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80045c8:	4a9d      	ldr	r2, [pc, #628]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ca:	430b      	orrs	r3, r1
 80045cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80045ce:	e003      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	f002 0308 	and.w	r3, r2, #8
 80045e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80045e8:	2300      	movs	r3, #0
 80045ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80045f2:	460b      	mov	r3, r1
 80045f4:	4313      	orrs	r3, r2
 80045f6:	d01e      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80045f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004604:	d10c      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	3328      	adds	r3, #40	@ 0x28
 800460c:	2102      	movs	r1, #2
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fe54 	bl	80052bc <RCCEx_PLL3_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d002      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004620:	4b87      	ldr	r3, [pc, #540]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004624:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004630:	4a83      	ldr	r2, [pc, #524]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004632:	430b      	orrs	r3, r1
 8004634:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	f002 0310 	and.w	r3, r2, #16
 8004642:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004646:	2300      	movs	r3, #0
 8004648:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800464c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004650:	460b      	mov	r3, r1
 8004652:	4313      	orrs	r3, r2
 8004654:	d01e      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800465e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004662:	d10c      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004668:	3328      	adds	r3, #40	@ 0x28
 800466a:	2102      	movs	r1, #2
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fe25 	bl	80052bc <RCCEx_PLL3_Config>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800467e:	4b70      	ldr	r3, [pc, #448]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004682:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800468e:	4a6c      	ldr	r2, [pc, #432]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004690:	430b      	orrs	r3, r1
 8004692:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80046a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046a4:	2300      	movs	r3, #0
 80046a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80046ae:	460b      	mov	r3, r1
 80046b0:	4313      	orrs	r3, r2
 80046b2:	d03e      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80046b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80046bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046c0:	d022      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80046c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046c6:	d81b      	bhi.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d0:	d00b      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80046d2:	e015      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d8:	3308      	adds	r3, #8
 80046da:	2100      	movs	r1, #0
 80046dc:	4618      	mov	r0, r3
 80046de:	f000 fd3b 	bl	8005158 <RCCEx_PLL2_Config>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046e8:	e00f      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ee:	3328      	adds	r3, #40	@ 0x28
 80046f0:	2102      	movs	r1, #2
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fde2 	bl	80052bc <RCCEx_PLL3_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80046fe:	e004      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004706:	e000      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800470a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004712:	4b4b      	ldr	r3, [pc, #300]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004716:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004722:	4a47      	ldr	r2, [pc, #284]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004724:	430b      	orrs	r3, r1
 8004726:	6593      	str	r3, [r2, #88]	@ 0x58
 8004728:	e003      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800472e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800473e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004740:	2300      	movs	r3, #0
 8004742:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004744:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004748:	460b      	mov	r3, r1
 800474a:	4313      	orrs	r3, r2
 800474c:	d03b      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004756:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800475a:	d01f      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800475c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004760:	d818      	bhi.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004766:	d003      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004768:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800476c:	d007      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800476e:	e011      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004770:	4b33      	ldr	r3, [pc, #204]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004774:	4a32      	ldr	r2, [pc, #200]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004776:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800477a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800477c:	e00f      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800477e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004782:	3328      	adds	r3, #40	@ 0x28
 8004784:	2101      	movs	r1, #1
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fd98 	bl	80052bc <RCCEx_PLL3_Config>
 800478c:	4603      	mov	r3, r0
 800478e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004792:	e004      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800479a:	e000      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800479c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800479e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10b      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80047a6:	4b26      	ldr	r3, [pc, #152]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b6:	4a22      	ldr	r2, [pc, #136]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80047bc:	e003      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ce:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80047d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80047d4:	2300      	movs	r3, #0
 80047d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80047d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80047dc:	460b      	mov	r3, r1
 80047de:	4313      	orrs	r3, r2
 80047e0:	d034      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80047e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80047ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047f0:	d007      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80047f2:	e011      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f4:	4b12      	ldr	r3, [pc, #72]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f8:	4a11      	ldr	r2, [pc, #68]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004800:	e00e      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004806:	3308      	adds	r3, #8
 8004808:	2102      	movs	r1, #2
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fca4 	bl	8005158 <RCCEx_PLL2_Config>
 8004810:	4603      	mov	r3, r0
 8004812:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004816:	e003      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800481e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10d      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004828:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800482a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800482c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004836:	4a02      	ldr	r2, [pc, #8]	@ (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004838:	430b      	orrs	r3, r1
 800483a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800483c:	e006      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800483e:	bf00      	nop
 8004840:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004848:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800484c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004854:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004858:	66bb      	str	r3, [r7, #104]	@ 0x68
 800485a:	2300      	movs	r3, #0
 800485c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800485e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004862:	460b      	mov	r3, r1
 8004864:	4313      	orrs	r3, r2
 8004866:	d00c      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486c:	3328      	adds	r3, #40	@ 0x28
 800486e:	2102      	movs	r1, #2
 8004870:	4618      	mov	r0, r3
 8004872:	f000 fd23 	bl	80052bc <RCCEx_PLL3_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800488e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004890:	2300      	movs	r3, #0
 8004892:	667b      	str	r3, [r7, #100]	@ 0x64
 8004894:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004898:	460b      	mov	r3, r1
 800489a:	4313      	orrs	r3, r2
 800489c:	d038      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800489e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048aa:	d018      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80048ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048b0:	d811      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80048b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048b6:	d014      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80048b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048bc:	d80b      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d011      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80048c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048c6:	d106      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c8:	4bc3      	ldr	r3, [pc, #780]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048cc:	4ac2      	ldr	r2, [pc, #776]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80048d4:	e008      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048dc:	e004      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048de:	bf00      	nop
 80048e0:	e002      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048e2:	bf00      	nop
 80048e4:	e000      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80048e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10b      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048f0:	4bb9      	ldr	r3, [pc, #740]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004900:	4ab5      	ldr	r2, [pc, #724]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004902:	430b      	orrs	r3, r1
 8004904:	6553      	str	r3, [r2, #84]	@ 0x54
 8004906:	e003      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800490c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800491c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800491e:	2300      	movs	r3, #0
 8004920:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004922:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004926:	460b      	mov	r3, r1
 8004928:	4313      	orrs	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800492c:	4baa      	ldr	r3, [pc, #680]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800492e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004930:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800493a:	4aa7      	ldr	r2, [pc, #668]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800493c:	430b      	orrs	r3, r1
 800493e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800494c:	653b      	str	r3, [r7, #80]	@ 0x50
 800494e:	2300      	movs	r3, #0
 8004950:	657b      	str	r3, [r7, #84]	@ 0x54
 8004952:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004956:	460b      	mov	r3, r1
 8004958:	4313      	orrs	r3, r2
 800495a:	d00a      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800495c:	4b9e      	ldr	r3, [pc, #632]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004968:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800496c:	4a9a      	ldr	r2, [pc, #616]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800496e:	430b      	orrs	r3, r1
 8004970:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800497e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004980:	2300      	movs	r3, #0
 8004982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004984:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004988:	460b      	mov	r3, r1
 800498a:	4313      	orrs	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800498e:	4b92      	ldr	r3, [pc, #584]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004992:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800499c:	4a8e      	ldr	r2, [pc, #568]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800499e:	430b      	orrs	r3, r1
 80049a0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80049ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80049b0:	2300      	movs	r3, #0
 80049b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80049b4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80049b8:	460b      	mov	r3, r1
 80049ba:	4313      	orrs	r3, r2
 80049bc:	d00e      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049be:	4b86      	ldr	r3, [pc, #536]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	4a85      	ldr	r2, [pc, #532]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049c8:	6113      	str	r3, [r2, #16]
 80049ca:	4b83      	ldr	r3, [pc, #524]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049cc:	6919      	ldr	r1, [r3, #16]
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80049d6:	4a80      	ldr	r2, [pc, #512]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049d8:	430b      	orrs	r3, r1
 80049da:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80049dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80049e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049ea:	2300      	movs	r3, #0
 80049ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80049f2:	460b      	mov	r3, r1
 80049f4:	4313      	orrs	r3, r2
 80049f6:	d009      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80049f8:	4b77      	ldr	r3, [pc, #476]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80049fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049fc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a06:	4a74      	ldr	r2, [pc, #464]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a08:	430b      	orrs	r3, r1
 8004a0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a1e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004a22:	460b      	mov	r3, r1
 8004a24:	4313      	orrs	r3, r2
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a28:	4b6b      	ldr	r3, [pc, #428]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a38:	4a67      	ldr	r2, [pc, #412]	@ (8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	2100      	movs	r1, #0
 8004a48:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a50:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004a54:	460b      	mov	r3, r1
 8004a56:	4313      	orrs	r3, r2
 8004a58:	d011      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5e:	3308      	adds	r3, #8
 8004a60:	2100      	movs	r1, #0
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fb78 	bl	8005158 <RCCEx_PLL2_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a86:	2100      	movs	r1, #0
 8004a88:	6239      	str	r1, [r7, #32]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a90:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004a94:	460b      	mov	r3, r1
 8004a96:	4313      	orrs	r3, r2
 8004a98:	d011      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fb58 	bl	8005158 <RCCEx_PLL2_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	61b9      	str	r1, [r7, #24]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	d011      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ade:	3308      	adds	r3, #8
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fb38 	bl	8005158 <RCCEx_PLL2_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	2100      	movs	r1, #0
 8004b08:	6139      	str	r1, [r7, #16]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004b14:	460b      	mov	r3, r1
 8004b16:	4313      	orrs	r3, r2
 8004b18:	d011      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1e:	3328      	adds	r3, #40	@ 0x28
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 fbca 	bl	80052bc <RCCEx_PLL3_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	2100      	movs	r1, #0
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	f003 0310 	and.w	r3, r3, #16
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004b54:	460b      	mov	r3, r1
 8004b56:	4313      	orrs	r3, r2
 8004b58:	d011      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5e:	3328      	adds	r3, #40	@ 0x28
 8004b60:	2101      	movs	r1, #1
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 fbaa 	bl	80052bc <RCCEx_PLL3_Config>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b86:	2100      	movs	r1, #0
 8004b88:	6039      	str	r1, [r7, #0]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004b94:	460b      	mov	r3, r1
 8004b96:	4313      	orrs	r3, r2
 8004b98:	d011      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9e:	3328      	adds	r3, #40	@ 0x28
 8004ba0:	2102      	movs	r1, #2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fb8a 	bl	80052bc <RCCEx_PLL3_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004bbe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e000      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bd8:	58024400 	.word	0x58024400

08004bdc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004be0:	f7fe fd54 	bl	800368c <HAL_RCC_GetHCLKFreq>
 8004be4:	4602      	mov	r2, r0
 8004be6:	4b06      	ldr	r3, [pc, #24]	@ (8004c00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	091b      	lsrs	r3, r3, #4
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	4904      	ldr	r1, [pc, #16]	@ (8004c04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004bf2:	5ccb      	ldrb	r3, [r1, r3]
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	58024400 	.word	0x58024400
 8004c04:	0800b4bc 	.word	0x0800b4bc

08004c08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b089      	sub	sp, #36	@ 0x24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c10:	4ba1      	ldr	r3, [pc, #644]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004c1a:	4b9f      	ldr	r3, [pc, #636]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1e:	0b1b      	lsrs	r3, r3, #12
 8004c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004c26:	4b9c      	ldr	r3, [pc, #624]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2a:	091b      	lsrs	r3, r3, #4
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004c32:	4b99      	ldr	r3, [pc, #612]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c36:	08db      	lsrs	r3, r3, #3
 8004c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 8111 	beq.w	8004e78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	f000 8083 	beq.w	8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	f200 80a1 	bhi.w	8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d056      	beq.n	8004d20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004c72:	e099      	b.n	8004da8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c74:	4b88      	ldr	r3, [pc, #544]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d02d      	beq.n	8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c80:	4b85      	ldr	r3, [pc, #532]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	08db      	lsrs	r3, r3, #3
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	4a84      	ldr	r2, [pc, #528]	@ (8004e9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c90:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	ee07 3a90 	vmov	s15, r3
 8004c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004caa:	4b7b      	ldr	r3, [pc, #492]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cda:	e087      	b.n	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cee:	4b6a      	ldr	r3, [pc, #424]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d1e:	e065      	b.n	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d32:	4b59      	ldr	r3, [pc, #356]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d62:	e043      	b.n	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004eac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d76:	4b48      	ldr	r3, [pc, #288]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004da6:	e021      	b.n	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dba:	4b37      	ldr	r3, [pc, #220]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004dec:	4b2a      	ldr	r3, [pc, #168]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df0:	0a5b      	lsrs	r3, r3, #9
 8004df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e12:	ee17 2a90 	vmov	r2, s15
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1e:	0c1b      	lsrs	r3, r3, #16
 8004e20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e24:	ee07 3a90 	vmov	s15, r3
 8004e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e34:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e40:	ee17 2a90 	vmov	r2, s15
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004e48:	4b13      	ldr	r3, [pc, #76]	@ (8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4c:	0e1b      	lsrs	r3, r3, #24
 8004e4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e6e:	ee17 2a90 	vmov	r2, s15
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004e76:	e008      	b.n	8004e8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	609a      	str	r2, [r3, #8]
}
 8004e8a:	bf00      	nop
 8004e8c:	3724      	adds	r7, #36	@ 0x24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	03d09000 	.word	0x03d09000
 8004ea0:	46000000 	.word	0x46000000
 8004ea4:	4c742400 	.word	0x4c742400
 8004ea8:	4a742400 	.word	0x4a742400
 8004eac:	4bbebc20 	.word	0x4bbebc20

08004eb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b089      	sub	sp, #36	@ 0x24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004eb8:	4ba1      	ldr	r3, [pc, #644]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004ec2:	4b9f      	ldr	r3, [pc, #636]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec6:	0d1b      	lsrs	r3, r3, #20
 8004ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ecc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004ece:	4b9c      	ldr	r3, [pc, #624]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004eda:	4b99      	ldr	r3, [pc, #612]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ede:	08db      	lsrs	r3, r3, #3
 8004ee0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8111 	beq.w	8005120 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	f000 8083 	beq.w	800500c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	f200 80a1 	bhi.w	8005050 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d056      	beq.n	8004fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004f1a:	e099      	b.n	8005050 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f1c:	4b88      	ldr	r3, [pc, #544]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0320 	and.w	r3, r3, #32
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d02d      	beq.n	8004f84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f28:	4b85      	ldr	r3, [pc, #532]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	08db      	lsrs	r3, r3, #3
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	4a84      	ldr	r2, [pc, #528]	@ (8005144 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004f34:	fa22 f303 	lsr.w	r3, r2, r3
 8004f38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	ee07 3a90 	vmov	s15, r3
 8004f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	ee07 3a90 	vmov	s15, r3
 8004f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f52:	4b7b      	ldr	r3, [pc, #492]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004f82:	e087      	b.n	8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	ee07 3a90 	vmov	s15, r3
 8004f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800514c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f96:	4b6a      	ldr	r3, [pc, #424]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004faa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fc6:	e065      	b.n	8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	ee07 3a90 	vmov	s15, r3
 8004fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005150 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fda:	4b59      	ldr	r3, [pc, #356]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe2:	ee07 3a90 	vmov	s15, r3
 8004fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800500a:	e043      	b.n	8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005016:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005154 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800501a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800501e:	4b48      	ldr	r3, [pc, #288]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005026:	ee07 3a90 	vmov	s15, r3
 800502a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800502e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005032:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800503e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800504e:	e021      	b.n	8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	ee07 3a90 	vmov	s15, r3
 8005056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005150 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800505e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005062:	4b37      	ldr	r3, [pc, #220]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005072:	ed97 6a03 	vldr	s12, [r7, #12]
 8005076:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005148 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800507a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800507e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005082:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800508e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005092:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005094:	4b2a      	ldr	r3, [pc, #168]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005098:	0a5b      	lsrs	r3, r3, #9
 800509a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80050b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050ba:	ee17 2a90 	vmov	r2, s15
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80050c2:	4b1f      	ldr	r3, [pc, #124]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	0c1b      	lsrs	r3, r3, #16
 80050c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050cc:	ee07 3a90 	vmov	s15, r3
 80050d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80050d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80050dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80050e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050e8:	ee17 2a90 	vmov	r2, s15
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80050f0:	4b13      	ldr	r3, [pc, #76]	@ (8005140 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	0e1b      	lsrs	r3, r3, #24
 80050f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005102:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005106:	ee37 7a87 	vadd.f32	s14, s15, s14
 800510a:	edd7 6a07 	vldr	s13, [r7, #28]
 800510e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005116:	ee17 2a90 	vmov	r2, s15
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800511e:	e008      	b.n	8005132 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	609a      	str	r2, [r3, #8]
}
 8005132:	bf00      	nop
 8005134:	3724      	adds	r7, #36	@ 0x24
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	58024400 	.word	0x58024400
 8005144:	03d09000 	.word	0x03d09000
 8005148:	46000000 	.word	0x46000000
 800514c:	4c742400 	.word	0x4c742400
 8005150:	4a742400 	.word	0x4a742400
 8005154:	4bbebc20 	.word	0x4bbebc20

08005158 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005166:	4b53      	ldr	r3, [pc, #332]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	2b03      	cmp	r3, #3
 8005170:	d101      	bne.n	8005176 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e099      	b.n	80052aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005176:	4b4f      	ldr	r3, [pc, #316]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a4e      	ldr	r2, [pc, #312]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800517c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005182:	f7fc f9e5 	bl	8001550 <HAL_GetTick>
 8005186:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005188:	e008      	b.n	800519c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800518a:	f7fc f9e1 	bl	8001550 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e086      	b.n	80052aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800519c:	4b45      	ldr	r3, [pc, #276]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1f0      	bne.n	800518a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80051a8:	4b42      	ldr	r3, [pc, #264]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 80051aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ac:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	031b      	lsls	r3, r3, #12
 80051b6:	493f      	ldr	r1, [pc, #252]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	025b      	lsls	r3, r3, #9
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	041b      	lsls	r3, r3, #16
 80051da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	061b      	lsls	r3, r3, #24
 80051e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051ec:	4931      	ldr	r1, [pc, #196]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80051f2:	4b30      	ldr	r3, [pc, #192]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 80051f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	492d      	ldr	r1, [pc, #180]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005200:	4313      	orrs	r3, r2
 8005202:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005204:	4b2b      	ldr	r3, [pc, #172]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005208:	f023 0220 	bic.w	r2, r3, #32
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	4928      	ldr	r1, [pc, #160]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005212:	4313      	orrs	r3, r2
 8005214:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005216:	4b27      	ldr	r3, [pc, #156]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521a:	4a26      	ldr	r2, [pc, #152]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800521c:	f023 0310 	bic.w	r3, r3, #16
 8005220:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005222:	4b24      	ldr	r3, [pc, #144]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005224:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005226:	4b24      	ldr	r3, [pc, #144]	@ (80052b8 <RCCEx_PLL2_Config+0x160>)
 8005228:	4013      	ands	r3, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	69d2      	ldr	r2, [r2, #28]
 800522e:	00d2      	lsls	r2, r2, #3
 8005230:	4920      	ldr	r1, [pc, #128]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005232:	4313      	orrs	r3, r2
 8005234:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005236:	4b1f      	ldr	r3, [pc, #124]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523a:	4a1e      	ldr	r2, [pc, #120]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800523c:	f043 0310 	orr.w	r3, r3, #16
 8005240:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005248:	4b1a      	ldr	r3, [pc, #104]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524c:	4a19      	ldr	r2, [pc, #100]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800524e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005252:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005254:	e00f      	b.n	8005276 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d106      	bne.n	800526a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800525c:	4b15      	ldr	r3, [pc, #84]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800525e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005260:	4a14      	ldr	r2, [pc, #80]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005262:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005266:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005268:	e005      	b.n	8005276 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800526a:	4b12      	ldr	r3, [pc, #72]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526e:	4a11      	ldr	r2, [pc, #68]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005270:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005274:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005276:	4b0f      	ldr	r3, [pc, #60]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a0e      	ldr	r2, [pc, #56]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800527c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005282:	f7fc f965 	bl	8001550 <HAL_GetTick>
 8005286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005288:	e008      	b.n	800529c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800528a:	f7fc f961 	bl	8001550 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b02      	cmp	r3, #2
 8005296:	d901      	bls.n	800529c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e006      	b.n	80052aa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800529c:	4b05      	ldr	r3, [pc, #20]	@ (80052b4 <RCCEx_PLL2_Config+0x15c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0f0      	beq.n	800528a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80052a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	58024400 	.word	0x58024400
 80052b8:	ffff0007 	.word	0xffff0007

080052bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052ca:	4b53      	ldr	r3, [pc, #332]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80052cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d101      	bne.n	80052da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e099      	b.n	800540e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80052da:	4b4f      	ldr	r3, [pc, #316]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a4e      	ldr	r2, [pc, #312]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80052e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e6:	f7fc f933 	bl	8001550 <HAL_GetTick>
 80052ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80052ec:	e008      	b.n	8005300 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80052ee:	f7fc f92f 	bl	8001550 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e086      	b.n	800540e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005300:	4b45      	ldr	r3, [pc, #276]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d1f0      	bne.n	80052ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800530c:	4b42      	ldr	r3, [pc, #264]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 800530e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005310:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	051b      	lsls	r3, r3, #20
 800531a:	493f      	ldr	r1, [pc, #252]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 800531c:	4313      	orrs	r3, r2
 800531e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	3b01      	subs	r3, #1
 8005326:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	3b01      	subs	r3, #1
 8005330:	025b      	lsls	r3, r3, #9
 8005332:	b29b      	uxth	r3, r3
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	3b01      	subs	r3, #1
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	3b01      	subs	r3, #1
 800534a:	061b      	lsls	r3, r3, #24
 800534c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005350:	4931      	ldr	r1, [pc, #196]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005352:	4313      	orrs	r3, r2
 8005354:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005356:	4b30      	ldr	r3, [pc, #192]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	492d      	ldr	r1, [pc, #180]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005364:	4313      	orrs	r3, r2
 8005366:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005368:	4b2b      	ldr	r3, [pc, #172]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 800536a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	4928      	ldr	r1, [pc, #160]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005376:	4313      	orrs	r3, r2
 8005378:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800537a:	4b27      	ldr	r3, [pc, #156]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 800537c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537e:	4a26      	ldr	r2, [pc, #152]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005384:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005386:	4b24      	ldr	r3, [pc, #144]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800538a:	4b24      	ldr	r3, [pc, #144]	@ (800541c <RCCEx_PLL3_Config+0x160>)
 800538c:	4013      	ands	r3, r2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	69d2      	ldr	r2, [r2, #28]
 8005392:	00d2      	lsls	r2, r2, #3
 8005394:	4920      	ldr	r1, [pc, #128]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005396:	4313      	orrs	r3, r2
 8005398:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800539a:	4b1f      	ldr	r3, [pc, #124]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539e:	4a1e      	ldr	r2, [pc, #120]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d106      	bne.n	80053ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80053ac:	4b1a      	ldr	r3, [pc, #104]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b0:	4a19      	ldr	r2, [pc, #100]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053b2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80053b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053b8:	e00f      	b.n	80053da <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d106      	bne.n	80053ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80053c0:	4b15      	ldr	r3, [pc, #84]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c4:	4a14      	ldr	r2, [pc, #80]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80053ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80053cc:	e005      	b.n	80053da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80053ce:	4b12      	ldr	r3, [pc, #72]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d2:	4a11      	ldr	r2, [pc, #68]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80053da:	4b0f      	ldr	r3, [pc, #60]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a0e      	ldr	r2, [pc, #56]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 80053e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053e6:	f7fc f8b3 	bl	8001550 <HAL_GetTick>
 80053ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80053ec:	e008      	b.n	8005400 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80053ee:	f7fc f8af 	bl	8001550 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d901      	bls.n	8005400 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e006      	b.n	800540e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005400:	4b05      	ldr	r3, [pc, #20]	@ (8005418 <RCCEx_PLL3_Config+0x15c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d0f0      	beq.n	80053ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800540c:	7bfb      	ldrb	r3, [r7, #15]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	58024400 	.word	0x58024400
 800541c:	ffff0007 	.word	0xffff0007

08005420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e049      	b.n	80054c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f841 	bl	80054ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	4610      	mov	r0, r2
 8005460:	f000 f9e8 	bl	8005834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d001      	beq.n	80054fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e054      	b.n	80055a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2202      	movs	r2, #2
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68da      	ldr	r2, [r3, #12]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0201 	orr.w	r2, r2, #1
 8005512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a26      	ldr	r2, [pc, #152]	@ (80055b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d022      	beq.n	8005564 <HAL_TIM_Base_Start_IT+0x80>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005526:	d01d      	beq.n	8005564 <HAL_TIM_Base_Start_IT+0x80>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a22      	ldr	r2, [pc, #136]	@ (80055b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d018      	beq.n	8005564 <HAL_TIM_Base_Start_IT+0x80>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a21      	ldr	r2, [pc, #132]	@ (80055bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d013      	beq.n	8005564 <HAL_TIM_Base_Start_IT+0x80>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a1f      	ldr	r2, [pc, #124]	@ (80055c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00e      	beq.n	8005564 <HAL_TIM_Base_Start_IT+0x80>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a1e      	ldr	r2, [pc, #120]	@ (80055c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d009      	beq.n	8005564 <HAL_TIM_Base_Start_IT+0x80>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1c      	ldr	r2, [pc, #112]	@ (80055c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d004      	beq.n	8005564 <HAL_TIM_Base_Start_IT+0x80>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a1b      	ldr	r2, [pc, #108]	@ (80055cc <HAL_TIM_Base_Start_IT+0xe8>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d115      	bne.n	8005590 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	4b19      	ldr	r3, [pc, #100]	@ (80055d0 <HAL_TIM_Base_Start_IT+0xec>)
 800556c:	4013      	ands	r3, r2
 800556e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b06      	cmp	r3, #6
 8005574:	d015      	beq.n	80055a2 <HAL_TIM_Base_Start_IT+0xbe>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800557c:	d011      	beq.n	80055a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f042 0201 	orr.w	r2, r2, #1
 800558c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800558e:	e008      	b.n	80055a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0201 	orr.w	r2, r2, #1
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	e000      	b.n	80055a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40000400 	.word	0x40000400
 80055bc:	40000800 	.word	0x40000800
 80055c0:	40000c00 	.word	0x40000c00
 80055c4:	40010400 	.word	0x40010400
 80055c8:	40001800 	.word	0x40001800
 80055cc:	40014000 	.word	0x40014000
 80055d0:	00010007 	.word	0x00010007

080055d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d020      	beq.n	8005638 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01b      	beq.n	8005638 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0202 	mvn.w	r2, #2
 8005608:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f8e9 	bl	80057f6 <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8db 	bl	80057e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f8ec 	bl	800580a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	f003 0304 	and.w	r3, r3, #4
 800563e:	2b00      	cmp	r3, #0
 8005640:	d020      	beq.n	8005684 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f003 0304 	and.w	r3, r3, #4
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01b      	beq.n	8005684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0204 	mvn.w	r2, #4
 8005654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f8c3 	bl	80057f6 <HAL_TIM_IC_CaptureCallback>
 8005670:	e005      	b.n	800567e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8b5 	bl	80057e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f8c6 	bl	800580a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b00      	cmp	r3, #0
 800568c:	d020      	beq.n	80056d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b00      	cmp	r3, #0
 8005696:	d01b      	beq.n	80056d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f06f 0208 	mvn.w	r2, #8
 80056a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2204      	movs	r2, #4
 80056a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f89d 	bl	80057f6 <HAL_TIM_IC_CaptureCallback>
 80056bc:	e005      	b.n	80056ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 f88f 	bl	80057e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f8a0 	bl	800580a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d020      	beq.n	800571c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d01b      	beq.n	800571c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0210 	mvn.w	r2, #16
 80056ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2208      	movs	r2, #8
 80056f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f877 	bl	80057f6 <HAL_TIM_IC_CaptureCallback>
 8005708:	e005      	b.n	8005716 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f869 	bl	80057e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f87a 	bl	800580a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00c      	beq.n	8005740 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f06f 0201 	mvn.w	r2, #1
 8005738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7fb fa8e 	bl	8000c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005746:	2b00      	cmp	r3, #0
 8005748:	d104      	bne.n	8005754 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00c      	beq.n	800576e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d007      	beq.n	800576e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f913 	bl	8005994 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00c      	beq.n	8005792 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800577e:	2b00      	cmp	r3, #0
 8005780:	d007      	beq.n	8005792 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800578a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f90b 	bl	80059a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00c      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f834 	bl	800581e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00c      	beq.n	80057da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f003 0320 	and.w	r3, r3, #32
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f06f 0220 	mvn.w	r2, #32
 80057d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f8d3 	bl	8005980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b083      	sub	sp, #12
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005826:	bf00      	nop
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a46      	ldr	r2, [pc, #280]	@ (8005960 <TIM_Base_SetConfig+0x12c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d013      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005852:	d00f      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a43      	ldr	r2, [pc, #268]	@ (8005964 <TIM_Base_SetConfig+0x130>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d00b      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a42      	ldr	r2, [pc, #264]	@ (8005968 <TIM_Base_SetConfig+0x134>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d007      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a41      	ldr	r2, [pc, #260]	@ (800596c <TIM_Base_SetConfig+0x138>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d003      	beq.n	8005874 <TIM_Base_SetConfig+0x40>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a40      	ldr	r2, [pc, #256]	@ (8005970 <TIM_Base_SetConfig+0x13c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d108      	bne.n	8005886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800587a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a35      	ldr	r2, [pc, #212]	@ (8005960 <TIM_Base_SetConfig+0x12c>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01f      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005894:	d01b      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a32      	ldr	r2, [pc, #200]	@ (8005964 <TIM_Base_SetConfig+0x130>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d017      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a31      	ldr	r2, [pc, #196]	@ (8005968 <TIM_Base_SetConfig+0x134>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a30      	ldr	r2, [pc, #192]	@ (800596c <TIM_Base_SetConfig+0x138>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00f      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005970 <TIM_Base_SetConfig+0x13c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d00b      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005974 <TIM_Base_SetConfig+0x140>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d007      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005978 <TIM_Base_SetConfig+0x144>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d003      	beq.n	80058ce <TIM_Base_SetConfig+0x9a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a2c      	ldr	r2, [pc, #176]	@ (800597c <TIM_Base_SetConfig+0x148>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d108      	bne.n	80058e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a16      	ldr	r2, [pc, #88]	@ (8005960 <TIM_Base_SetConfig+0x12c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00f      	beq.n	800592c <TIM_Base_SetConfig+0xf8>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a18      	ldr	r2, [pc, #96]	@ (8005970 <TIM_Base_SetConfig+0x13c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00b      	beq.n	800592c <TIM_Base_SetConfig+0xf8>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a17      	ldr	r2, [pc, #92]	@ (8005974 <TIM_Base_SetConfig+0x140>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d007      	beq.n	800592c <TIM_Base_SetConfig+0xf8>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a16      	ldr	r2, [pc, #88]	@ (8005978 <TIM_Base_SetConfig+0x144>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_Base_SetConfig+0xf8>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a15      	ldr	r2, [pc, #84]	@ (800597c <TIM_Base_SetConfig+0x148>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d103      	bne.n	8005934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b01      	cmp	r3, #1
 8005944:	d105      	bne.n	8005952 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f023 0201 	bic.w	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	611a      	str	r2, [r3, #16]
  }
}
 8005952:	bf00      	nop
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40010000 	.word	0x40010000
 8005964:	40000400 	.word	0x40000400
 8005968:	40000800 	.word	0x40000800
 800596c:	40000c00 	.word	0x40000c00
 8005970:	40010400 	.word	0x40010400
 8005974:	40014000 	.word	0x40014000
 8005978:	40014400 	.word	0x40014400
 800597c:	40014800 	.word	0x40014800

08005980 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e042      	b.n	8005a54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d106      	bne.n	80059e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7fb fbb3 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2224      	movs	r2, #36	@ 0x24
 80059ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0201 	bic.w	r2, r2, #1
 80059fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 f9f6 	bl	8006df8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fc8b 	bl	8006328 <UART_SetConfig>
 8005a12:	4603      	mov	r3, r0
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d101      	bne.n	8005a1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e01b      	b.n	8005a54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f001 fa75 	bl	8006f3c <UART_CheckIdleState>
 8005a52:	4603      	mov	r3, r0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08a      	sub	sp, #40	@ 0x28
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d17b      	bne.n	8005b6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <HAL_UART_Transmit+0x26>
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e074      	b.n	8005b70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2221      	movs	r2, #33	@ 0x21
 8005a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a96:	f7fb fd5b 	bl	8001550 <HAL_GetTick>
 8005a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	88fa      	ldrh	r2, [r7, #6]
 8005aa0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	88fa      	ldrh	r2, [r7, #6]
 8005aa8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab4:	d108      	bne.n	8005ac8 <HAL_UART_Transmit+0x6c>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d104      	bne.n	8005ac8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	e003      	b.n	8005ad0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ad0:	e030      	b.n	8005b34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2180      	movs	r1, #128	@ 0x80
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f001 fad7 	bl	8007090 <UART_WaitOnFlagUntilTimeout>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d005      	beq.n	8005af4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e03d      	b.n	8005b70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10b      	bne.n	8005b12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	e007      	b.n	8005b22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	781a      	ldrb	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1c8      	bne.n	8005ad2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2200      	movs	r2, #0
 8005b48:	2140      	movs	r1, #64	@ 0x40
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f001 faa0 	bl	8007090 <UART_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e006      	b.n	8005b70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e000      	b.n	8005b70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005b6e:	2302      	movs	r3, #2
  }
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3720      	adds	r7, #32
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b0ba      	sub	sp, #232	@ 0xe8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005ba2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005bac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d11b      	bne.n	8005bec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d015      	beq.n	8005bec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc4:	f003 0320 	and.w	r3, r3, #32
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d105      	bne.n	8005bd8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d009      	beq.n	8005bec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8377 	beq.w	80062d0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	4798      	blx	r3
      }
      return;
 8005bea:	e371      	b.n	80062d0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 8123 	beq.w	8005e3c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005bf6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8005e30 <HAL_UART_IRQHandler+0x2b8>)
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005c02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005c06:	4b8b      	ldr	r3, [pc, #556]	@ (8005e34 <HAL_UART_IRQHandler+0x2bc>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8116 	beq.w	8005e3c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d011      	beq.n	8005c40 <HAL_UART_IRQHandler+0xc8>
 8005c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00b      	beq.n	8005c40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c36:	f043 0201 	orr.w	r2, r3, #1
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d011      	beq.n	8005c70 <HAL_UART_IRQHandler+0xf8>
 8005c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c66:	f043 0204 	orr.w	r2, r3, #4
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d011      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x128>
 8005c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00b      	beq.n	8005ca0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2204      	movs	r2, #4
 8005c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c96:	f043 0202 	orr.w	r2, r3, #2
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d017      	beq.n	8005cdc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d105      	bne.n	8005cc4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005cb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8005e30 <HAL_UART_IRQHandler+0x2b8>)
 8005cbe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d00b      	beq.n	8005cdc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cd2:	f043 0208 	orr.w	r2, r3, #8
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d012      	beq.n	8005d0e <HAL_UART_IRQHandler+0x196>
 8005ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d00c      	beq.n	8005d0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d04:	f043 0220 	orr.w	r2, r3, #32
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 82dd 	beq.w	80062d4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d1e:	f003 0320 	and.w	r3, r3, #32
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d013      	beq.n	8005d4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d2a:	f003 0320 	and.w	r3, r3, #32
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d105      	bne.n	8005d3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d007      	beq.n	8005d4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d003      	beq.n	8005d4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d62:	2b40      	cmp	r3, #64	@ 0x40
 8005d64:	d005      	beq.n	8005d72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d054      	beq.n	8005e1c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f001 fb1c 	bl	80073b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d82:	2b40      	cmp	r3, #64	@ 0x40
 8005d84:	d146      	bne.n	8005e14 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3308      	adds	r3, #8
 8005dae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005db2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005db6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005dbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005dc2:	e841 2300 	strex	r3, r2, [r1]
 8005dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1d9      	bne.n	8005d86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d017      	beq.n	8005e0c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005de2:	4a15      	ldr	r2, [pc, #84]	@ (8005e38 <HAL_UART_IRQHandler+0x2c0>)
 8005de4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7fc f861 	bl	8001eb4 <HAL_DMA_Abort_IT>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d019      	beq.n	8005e2c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005e06:	4610      	mov	r0, r2
 8005e08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e0a:	e00f      	b.n	8005e2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 fa81 	bl	8006314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e12:	e00b      	b.n	8005e2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fa7d 	bl	8006314 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e1a:	e007      	b.n	8005e2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fa79 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005e2a:	e253      	b.n	80062d4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e2c:	bf00      	nop
    return;
 8005e2e:	e251      	b.n	80062d4 <HAL_UART_IRQHandler+0x75c>
 8005e30:	10000001 	.word	0x10000001
 8005e34:	04000120 	.word	0x04000120
 8005e38:	0800747d 	.word	0x0800747d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	f040 81e7 	bne.w	8006214 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 81e0 	beq.w	8006214 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 81d9 	beq.w	8006214 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2210      	movs	r2, #16
 8005e68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e74:	2b40      	cmp	r3, #64	@ 0x40
 8005e76:	f040 8151 	bne.w	800611c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a96      	ldr	r2, [pc, #600]	@ (80060dc <HAL_UART_IRQHandler+0x564>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d068      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a93      	ldr	r2, [pc, #588]	@ (80060e0 <HAL_UART_IRQHandler+0x568>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d061      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a91      	ldr	r2, [pc, #580]	@ (80060e4 <HAL_UART_IRQHandler+0x56c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d05a      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a8e      	ldr	r2, [pc, #568]	@ (80060e8 <HAL_UART_IRQHandler+0x570>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d053      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a8c      	ldr	r2, [pc, #560]	@ (80060ec <HAL_UART_IRQHandler+0x574>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d04c      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a89      	ldr	r2, [pc, #548]	@ (80060f0 <HAL_UART_IRQHandler+0x578>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d045      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a87      	ldr	r2, [pc, #540]	@ (80060f4 <HAL_UART_IRQHandler+0x57c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d03e      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a84      	ldr	r2, [pc, #528]	@ (80060f8 <HAL_UART_IRQHandler+0x580>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d037      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a82      	ldr	r2, [pc, #520]	@ (80060fc <HAL_UART_IRQHandler+0x584>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d030      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a7f      	ldr	r2, [pc, #508]	@ (8006100 <HAL_UART_IRQHandler+0x588>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d029      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a7d      	ldr	r2, [pc, #500]	@ (8006104 <HAL_UART_IRQHandler+0x58c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d022      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a7a      	ldr	r2, [pc, #488]	@ (8006108 <HAL_UART_IRQHandler+0x590>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d01b      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a78      	ldr	r2, [pc, #480]	@ (800610c <HAL_UART_IRQHandler+0x594>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d014      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a75      	ldr	r2, [pc, #468]	@ (8006110 <HAL_UART_IRQHandler+0x598>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00d      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a73      	ldr	r2, [pc, #460]	@ (8006114 <HAL_UART_IRQHandler+0x59c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d006      	beq.n	8005f5a <HAL_UART_IRQHandler+0x3e2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a70      	ldr	r2, [pc, #448]	@ (8006118 <HAL_UART_IRQHandler+0x5a0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d106      	bne.n	8005f68 <HAL_UART_IRQHandler+0x3f0>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	e005      	b.n	8005f74 <HAL_UART_IRQHandler+0x3fc>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	f000 81ab 	beq.w	80062d8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005f88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	f080 81a3 	bcs.w	80062d8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fa8:	f000 8087 	beq.w	80060ba <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005fd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005fda:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1da      	bne.n	8005fac <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006006:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006008:	f023 0301 	bic.w	r3, r3, #1
 800600c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	3308      	adds	r3, #8
 8006016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800601a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800601e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006022:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800602c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e1      	bne.n	8005ff6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3308      	adds	r3, #8
 8006038:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	3308      	adds	r3, #8
 8006052:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006056:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006058:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800605c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e3      	bne.n	8006032 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006080:	e853 3f00 	ldrex	r3, [r3]
 8006084:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006088:	f023 0310 	bic.w	r3, r3, #16
 800608c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	461a      	mov	r2, r3
 8006096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800609a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800609c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e4      	bne.n	8006078 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fb fbdf 	bl	8001878 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2202      	movs	r2, #2
 80060be:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	4619      	mov	r1, r3
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7fa fa7b 	bl	80005d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060da:	e0fd      	b.n	80062d8 <HAL_UART_IRQHandler+0x760>
 80060dc:	40020010 	.word	0x40020010
 80060e0:	40020028 	.word	0x40020028
 80060e4:	40020040 	.word	0x40020040
 80060e8:	40020058 	.word	0x40020058
 80060ec:	40020070 	.word	0x40020070
 80060f0:	40020088 	.word	0x40020088
 80060f4:	400200a0 	.word	0x400200a0
 80060f8:	400200b8 	.word	0x400200b8
 80060fc:	40020410 	.word	0x40020410
 8006100:	40020428 	.word	0x40020428
 8006104:	40020440 	.word	0x40020440
 8006108:	40020458 	.word	0x40020458
 800610c:	40020470 	.word	0x40020470
 8006110:	40020488 	.word	0x40020488
 8006114:	400204a0 	.word	0x400204a0
 8006118:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006128:	b29b      	uxth	r3, r3
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 80cf 	beq.w	80062dc <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800613e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 80ca 	beq.w	80062dc <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006150:	e853 3f00 	ldrex	r3, [r3]
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006158:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800615c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	461a      	mov	r2, r3
 8006166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800616a:	647b      	str	r3, [r7, #68]	@ 0x44
 800616c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006170:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e4      	bne.n	8006148 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3308      	adds	r3, #8
 8006184:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	623b      	str	r3, [r7, #32]
   return(result);
 800618e:	6a3a      	ldr	r2, [r7, #32]
 8006190:	4b55      	ldr	r3, [pc, #340]	@ (80062e8 <HAL_UART_IRQHandler+0x770>)
 8006192:	4013      	ands	r3, r2
 8006194:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3308      	adds	r3, #8
 800619e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80061a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80061a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061aa:	e841 2300 	strex	r3, r2, [r1]
 80061ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1e3      	bne.n	800617e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	e853 3f00 	ldrex	r3, [r3]
 80061d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0310 	bic.w	r3, r3, #16
 80061de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80061ec:	61fb      	str	r3, [r7, #28]
 80061ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	69b9      	ldr	r1, [r7, #24]
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	e841 2300 	strex	r3, r2, [r1]
 80061f8:	617b      	str	r3, [r7, #20]
   return(result);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1e4      	bne.n	80061ca <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2202      	movs	r2, #2
 8006204:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006206:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800620a:	4619      	mov	r1, r3
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7fa f9df 	bl	80005d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006212:	e063      	b.n	80062dc <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006218:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00e      	beq.n	800623e <HAL_UART_IRQHandler+0x6c6>
 8006220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006224:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006234:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f001 fe7e 	bl	8007f38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800623c:	e051      	b.n	80062e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800623e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006246:	2b00      	cmp	r3, #0
 8006248:	d014      	beq.n	8006274 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800624a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800624e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006252:	2b00      	cmp	r3, #0
 8006254:	d105      	bne.n	8006262 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800625a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d008      	beq.n	8006274 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006266:	2b00      	cmp	r3, #0
 8006268:	d03a      	beq.n	80062e0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	4798      	blx	r3
    }
    return;
 8006272:	e035      	b.n	80062e0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	d009      	beq.n	8006294 <HAL_UART_IRQHandler+0x71c>
 8006280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 f90b 	bl	80074a8 <UART_EndTransmit_IT>
    return;
 8006292:	e026      	b.n	80062e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006298:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d009      	beq.n	80062b4 <HAL_UART_IRQHandler+0x73c>
 80062a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 fe57 	bl	8007f60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062b2:	e016      	b.n	80062e2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80062b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d010      	beq.n	80062e2 <HAL_UART_IRQHandler+0x76a>
 80062c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	da0c      	bge.n	80062e2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 fe3f 	bl	8007f4c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062ce:	e008      	b.n	80062e2 <HAL_UART_IRQHandler+0x76a>
      return;
 80062d0:	bf00      	nop
 80062d2:	e006      	b.n	80062e2 <HAL_UART_IRQHandler+0x76a>
    return;
 80062d4:	bf00      	nop
 80062d6:	e004      	b.n	80062e2 <HAL_UART_IRQHandler+0x76a>
      return;
 80062d8:	bf00      	nop
 80062da:	e002      	b.n	80062e2 <HAL_UART_IRQHandler+0x76a>
      return;
 80062dc:	bf00      	nop
 80062de:	e000      	b.n	80062e2 <HAL_UART_IRQHandler+0x76a>
    return;
 80062e0:	bf00      	nop
  }
}
 80062e2:	37e8      	adds	r7, #232	@ 0xe8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	effffffe 	.word	0xeffffffe

080062ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006308:	bf00      	nop
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800632c:	b092      	sub	sp, #72	@ 0x48
 800632e:	af00      	add	r7, sp, #0
 8006330:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006332:	2300      	movs	r3, #0
 8006334:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	431a      	orrs	r2, r3
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	431a      	orrs	r2, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	4313      	orrs	r3, r2
 800634e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	4bbe      	ldr	r3, [pc, #760]	@ (8006650 <UART_SetConfig+0x328>)
 8006358:	4013      	ands	r3, r2
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	6812      	ldr	r2, [r2, #0]
 800635e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006360:	430b      	orrs	r3, r1
 8006362:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4ab3      	ldr	r2, [pc, #716]	@ (8006654 <UART_SetConfig+0x32c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d004      	beq.n	8006394 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006390:	4313      	orrs	r3, r2
 8006392:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	689a      	ldr	r2, [r3, #8]
 800639a:	4baf      	ldr	r3, [pc, #700]	@ (8006658 <UART_SetConfig+0x330>)
 800639c:	4013      	ands	r3, r2
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	6812      	ldr	r2, [r2, #0]
 80063a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80063a4:	430b      	orrs	r3, r1
 80063a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ae:	f023 010f 	bic.w	r1, r3, #15
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4aa6      	ldr	r2, [pc, #664]	@ (800665c <UART_SetConfig+0x334>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d177      	bne.n	80064b8 <UART_SetConfig+0x190>
 80063c8:	4ba5      	ldr	r3, [pc, #660]	@ (8006660 <UART_SetConfig+0x338>)
 80063ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063d0:	2b28      	cmp	r3, #40	@ 0x28
 80063d2:	d86d      	bhi.n	80064b0 <UART_SetConfig+0x188>
 80063d4:	a201      	add	r2, pc, #4	@ (adr r2, 80063dc <UART_SetConfig+0xb4>)
 80063d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063da:	bf00      	nop
 80063dc:	08006481 	.word	0x08006481
 80063e0:	080064b1 	.word	0x080064b1
 80063e4:	080064b1 	.word	0x080064b1
 80063e8:	080064b1 	.word	0x080064b1
 80063ec:	080064b1 	.word	0x080064b1
 80063f0:	080064b1 	.word	0x080064b1
 80063f4:	080064b1 	.word	0x080064b1
 80063f8:	080064b1 	.word	0x080064b1
 80063fc:	08006489 	.word	0x08006489
 8006400:	080064b1 	.word	0x080064b1
 8006404:	080064b1 	.word	0x080064b1
 8006408:	080064b1 	.word	0x080064b1
 800640c:	080064b1 	.word	0x080064b1
 8006410:	080064b1 	.word	0x080064b1
 8006414:	080064b1 	.word	0x080064b1
 8006418:	080064b1 	.word	0x080064b1
 800641c:	08006491 	.word	0x08006491
 8006420:	080064b1 	.word	0x080064b1
 8006424:	080064b1 	.word	0x080064b1
 8006428:	080064b1 	.word	0x080064b1
 800642c:	080064b1 	.word	0x080064b1
 8006430:	080064b1 	.word	0x080064b1
 8006434:	080064b1 	.word	0x080064b1
 8006438:	080064b1 	.word	0x080064b1
 800643c:	08006499 	.word	0x08006499
 8006440:	080064b1 	.word	0x080064b1
 8006444:	080064b1 	.word	0x080064b1
 8006448:	080064b1 	.word	0x080064b1
 800644c:	080064b1 	.word	0x080064b1
 8006450:	080064b1 	.word	0x080064b1
 8006454:	080064b1 	.word	0x080064b1
 8006458:	080064b1 	.word	0x080064b1
 800645c:	080064a1 	.word	0x080064a1
 8006460:	080064b1 	.word	0x080064b1
 8006464:	080064b1 	.word	0x080064b1
 8006468:	080064b1 	.word	0x080064b1
 800646c:	080064b1 	.word	0x080064b1
 8006470:	080064b1 	.word	0x080064b1
 8006474:	080064b1 	.word	0x080064b1
 8006478:	080064b1 	.word	0x080064b1
 800647c:	080064a9 	.word	0x080064a9
 8006480:	2301      	movs	r3, #1
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006486:	e222      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006488:	2304      	movs	r3, #4
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800648e:	e21e      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006490:	2308      	movs	r3, #8
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006496:	e21a      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006498:	2310      	movs	r3, #16
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800649e:	e216      	b.n	80068ce <UART_SetConfig+0x5a6>
 80064a0:	2320      	movs	r3, #32
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064a6:	e212      	b.n	80068ce <UART_SetConfig+0x5a6>
 80064a8:	2340      	movs	r3, #64	@ 0x40
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ae:	e20e      	b.n	80068ce <UART_SetConfig+0x5a6>
 80064b0:	2380      	movs	r3, #128	@ 0x80
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064b6:	e20a      	b.n	80068ce <UART_SetConfig+0x5a6>
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a69      	ldr	r2, [pc, #420]	@ (8006664 <UART_SetConfig+0x33c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d130      	bne.n	8006524 <UART_SetConfig+0x1fc>
 80064c2:	4b67      	ldr	r3, [pc, #412]	@ (8006660 <UART_SetConfig+0x338>)
 80064c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d826      	bhi.n	800651c <UART_SetConfig+0x1f4>
 80064ce:	a201      	add	r2, pc, #4	@ (adr r2, 80064d4 <UART_SetConfig+0x1ac>)
 80064d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d4:	080064ed 	.word	0x080064ed
 80064d8:	080064f5 	.word	0x080064f5
 80064dc:	080064fd 	.word	0x080064fd
 80064e0:	08006505 	.word	0x08006505
 80064e4:	0800650d 	.word	0x0800650d
 80064e8:	08006515 	.word	0x08006515
 80064ec:	2300      	movs	r3, #0
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f2:	e1ec      	b.n	80068ce <UART_SetConfig+0x5a6>
 80064f4:	2304      	movs	r3, #4
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fa:	e1e8      	b.n	80068ce <UART_SetConfig+0x5a6>
 80064fc:	2308      	movs	r3, #8
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006502:	e1e4      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006504:	2310      	movs	r3, #16
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650a:	e1e0      	b.n	80068ce <UART_SetConfig+0x5a6>
 800650c:	2320      	movs	r3, #32
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006512:	e1dc      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006514:	2340      	movs	r3, #64	@ 0x40
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651a:	e1d8      	b.n	80068ce <UART_SetConfig+0x5a6>
 800651c:	2380      	movs	r3, #128	@ 0x80
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006522:	e1d4      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a4f      	ldr	r2, [pc, #316]	@ (8006668 <UART_SetConfig+0x340>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d130      	bne.n	8006590 <UART_SetConfig+0x268>
 800652e:	4b4c      	ldr	r3, [pc, #304]	@ (8006660 <UART_SetConfig+0x338>)
 8006530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	2b05      	cmp	r3, #5
 8006538:	d826      	bhi.n	8006588 <UART_SetConfig+0x260>
 800653a:	a201      	add	r2, pc, #4	@ (adr r2, 8006540 <UART_SetConfig+0x218>)
 800653c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006540:	08006559 	.word	0x08006559
 8006544:	08006561 	.word	0x08006561
 8006548:	08006569 	.word	0x08006569
 800654c:	08006571 	.word	0x08006571
 8006550:	08006579 	.word	0x08006579
 8006554:	08006581 	.word	0x08006581
 8006558:	2300      	movs	r3, #0
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800655e:	e1b6      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006560:	2304      	movs	r3, #4
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006566:	e1b2      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006568:	2308      	movs	r3, #8
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800656e:	e1ae      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006570:	2310      	movs	r3, #16
 8006572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006576:	e1aa      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006578:	2320      	movs	r3, #32
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800657e:	e1a6      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006580:	2340      	movs	r3, #64	@ 0x40
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006586:	e1a2      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006588:	2380      	movs	r3, #128	@ 0x80
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800658e:	e19e      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a35      	ldr	r2, [pc, #212]	@ (800666c <UART_SetConfig+0x344>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d130      	bne.n	80065fc <UART_SetConfig+0x2d4>
 800659a:	4b31      	ldr	r3, [pc, #196]	@ (8006660 <UART_SetConfig+0x338>)
 800659c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	2b05      	cmp	r3, #5
 80065a4:	d826      	bhi.n	80065f4 <UART_SetConfig+0x2cc>
 80065a6:	a201      	add	r2, pc, #4	@ (adr r2, 80065ac <UART_SetConfig+0x284>)
 80065a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ac:	080065c5 	.word	0x080065c5
 80065b0:	080065cd 	.word	0x080065cd
 80065b4:	080065d5 	.word	0x080065d5
 80065b8:	080065dd 	.word	0x080065dd
 80065bc:	080065e5 	.word	0x080065e5
 80065c0:	080065ed 	.word	0x080065ed
 80065c4:	2300      	movs	r3, #0
 80065c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ca:	e180      	b.n	80068ce <UART_SetConfig+0x5a6>
 80065cc:	2304      	movs	r3, #4
 80065ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065d2:	e17c      	b.n	80068ce <UART_SetConfig+0x5a6>
 80065d4:	2308      	movs	r3, #8
 80065d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065da:	e178      	b.n	80068ce <UART_SetConfig+0x5a6>
 80065dc:	2310      	movs	r3, #16
 80065de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065e2:	e174      	b.n	80068ce <UART_SetConfig+0x5a6>
 80065e4:	2320      	movs	r3, #32
 80065e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ea:	e170      	b.n	80068ce <UART_SetConfig+0x5a6>
 80065ec:	2340      	movs	r3, #64	@ 0x40
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f2:	e16c      	b.n	80068ce <UART_SetConfig+0x5a6>
 80065f4:	2380      	movs	r3, #128	@ 0x80
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fa:	e168      	b.n	80068ce <UART_SetConfig+0x5a6>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a1b      	ldr	r2, [pc, #108]	@ (8006670 <UART_SetConfig+0x348>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d142      	bne.n	800668c <UART_SetConfig+0x364>
 8006606:	4b16      	ldr	r3, [pc, #88]	@ (8006660 <UART_SetConfig+0x338>)
 8006608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800660a:	f003 0307 	and.w	r3, r3, #7
 800660e:	2b05      	cmp	r3, #5
 8006610:	d838      	bhi.n	8006684 <UART_SetConfig+0x35c>
 8006612:	a201      	add	r2, pc, #4	@ (adr r2, 8006618 <UART_SetConfig+0x2f0>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	08006631 	.word	0x08006631
 800661c:	08006639 	.word	0x08006639
 8006620:	08006641 	.word	0x08006641
 8006624:	08006649 	.word	0x08006649
 8006628:	08006675 	.word	0x08006675
 800662c:	0800667d 	.word	0x0800667d
 8006630:	2300      	movs	r3, #0
 8006632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006636:	e14a      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006638:	2304      	movs	r3, #4
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800663e:	e146      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006640:	2308      	movs	r3, #8
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006646:	e142      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006648:	2310      	movs	r3, #16
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800664e:	e13e      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006650:	cfff69f3 	.word	0xcfff69f3
 8006654:	58000c00 	.word	0x58000c00
 8006658:	11fff4ff 	.word	0x11fff4ff
 800665c:	40011000 	.word	0x40011000
 8006660:	58024400 	.word	0x58024400
 8006664:	40004400 	.word	0x40004400
 8006668:	40004800 	.word	0x40004800
 800666c:	40004c00 	.word	0x40004c00
 8006670:	40005000 	.word	0x40005000
 8006674:	2320      	movs	r3, #32
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800667a:	e128      	b.n	80068ce <UART_SetConfig+0x5a6>
 800667c:	2340      	movs	r3, #64	@ 0x40
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006682:	e124      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006684:	2380      	movs	r3, #128	@ 0x80
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800668a:	e120      	b.n	80068ce <UART_SetConfig+0x5a6>
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4acb      	ldr	r2, [pc, #812]	@ (80069c0 <UART_SetConfig+0x698>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d176      	bne.n	8006784 <UART_SetConfig+0x45c>
 8006696:	4bcb      	ldr	r3, [pc, #812]	@ (80069c4 <UART_SetConfig+0x69c>)
 8006698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800669a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800669e:	2b28      	cmp	r3, #40	@ 0x28
 80066a0:	d86c      	bhi.n	800677c <UART_SetConfig+0x454>
 80066a2:	a201      	add	r2, pc, #4	@ (adr r2, 80066a8 <UART_SetConfig+0x380>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	0800674d 	.word	0x0800674d
 80066ac:	0800677d 	.word	0x0800677d
 80066b0:	0800677d 	.word	0x0800677d
 80066b4:	0800677d 	.word	0x0800677d
 80066b8:	0800677d 	.word	0x0800677d
 80066bc:	0800677d 	.word	0x0800677d
 80066c0:	0800677d 	.word	0x0800677d
 80066c4:	0800677d 	.word	0x0800677d
 80066c8:	08006755 	.word	0x08006755
 80066cc:	0800677d 	.word	0x0800677d
 80066d0:	0800677d 	.word	0x0800677d
 80066d4:	0800677d 	.word	0x0800677d
 80066d8:	0800677d 	.word	0x0800677d
 80066dc:	0800677d 	.word	0x0800677d
 80066e0:	0800677d 	.word	0x0800677d
 80066e4:	0800677d 	.word	0x0800677d
 80066e8:	0800675d 	.word	0x0800675d
 80066ec:	0800677d 	.word	0x0800677d
 80066f0:	0800677d 	.word	0x0800677d
 80066f4:	0800677d 	.word	0x0800677d
 80066f8:	0800677d 	.word	0x0800677d
 80066fc:	0800677d 	.word	0x0800677d
 8006700:	0800677d 	.word	0x0800677d
 8006704:	0800677d 	.word	0x0800677d
 8006708:	08006765 	.word	0x08006765
 800670c:	0800677d 	.word	0x0800677d
 8006710:	0800677d 	.word	0x0800677d
 8006714:	0800677d 	.word	0x0800677d
 8006718:	0800677d 	.word	0x0800677d
 800671c:	0800677d 	.word	0x0800677d
 8006720:	0800677d 	.word	0x0800677d
 8006724:	0800677d 	.word	0x0800677d
 8006728:	0800676d 	.word	0x0800676d
 800672c:	0800677d 	.word	0x0800677d
 8006730:	0800677d 	.word	0x0800677d
 8006734:	0800677d 	.word	0x0800677d
 8006738:	0800677d 	.word	0x0800677d
 800673c:	0800677d 	.word	0x0800677d
 8006740:	0800677d 	.word	0x0800677d
 8006744:	0800677d 	.word	0x0800677d
 8006748:	08006775 	.word	0x08006775
 800674c:	2301      	movs	r3, #1
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006752:	e0bc      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006754:	2304      	movs	r3, #4
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675a:	e0b8      	b.n	80068ce <UART_SetConfig+0x5a6>
 800675c:	2308      	movs	r3, #8
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006762:	e0b4      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006764:	2310      	movs	r3, #16
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800676a:	e0b0      	b.n	80068ce <UART_SetConfig+0x5a6>
 800676c:	2320      	movs	r3, #32
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006772:	e0ac      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006774:	2340      	movs	r3, #64	@ 0x40
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677a:	e0a8      	b.n	80068ce <UART_SetConfig+0x5a6>
 800677c:	2380      	movs	r3, #128	@ 0x80
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006782:	e0a4      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a8f      	ldr	r2, [pc, #572]	@ (80069c8 <UART_SetConfig+0x6a0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d130      	bne.n	80067f0 <UART_SetConfig+0x4c8>
 800678e:	4b8d      	ldr	r3, [pc, #564]	@ (80069c4 <UART_SetConfig+0x69c>)
 8006790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	2b05      	cmp	r3, #5
 8006798:	d826      	bhi.n	80067e8 <UART_SetConfig+0x4c0>
 800679a:	a201      	add	r2, pc, #4	@ (adr r2, 80067a0 <UART_SetConfig+0x478>)
 800679c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a0:	080067b9 	.word	0x080067b9
 80067a4:	080067c1 	.word	0x080067c1
 80067a8:	080067c9 	.word	0x080067c9
 80067ac:	080067d1 	.word	0x080067d1
 80067b0:	080067d9 	.word	0x080067d9
 80067b4:	080067e1 	.word	0x080067e1
 80067b8:	2300      	movs	r3, #0
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067be:	e086      	b.n	80068ce <UART_SetConfig+0x5a6>
 80067c0:	2304      	movs	r3, #4
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067c6:	e082      	b.n	80068ce <UART_SetConfig+0x5a6>
 80067c8:	2308      	movs	r3, #8
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ce:	e07e      	b.n	80068ce <UART_SetConfig+0x5a6>
 80067d0:	2310      	movs	r3, #16
 80067d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067d6:	e07a      	b.n	80068ce <UART_SetConfig+0x5a6>
 80067d8:	2320      	movs	r3, #32
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067de:	e076      	b.n	80068ce <UART_SetConfig+0x5a6>
 80067e0:	2340      	movs	r3, #64	@ 0x40
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067e6:	e072      	b.n	80068ce <UART_SetConfig+0x5a6>
 80067e8:	2380      	movs	r3, #128	@ 0x80
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ee:	e06e      	b.n	80068ce <UART_SetConfig+0x5a6>
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a75      	ldr	r2, [pc, #468]	@ (80069cc <UART_SetConfig+0x6a4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d130      	bne.n	800685c <UART_SetConfig+0x534>
 80067fa:	4b72      	ldr	r3, [pc, #456]	@ (80069c4 <UART_SetConfig+0x69c>)
 80067fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	2b05      	cmp	r3, #5
 8006804:	d826      	bhi.n	8006854 <UART_SetConfig+0x52c>
 8006806:	a201      	add	r2, pc, #4	@ (adr r2, 800680c <UART_SetConfig+0x4e4>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	08006825 	.word	0x08006825
 8006810:	0800682d 	.word	0x0800682d
 8006814:	08006835 	.word	0x08006835
 8006818:	0800683d 	.word	0x0800683d
 800681c:	08006845 	.word	0x08006845
 8006820:	0800684d 	.word	0x0800684d
 8006824:	2300      	movs	r3, #0
 8006826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800682a:	e050      	b.n	80068ce <UART_SetConfig+0x5a6>
 800682c:	2304      	movs	r3, #4
 800682e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006832:	e04c      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006834:	2308      	movs	r3, #8
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800683a:	e048      	b.n	80068ce <UART_SetConfig+0x5a6>
 800683c:	2310      	movs	r3, #16
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006842:	e044      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006844:	2320      	movs	r3, #32
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800684a:	e040      	b.n	80068ce <UART_SetConfig+0x5a6>
 800684c:	2340      	movs	r3, #64	@ 0x40
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006852:	e03c      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006854:	2380      	movs	r3, #128	@ 0x80
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685a:	e038      	b.n	80068ce <UART_SetConfig+0x5a6>
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a5b      	ldr	r2, [pc, #364]	@ (80069d0 <UART_SetConfig+0x6a8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d130      	bne.n	80068c8 <UART_SetConfig+0x5a0>
 8006866:	4b57      	ldr	r3, [pc, #348]	@ (80069c4 <UART_SetConfig+0x69c>)
 8006868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	2b05      	cmp	r3, #5
 8006870:	d826      	bhi.n	80068c0 <UART_SetConfig+0x598>
 8006872:	a201      	add	r2, pc, #4	@ (adr r2, 8006878 <UART_SetConfig+0x550>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	08006891 	.word	0x08006891
 800687c:	08006899 	.word	0x08006899
 8006880:	080068a1 	.word	0x080068a1
 8006884:	080068a9 	.word	0x080068a9
 8006888:	080068b1 	.word	0x080068b1
 800688c:	080068b9 	.word	0x080068b9
 8006890:	2302      	movs	r3, #2
 8006892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006896:	e01a      	b.n	80068ce <UART_SetConfig+0x5a6>
 8006898:	2304      	movs	r3, #4
 800689a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800689e:	e016      	b.n	80068ce <UART_SetConfig+0x5a6>
 80068a0:	2308      	movs	r3, #8
 80068a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068a6:	e012      	b.n	80068ce <UART_SetConfig+0x5a6>
 80068a8:	2310      	movs	r3, #16
 80068aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ae:	e00e      	b.n	80068ce <UART_SetConfig+0x5a6>
 80068b0:	2320      	movs	r3, #32
 80068b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068b6:	e00a      	b.n	80068ce <UART_SetConfig+0x5a6>
 80068b8:	2340      	movs	r3, #64	@ 0x40
 80068ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068be:	e006      	b.n	80068ce <UART_SetConfig+0x5a6>
 80068c0:	2380      	movs	r3, #128	@ 0x80
 80068c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068c6:	e002      	b.n	80068ce <UART_SetConfig+0x5a6>
 80068c8:	2380      	movs	r3, #128	@ 0x80
 80068ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a3f      	ldr	r2, [pc, #252]	@ (80069d0 <UART_SetConfig+0x6a8>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	f040 80f8 	bne.w	8006aca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80068de:	2b20      	cmp	r3, #32
 80068e0:	dc46      	bgt.n	8006970 <UART_SetConfig+0x648>
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	f2c0 8082 	blt.w	80069ec <UART_SetConfig+0x6c4>
 80068e8:	3b02      	subs	r3, #2
 80068ea:	2b1e      	cmp	r3, #30
 80068ec:	d87e      	bhi.n	80069ec <UART_SetConfig+0x6c4>
 80068ee:	a201      	add	r2, pc, #4	@ (adr r2, 80068f4 <UART_SetConfig+0x5cc>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006977 	.word	0x08006977
 80068f8:	080069ed 	.word	0x080069ed
 80068fc:	0800697f 	.word	0x0800697f
 8006900:	080069ed 	.word	0x080069ed
 8006904:	080069ed 	.word	0x080069ed
 8006908:	080069ed 	.word	0x080069ed
 800690c:	0800698f 	.word	0x0800698f
 8006910:	080069ed 	.word	0x080069ed
 8006914:	080069ed 	.word	0x080069ed
 8006918:	080069ed 	.word	0x080069ed
 800691c:	080069ed 	.word	0x080069ed
 8006920:	080069ed 	.word	0x080069ed
 8006924:	080069ed 	.word	0x080069ed
 8006928:	080069ed 	.word	0x080069ed
 800692c:	0800699f 	.word	0x0800699f
 8006930:	080069ed 	.word	0x080069ed
 8006934:	080069ed 	.word	0x080069ed
 8006938:	080069ed 	.word	0x080069ed
 800693c:	080069ed 	.word	0x080069ed
 8006940:	080069ed 	.word	0x080069ed
 8006944:	080069ed 	.word	0x080069ed
 8006948:	080069ed 	.word	0x080069ed
 800694c:	080069ed 	.word	0x080069ed
 8006950:	080069ed 	.word	0x080069ed
 8006954:	080069ed 	.word	0x080069ed
 8006958:	080069ed 	.word	0x080069ed
 800695c:	080069ed 	.word	0x080069ed
 8006960:	080069ed 	.word	0x080069ed
 8006964:	080069ed 	.word	0x080069ed
 8006968:	080069ed 	.word	0x080069ed
 800696c:	080069df 	.word	0x080069df
 8006970:	2b40      	cmp	r3, #64	@ 0x40
 8006972:	d037      	beq.n	80069e4 <UART_SetConfig+0x6bc>
 8006974:	e03a      	b.n	80069ec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006976:	f7fe f931 	bl	8004bdc <HAL_RCCEx_GetD3PCLK1Freq>
 800697a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800697c:	e03c      	b.n	80069f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800697e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006982:	4618      	mov	r0, r3
 8006984:	f7fe f940 	bl	8004c08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800698a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800698c:	e034      	b.n	80069f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800698e:	f107 0318 	add.w	r3, r7, #24
 8006992:	4618      	mov	r0, r3
 8006994:	f7fe fa8c 	bl	8004eb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800699c:	e02c      	b.n	80069f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800699e:	4b09      	ldr	r3, [pc, #36]	@ (80069c4 <UART_SetConfig+0x69c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d016      	beq.n	80069d8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069aa:	4b06      	ldr	r3, [pc, #24]	@ (80069c4 <UART_SetConfig+0x69c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	08db      	lsrs	r3, r3, #3
 80069b0:	f003 0303 	and.w	r3, r3, #3
 80069b4:	4a07      	ldr	r2, [pc, #28]	@ (80069d4 <UART_SetConfig+0x6ac>)
 80069b6:	fa22 f303 	lsr.w	r3, r2, r3
 80069ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069bc:	e01c      	b.n	80069f8 <UART_SetConfig+0x6d0>
 80069be:	bf00      	nop
 80069c0:	40011400 	.word	0x40011400
 80069c4:	58024400 	.word	0x58024400
 80069c8:	40007800 	.word	0x40007800
 80069cc:	40007c00 	.word	0x40007c00
 80069d0:	58000c00 	.word	0x58000c00
 80069d4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80069d8:	4b9d      	ldr	r3, [pc, #628]	@ (8006c50 <UART_SetConfig+0x928>)
 80069da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069dc:	e00c      	b.n	80069f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069de:	4b9d      	ldr	r3, [pc, #628]	@ (8006c54 <UART_SetConfig+0x92c>)
 80069e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069e2:	e009      	b.n	80069f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80069ea:	e005      	b.n	80069f8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80069f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 81de 	beq.w	8006dbc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a04:	4a94      	ldr	r2, [pc, #592]	@ (8006c58 <UART_SetConfig+0x930>)
 8006a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a12:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	4413      	add	r3, r2
 8006a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d305      	bcc.n	8006a30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d903      	bls.n	8006a38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006a36:	e1c1      	b.n	8006dbc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	60bb      	str	r3, [r7, #8]
 8006a3e:	60fa      	str	r2, [r7, #12]
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a44:	4a84      	ldr	r2, [pc, #528]	@ (8006c58 <UART_SetConfig+0x930>)
 8006a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	607a      	str	r2, [r7, #4]
 8006a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006a5a:	f7f9 fc41 	bl	80002e0 <__aeabi_uldivmod>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4610      	mov	r0, r2
 8006a64:	4619      	mov	r1, r3
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	f04f 0300 	mov.w	r3, #0
 8006a6e:	020b      	lsls	r3, r1, #8
 8006a70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a74:	0202      	lsls	r2, r0, #8
 8006a76:	6979      	ldr	r1, [r7, #20]
 8006a78:	6849      	ldr	r1, [r1, #4]
 8006a7a:	0849      	lsrs	r1, r1, #1
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	460c      	mov	r4, r1
 8006a80:	4605      	mov	r5, r0
 8006a82:	eb12 0804 	adds.w	r8, r2, r4
 8006a86:	eb43 0905 	adc.w	r9, r3, r5
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	469a      	mov	sl, r3
 8006a92:	4693      	mov	fp, r2
 8006a94:	4652      	mov	r2, sl
 8006a96:	465b      	mov	r3, fp
 8006a98:	4640      	mov	r0, r8
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	f7f9 fc20 	bl	80002e0 <__aeabi_uldivmod>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aaa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006aae:	d308      	bcc.n	8006ac2 <UART_SetConfig+0x79a>
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ab6:	d204      	bcs.n	8006ac2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006abe:	60da      	str	r2, [r3, #12]
 8006ac0:	e17c      	b.n	8006dbc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006ac8:	e178      	b.n	8006dbc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ad2:	f040 80c5 	bne.w	8006c60 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006ad6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006ada:	2b20      	cmp	r3, #32
 8006adc:	dc48      	bgt.n	8006b70 <UART_SetConfig+0x848>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	db7b      	blt.n	8006bda <UART_SetConfig+0x8b2>
 8006ae2:	2b20      	cmp	r3, #32
 8006ae4:	d879      	bhi.n	8006bda <UART_SetConfig+0x8b2>
 8006ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aec <UART_SetConfig+0x7c4>)
 8006ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aec:	08006b77 	.word	0x08006b77
 8006af0:	08006b7f 	.word	0x08006b7f
 8006af4:	08006bdb 	.word	0x08006bdb
 8006af8:	08006bdb 	.word	0x08006bdb
 8006afc:	08006b87 	.word	0x08006b87
 8006b00:	08006bdb 	.word	0x08006bdb
 8006b04:	08006bdb 	.word	0x08006bdb
 8006b08:	08006bdb 	.word	0x08006bdb
 8006b0c:	08006b97 	.word	0x08006b97
 8006b10:	08006bdb 	.word	0x08006bdb
 8006b14:	08006bdb 	.word	0x08006bdb
 8006b18:	08006bdb 	.word	0x08006bdb
 8006b1c:	08006bdb 	.word	0x08006bdb
 8006b20:	08006bdb 	.word	0x08006bdb
 8006b24:	08006bdb 	.word	0x08006bdb
 8006b28:	08006bdb 	.word	0x08006bdb
 8006b2c:	08006ba7 	.word	0x08006ba7
 8006b30:	08006bdb 	.word	0x08006bdb
 8006b34:	08006bdb 	.word	0x08006bdb
 8006b38:	08006bdb 	.word	0x08006bdb
 8006b3c:	08006bdb 	.word	0x08006bdb
 8006b40:	08006bdb 	.word	0x08006bdb
 8006b44:	08006bdb 	.word	0x08006bdb
 8006b48:	08006bdb 	.word	0x08006bdb
 8006b4c:	08006bdb 	.word	0x08006bdb
 8006b50:	08006bdb 	.word	0x08006bdb
 8006b54:	08006bdb 	.word	0x08006bdb
 8006b58:	08006bdb 	.word	0x08006bdb
 8006b5c:	08006bdb 	.word	0x08006bdb
 8006b60:	08006bdb 	.word	0x08006bdb
 8006b64:	08006bdb 	.word	0x08006bdb
 8006b68:	08006bdb 	.word	0x08006bdb
 8006b6c:	08006bcd 	.word	0x08006bcd
 8006b70:	2b40      	cmp	r3, #64	@ 0x40
 8006b72:	d02e      	beq.n	8006bd2 <UART_SetConfig+0x8aa>
 8006b74:	e031      	b.n	8006bda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b76:	f7fc fdb9 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8006b7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b7c:	e033      	b.n	8006be6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b7e:	f7fc fdcb 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 8006b82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006b84:	e02f      	b.n	8006be6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f7fe f83c 	bl	8004c08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006b94:	e027      	b.n	8006be6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b96:	f107 0318 	add.w	r3, r7, #24
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fe f988 	bl	8004eb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ba4:	e01f      	b.n	8006be6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8006c5c <UART_SetConfig+0x934>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d009      	beq.n	8006bc6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c5c <UART_SetConfig+0x934>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	08db      	lsrs	r3, r3, #3
 8006bb8:	f003 0303 	and.w	r3, r3, #3
 8006bbc:	4a24      	ldr	r2, [pc, #144]	@ (8006c50 <UART_SetConfig+0x928>)
 8006bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bc4:	e00f      	b.n	8006be6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006bc6:	4b22      	ldr	r3, [pc, #136]	@ (8006c50 <UART_SetConfig+0x928>)
 8006bc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bca:	e00c      	b.n	8006be6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bcc:	4b21      	ldr	r3, [pc, #132]	@ (8006c54 <UART_SetConfig+0x92c>)
 8006bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bd0:	e009      	b.n	8006be6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bd8:	e005      	b.n	8006be6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006be4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 80e7 	beq.w	8006dbc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf2:	4a19      	ldr	r2, [pc, #100]	@ (8006c58 <UART_SetConfig+0x930>)
 8006bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c00:	005a      	lsls	r2, r3, #1
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	085b      	lsrs	r3, r3, #1
 8006c08:	441a      	add	r2, r3
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c12:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c16:	2b0f      	cmp	r3, #15
 8006c18:	d916      	bls.n	8006c48 <UART_SetConfig+0x920>
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c20:	d212      	bcs.n	8006c48 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f023 030f 	bic.w	r3, r3, #15
 8006c2a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2e:	085b      	lsrs	r3, r3, #1
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	b29a      	uxth	r2, r3
 8006c38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006c44:	60da      	str	r2, [r3, #12]
 8006c46:	e0b9      	b.n	8006dbc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006c4e:	e0b5      	b.n	8006dbc <UART_SetConfig+0xa94>
 8006c50:	03d09000 	.word	0x03d09000
 8006c54:	003d0900 	.word	0x003d0900
 8006c58:	0800b4cc 	.word	0x0800b4cc
 8006c5c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006c60:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006c64:	2b20      	cmp	r3, #32
 8006c66:	dc49      	bgt.n	8006cfc <UART_SetConfig+0x9d4>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	db7c      	blt.n	8006d66 <UART_SetConfig+0xa3e>
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d87a      	bhi.n	8006d66 <UART_SetConfig+0xa3e>
 8006c70:	a201      	add	r2, pc, #4	@ (adr r2, 8006c78 <UART_SetConfig+0x950>)
 8006c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c76:	bf00      	nop
 8006c78:	08006d03 	.word	0x08006d03
 8006c7c:	08006d0b 	.word	0x08006d0b
 8006c80:	08006d67 	.word	0x08006d67
 8006c84:	08006d67 	.word	0x08006d67
 8006c88:	08006d13 	.word	0x08006d13
 8006c8c:	08006d67 	.word	0x08006d67
 8006c90:	08006d67 	.word	0x08006d67
 8006c94:	08006d67 	.word	0x08006d67
 8006c98:	08006d23 	.word	0x08006d23
 8006c9c:	08006d67 	.word	0x08006d67
 8006ca0:	08006d67 	.word	0x08006d67
 8006ca4:	08006d67 	.word	0x08006d67
 8006ca8:	08006d67 	.word	0x08006d67
 8006cac:	08006d67 	.word	0x08006d67
 8006cb0:	08006d67 	.word	0x08006d67
 8006cb4:	08006d67 	.word	0x08006d67
 8006cb8:	08006d33 	.word	0x08006d33
 8006cbc:	08006d67 	.word	0x08006d67
 8006cc0:	08006d67 	.word	0x08006d67
 8006cc4:	08006d67 	.word	0x08006d67
 8006cc8:	08006d67 	.word	0x08006d67
 8006ccc:	08006d67 	.word	0x08006d67
 8006cd0:	08006d67 	.word	0x08006d67
 8006cd4:	08006d67 	.word	0x08006d67
 8006cd8:	08006d67 	.word	0x08006d67
 8006cdc:	08006d67 	.word	0x08006d67
 8006ce0:	08006d67 	.word	0x08006d67
 8006ce4:	08006d67 	.word	0x08006d67
 8006ce8:	08006d67 	.word	0x08006d67
 8006cec:	08006d67 	.word	0x08006d67
 8006cf0:	08006d67 	.word	0x08006d67
 8006cf4:	08006d67 	.word	0x08006d67
 8006cf8:	08006d59 	.word	0x08006d59
 8006cfc:	2b40      	cmp	r3, #64	@ 0x40
 8006cfe:	d02e      	beq.n	8006d5e <UART_SetConfig+0xa36>
 8006d00:	e031      	b.n	8006d66 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d02:	f7fc fcf3 	bl	80036ec <HAL_RCC_GetPCLK1Freq>
 8006d06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d08:	e033      	b.n	8006d72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d0a:	f7fc fd05 	bl	8003718 <HAL_RCC_GetPCLK2Freq>
 8006d0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006d10:	e02f      	b.n	8006d72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fd ff76 	bl	8004c08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d20:	e027      	b.n	8006d72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d22:	f107 0318 	add.w	r3, r7, #24
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe f8c2 	bl	8004eb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d30:	e01f      	b.n	8006d72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d32:	4b2d      	ldr	r3, [pc, #180]	@ (8006de8 <UART_SetConfig+0xac0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d009      	beq.n	8006d52 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8006de8 <UART_SetConfig+0xac0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	08db      	lsrs	r3, r3, #3
 8006d44:	f003 0303 	and.w	r3, r3, #3
 8006d48:	4a28      	ldr	r2, [pc, #160]	@ (8006dec <UART_SetConfig+0xac4>)
 8006d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d50:	e00f      	b.n	8006d72 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006d52:	4b26      	ldr	r3, [pc, #152]	@ (8006dec <UART_SetConfig+0xac4>)
 8006d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d56:	e00c      	b.n	8006d72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d58:	4b25      	ldr	r3, [pc, #148]	@ (8006df0 <UART_SetConfig+0xac8>)
 8006d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d5c:	e009      	b.n	8006d72 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006d64:	e005      	b.n	8006d72 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006d66:	2300      	movs	r3, #0
 8006d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006d70:	bf00      	nop
    }

    if (pclk != 0U)
 8006d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d021      	beq.n	8006dbc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006df4 <UART_SetConfig+0xacc>)
 8006d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d82:	461a      	mov	r2, r3
 8006d84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d86:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	085b      	lsrs	r3, r3, #1
 8006d90:	441a      	add	r2, r3
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9e:	2b0f      	cmp	r3, #15
 8006da0:	d909      	bls.n	8006db6 <UART_SetConfig+0xa8e>
 8006da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006da8:	d205      	bcs.n	8006db6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	60da      	str	r2, [r3, #12]
 8006db4:	e002      	b.n	8006dbc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006dd8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3748      	adds	r7, #72	@ 0x48
 8006de0:	46bd      	mov	sp, r7
 8006de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006de6:	bf00      	nop
 8006de8:	58024400 	.word	0x58024400
 8006dec:	03d09000 	.word	0x03d09000
 8006df0:	003d0900 	.word	0x003d0900
 8006df4:	0800b4cc 	.word	0x0800b4cc

08006df8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e04:	f003 0308 	and.w	r3, r3, #8
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00a      	beq.n	8006e22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00a      	beq.n	8006e66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6a:	f003 0304 	and.w	r3, r3, #4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8c:	f003 0310 	and.w	r3, r3, #16
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00a      	beq.n	8006eaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	430a      	orrs	r2, r1
 8006eca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01a      	beq.n	8006f0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ef6:	d10a      	bne.n	8006f0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00a      	beq.n	8006f30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	605a      	str	r2, [r3, #4]
  }
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b098      	sub	sp, #96	@ 0x60
 8006f40:	af02      	add	r7, sp, #8
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f4c:	f7fa fb00 	bl	8001550 <HAL_GetTick>
 8006f50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0308 	and.w	r3, r3, #8
 8006f5c:	2b08      	cmp	r3, #8
 8006f5e:	d12f      	bne.n	8006fc0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f88e 	bl	8007090 <UART_WaitOnFlagUntilTimeout>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d022      	beq.n	8006fc0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	461a      	mov	r2, r3
 8006f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f9a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e6      	bne.n	8006f7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2220      	movs	r2, #32
 8006fb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e063      	b.n	8007088 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b04      	cmp	r3, #4
 8006fcc:	d149      	bne.n	8007062 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f857 	bl	8007090 <UART_WaitOnFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d03c      	beq.n	8007062 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007006:	633b      	str	r3, [r7, #48]	@ 0x30
 8007008:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800700c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e6      	bne.n	8006fe8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3308      	adds	r3, #8
 8007020:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	60fb      	str	r3, [r7, #12]
   return(result);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f023 0301 	bic.w	r3, r3, #1
 8007030:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3308      	adds	r3, #8
 8007038:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800703a:	61fa      	str	r2, [r7, #28]
 800703c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	69b9      	ldr	r1, [r7, #24]
 8007040:	69fa      	ldr	r2, [r7, #28]
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	617b      	str	r3, [r7, #20]
   return(result);
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e5      	bne.n	800701a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2220      	movs	r2, #32
 8007052:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e012      	b.n	8007088 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2220      	movs	r2, #32
 800706e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3758      	adds	r7, #88	@ 0x58
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	4613      	mov	r3, r2
 800709e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070a0:	e04f      	b.n	8007142 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a8:	d04b      	beq.n	8007142 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070aa:	f7fa fa51 	bl	8001550 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d302      	bcc.n	80070c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e04e      	b.n	8007162 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0304 	and.w	r3, r3, #4
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d037      	beq.n	8007142 <UART_WaitOnFlagUntilTimeout+0xb2>
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b80      	cmp	r3, #128	@ 0x80
 80070d6:	d034      	beq.n	8007142 <UART_WaitOnFlagUntilTimeout+0xb2>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2b40      	cmp	r3, #64	@ 0x40
 80070dc:	d031      	beq.n	8007142 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69db      	ldr	r3, [r3, #28]
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b08      	cmp	r3, #8
 80070ea:	d110      	bne.n	800710e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2208      	movs	r2, #8
 80070f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f95b 	bl	80073b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2208      	movs	r2, #8
 80070fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e029      	b.n	8007162 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800711c:	d111      	bne.n	8007142 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007126:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f941 	bl	80073b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e00f      	b.n	8007162 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	69da      	ldr	r2, [r3, #28]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4013      	ands	r3, r2
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	429a      	cmp	r2, r3
 8007150:	bf0c      	ite	eq
 8007152:	2301      	moveq	r3, #1
 8007154:	2300      	movne	r3, #0
 8007156:	b2db      	uxtb	r3, r3
 8007158:	461a      	mov	r2, r3
 800715a:	79fb      	ldrb	r3, [r7, #7]
 800715c:	429a      	cmp	r2, r3
 800715e:	d0a0      	beq.n	80070a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800716c:	b480      	push	{r7}
 800716e:	b0a3      	sub	sp, #140	@ 0x8c
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	4613      	mov	r3, r2
 8007178:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	88fa      	ldrh	r2, [r7, #6]
 8007184:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	88fa      	ldrh	r2, [r7, #6]
 800718c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800719e:	d10e      	bne.n	80071be <UART_Start_Receive_IT+0x52>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d105      	bne.n	80071b4 <UART_Start_Receive_IT+0x48>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80071ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071b2:	e02d      	b.n	8007210 <UART_Start_Receive_IT+0xa4>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	22ff      	movs	r2, #255	@ 0xff
 80071b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071bc:	e028      	b.n	8007210 <UART_Start_Receive_IT+0xa4>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10d      	bne.n	80071e2 <UART_Start_Receive_IT+0x76>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d104      	bne.n	80071d8 <UART_Start_Receive_IT+0x6c>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	22ff      	movs	r2, #255	@ 0xff
 80071d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071d6:	e01b      	b.n	8007210 <UART_Start_Receive_IT+0xa4>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	227f      	movs	r2, #127	@ 0x7f
 80071dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071e0:	e016      	b.n	8007210 <UART_Start_Receive_IT+0xa4>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071ea:	d10d      	bne.n	8007208 <UART_Start_Receive_IT+0x9c>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d104      	bne.n	80071fe <UART_Start_Receive_IT+0x92>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	227f      	movs	r2, #127	@ 0x7f
 80071f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071fc:	e008      	b.n	8007210 <UART_Start_Receive_IT+0xa4>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	223f      	movs	r2, #63	@ 0x3f
 8007202:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007206:	e003      	b.n	8007210 <UART_Start_Receive_IT+0xa4>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2222      	movs	r2, #34	@ 0x22
 800721c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3308      	adds	r3, #8
 8007226:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800722a:	e853 3f00 	ldrex	r3, [r3]
 800722e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007230:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007232:	f043 0301 	orr.w	r3, r3, #1
 8007236:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3308      	adds	r3, #8
 8007240:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007244:	673a      	str	r2, [r7, #112]	@ 0x70
 8007246:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007248:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800724a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800724c:	e841 2300 	strex	r3, r2, [r1]
 8007250:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007252:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e3      	bne.n	8007220 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800725c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007260:	d14f      	bne.n	8007302 <UART_Start_Receive_IT+0x196>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007268:	88fa      	ldrh	r2, [r7, #6]
 800726a:	429a      	cmp	r2, r3
 800726c:	d349      	bcc.n	8007302 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007276:	d107      	bne.n	8007288 <UART_Start_Receive_IT+0x11c>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d103      	bne.n	8007288 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4a47      	ldr	r2, [pc, #284]	@ (80073a0 <UART_Start_Receive_IT+0x234>)
 8007284:	675a      	str	r2, [r3, #116]	@ 0x74
 8007286:	e002      	b.n	800728e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4a46      	ldr	r2, [pc, #280]	@ (80073a4 <UART_Start_Receive_IT+0x238>)
 800728c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d01a      	beq.n	80072cc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800729e:	e853 3f00 	ldrex	r3, [r3]
 80072a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80072a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80072b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80072ba:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072bc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80072be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80072c0:	e841 2300 	strex	r3, r2, [r1]
 80072c4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80072c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d1e4      	bne.n	8007296 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3308      	adds	r3, #8
 80072d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3308      	adds	r3, #8
 80072ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80072ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 80072ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80072f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80072fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e5      	bne.n	80072cc <UART_Start_Receive_IT+0x160>
 8007300:	e046      	b.n	8007390 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800730a:	d107      	bne.n	800731c <UART_Start_Receive_IT+0x1b0>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d103      	bne.n	800731c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4a24      	ldr	r2, [pc, #144]	@ (80073a8 <UART_Start_Receive_IT+0x23c>)
 8007318:	675a      	str	r2, [r3, #116]	@ 0x74
 800731a:	e002      	b.n	8007322 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4a23      	ldr	r2, [pc, #140]	@ (80073ac <UART_Start_Receive_IT+0x240>)
 8007320:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d019      	beq.n	800735e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007332:	e853 3f00 	ldrex	r3, [r3]
 8007336:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800733e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007348:	637b      	str	r3, [r7, #52]	@ 0x34
 800734a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800734e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007350:	e841 2300 	strex	r3, r2, [r1]
 8007354:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1e6      	bne.n	800732a <UART_Start_Receive_IT+0x1be>
 800735c:	e018      	b.n	8007390 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	e853 3f00 	ldrex	r3, [r3]
 800736a:	613b      	str	r3, [r7, #16]
   return(result);
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f043 0320 	orr.w	r3, r3, #32
 8007372:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800737c:	623b      	str	r3, [r7, #32]
 800737e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	69f9      	ldr	r1, [r7, #28]
 8007382:	6a3a      	ldr	r2, [r7, #32]
 8007384:	e841 2300 	strex	r3, r2, [r1]
 8007388:	61bb      	str	r3, [r7, #24]
   return(result);
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1e6      	bne.n	800735e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	378c      	adds	r7, #140	@ 0x8c
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	08007bd1 	.word	0x08007bd1
 80073a4:	08007871 	.word	0x08007871
 80073a8:	080076b9 	.word	0x080076b9
 80073ac:	08007501 	.word	0x08007501

080073b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b095      	sub	sp, #84	@ 0x54
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80073c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80073cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	461a      	mov	r2, r3
 80073d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80073d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80073dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073de:	e841 2300 	strex	r3, r2, [r1]
 80073e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1e6      	bne.n	80073b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3308      	adds	r3, #8
 80073f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80073fa:	69fa      	ldr	r2, [r7, #28]
 80073fc:	4b1e      	ldr	r3, [pc, #120]	@ (8007478 <UART_EndRxTransfer+0xc8>)
 80073fe:	4013      	ands	r3, r2
 8007400:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	3308      	adds	r3, #8
 8007408:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800740a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800740c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007412:	e841 2300 	strex	r3, r2, [r1]
 8007416:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1e5      	bne.n	80073ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007422:	2b01      	cmp	r3, #1
 8007424:	d118      	bne.n	8007458 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	e853 3f00 	ldrex	r3, [r3]
 8007432:	60bb      	str	r3, [r7, #8]
   return(result);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f023 0310 	bic.w	r3, r3, #16
 800743a:	647b      	str	r3, [r7, #68]	@ 0x44
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	461a      	mov	r2, r3
 8007442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007444:	61bb      	str	r3, [r7, #24]
 8007446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007448:	6979      	ldr	r1, [r7, #20]
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	e841 2300 	strex	r3, r2, [r1]
 8007450:	613b      	str	r3, [r7, #16]
   return(result);
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d1e6      	bne.n	8007426 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800746c:	bf00      	nop
 800746e:	3754      	adds	r7, #84	@ 0x54
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	effffffe 	.word	0xeffffffe

0800747c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007488:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7fe ff3a 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074a0:	bf00      	nop
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b088      	sub	sp, #32
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074c4:	61fb      	str	r3, [r7, #28]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	61bb      	str	r3, [r7, #24]
 80074d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d2:	6979      	ldr	r1, [r7, #20]
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	613b      	str	r3, [r7, #16]
   return(result);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e6      	bne.n	80074b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f7fe fefb 	bl	80062ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074f6:	bf00      	nop
 80074f8:	3720      	adds	r7, #32
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b09c      	sub	sp, #112	@ 0x70
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800750e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007518:	2b22      	cmp	r3, #34	@ 0x22
 800751a:	f040 80be 	bne.w	800769a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007524:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007528:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800752c:	b2d9      	uxtb	r1, r3
 800752e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007532:	b2da      	uxtb	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007538:	400a      	ands	r2, r1
 800753a:	b2d2      	uxtb	r2, r2
 800753c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	f040 80a1 	bne.w	80076aa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007578:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800757c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007586:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007588:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800758c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e6      	bne.n	8007568 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3308      	adds	r3, #8
 80075a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ac:	f023 0301 	bic.w	r3, r3, #1
 80075b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3308      	adds	r3, #8
 80075b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80075ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80075bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1e5      	bne.n	800759a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a33      	ldr	r2, [pc, #204]	@ (80076b4 <UART_RxISR_8BIT+0x1b4>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d01f      	beq.n	800762c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d018      	beq.n	800762c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	623b      	str	r3, [r7, #32]
   return(result);
 8007608:	6a3b      	ldr	r3, [r7, #32]
 800760a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800760e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	461a      	mov	r2, r3
 8007616:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007618:	633b      	str	r3, [r7, #48]	@ 0x30
 800761a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800761e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e6      	bne.n	80075fa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007630:	2b01      	cmp	r3, #1
 8007632:	d12e      	bne.n	8007692 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	60fb      	str	r3, [r7, #12]
   return(result);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f023 0310 	bic.w	r3, r3, #16
 800764e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007658:	61fb      	str	r3, [r7, #28]
 800765a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	69b9      	ldr	r1, [r7, #24]
 800765e:	69fa      	ldr	r2, [r7, #28]
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	617b      	str	r3, [r7, #20]
   return(result);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e6      	bne.n	800763a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	f003 0310 	and.w	r3, r3, #16
 8007676:	2b10      	cmp	r3, #16
 8007678:	d103      	bne.n	8007682 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2210      	movs	r2, #16
 8007680:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007688:	4619      	mov	r1, r3
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7f8 ffa0 	bl	80005d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007690:	e00b      	b.n	80076aa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7fe fe34 	bl	8006300 <HAL_UART_RxCpltCallback>
}
 8007698:	e007      	b.n	80076aa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	699a      	ldr	r2, [r3, #24]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0208 	orr.w	r2, r2, #8
 80076a8:	619a      	str	r2, [r3, #24]
}
 80076aa:	bf00      	nop
 80076ac:	3770      	adds	r7, #112	@ 0x70
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	58000c00 	.word	0x58000c00

080076b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b09c      	sub	sp, #112	@ 0x70
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80076c6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076d0:	2b22      	cmp	r3, #34	@ 0x22
 80076d2:	f040 80be 	bne.w	8007852 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076dc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076e4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80076e6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80076ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80076ee:	4013      	ands	r3, r2
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076f4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076fa:	1c9a      	adds	r2, r3, #2
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007706:	b29b      	uxth	r3, r3
 8007708:	3b01      	subs	r3, #1
 800770a:	b29a      	uxth	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007718:	b29b      	uxth	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	f040 80a1 	bne.w	8007862 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800772e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007730:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007734:	667b      	str	r3, [r7, #100]	@ 0x64
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800773e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007740:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007744:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007746:	e841 2300 	strex	r3, r2, [r1]
 800774a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800774c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e6      	bne.n	8007720 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3308      	adds	r3, #8
 8007758:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007764:	f023 0301 	bic.w	r3, r3, #1
 8007768:	663b      	str	r3, [r7, #96]	@ 0x60
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3308      	adds	r3, #8
 8007770:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007772:	643a      	str	r2, [r7, #64]	@ 0x40
 8007774:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007776:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007778:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1e5      	bne.n	8007752 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2220      	movs	r2, #32
 800778a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a33      	ldr	r2, [pc, #204]	@ (800786c <UART_RxISR_16BIT+0x1b4>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d01f      	beq.n	80077e4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d018      	beq.n	80077e4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	61fb      	str	r3, [r7, #28]
   return(result);
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80077c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	461a      	mov	r2, r3
 80077ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077d2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e6      	bne.n	80077b2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d12e      	bne.n	800784a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	f023 0310 	bic.w	r3, r3, #16
 8007806:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6979      	ldr	r1, [r7, #20]
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	613b      	str	r3, [r7, #16]
   return(result);
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e6      	bne.n	80077f2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	f003 0310 	and.w	r3, r3, #16
 800782e:	2b10      	cmp	r3, #16
 8007830:	d103      	bne.n	800783a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2210      	movs	r2, #16
 8007838:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7f8 fec4 	bl	80005d0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007848:	e00b      	b.n	8007862 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7fe fd58 	bl	8006300 <HAL_UART_RxCpltCallback>
}
 8007850:	e007      	b.n	8007862 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699a      	ldr	r2, [r3, #24]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0208 	orr.w	r2, r2, #8
 8007860:	619a      	str	r2, [r3, #24]
}
 8007862:	bf00      	nop
 8007864:	3770      	adds	r7, #112	@ 0x70
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	58000c00 	.word	0x58000c00

08007870 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b0ac      	sub	sp, #176	@ 0xb0
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800787e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078a6:	2b22      	cmp	r3, #34	@ 0x22
 80078a8:	f040 8180 	bne.w	8007bac <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80078b2:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078b6:	e123      	b.n	8007b00 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078be:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078c2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80078c6:	b2d9      	uxtb	r1, r3
 80078c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078d2:	400a      	ands	r2, r1
 80078d4:	b2d2      	uxtb	r2, r2
 80078d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80078fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007902:	f003 0307 	and.w	r3, r3, #7
 8007906:	2b00      	cmp	r3, #0
 8007908:	d053      	beq.n	80079b2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800790a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	d011      	beq.n	800793a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007916:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800791a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00b      	beq.n	800793a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2201      	movs	r2, #1
 8007928:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007930:	f043 0201 	orr.w	r2, r3, #1
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800793a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d011      	beq.n	800796a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00b      	beq.n	800796a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2202      	movs	r2, #2
 8007958:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007960:	f043 0204 	orr.w	r2, r3, #4
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800796a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800796e:	f003 0304 	and.w	r3, r3, #4
 8007972:	2b00      	cmp	r3, #0
 8007974:	d011      	beq.n	800799a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800797a:	f003 0301 	and.w	r3, r3, #1
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00b      	beq.n	800799a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2204      	movs	r2, #4
 8007988:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007990:	f043 0202 	orr.w	r2, r3, #2
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d006      	beq.n	80079b2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7fe fcb5 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f040 80a0 	bne.w	8007b00 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079c8:	e853 3f00 	ldrex	r3, [r3]
 80079cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80079ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	461a      	mov	r2, r3
 80079de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80079e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079e4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80079e8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80079f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e4      	bne.n	80079c0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3308      	adds	r3, #8
 80079fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007a06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a08:	4b6e      	ldr	r3, [pc, #440]	@ (8007bc4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3308      	adds	r3, #8
 8007a16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a1a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007a1c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007a20:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007a22:	e841 2300 	strex	r3, r2, [r1]
 8007a26:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007a28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1e3      	bne.n	80079f6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a60      	ldr	r2, [pc, #384]	@ (8007bc8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d021      	beq.n	8007a90 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d01a      	beq.n	8007a90 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a62:	e853 3f00 	ldrex	r3, [r3]
 8007a66:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007a7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a7e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007a82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e4      	bne.n	8007a5a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d130      	bne.n	8007afa <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aae:	f023 0310 	bic.w	r3, r3, #16
 8007ab2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ac0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ac2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ac6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ac8:	e841 2300 	strex	r3, r2, [r1]
 8007acc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1e4      	bne.n	8007a9e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	f003 0310 	and.w	r3, r3, #16
 8007ade:	2b10      	cmp	r3, #16
 8007ae0:	d103      	bne.n	8007aea <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2210      	movs	r2, #16
 8007ae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007af0:	4619      	mov	r1, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f7f8 fd6c 	bl	80005d0 <HAL_UARTEx_RxEventCallback>
 8007af8:	e002      	b.n	8007b00 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7fe fc00 	bl	8006300 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b00:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d006      	beq.n	8007b16 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8007b08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b0c:	f003 0320 	and.w	r3, r3, #32
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f47f aed1 	bne.w	80078b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b1c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007b20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d049      	beq.n	8007bbc <UART_RxISR_8BIT_FIFOEN+0x34c>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b2e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d242      	bcs.n	8007bbc <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3308      	adds	r3, #8
 8007b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	6a3b      	ldr	r3, [r7, #32]
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3308      	adds	r3, #8
 8007b56:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007b5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e3      	bne.n	8007b36 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a16      	ldr	r2, [pc, #88]	@ (8007bcc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007b72:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f043 0320 	orr.w	r3, r3, #32
 8007b88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	461a      	mov	r2, r3
 8007b92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b96:	61bb      	str	r3, [r7, #24]
 8007b98:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9a:	6979      	ldr	r1, [r7, #20]
 8007b9c:	69ba      	ldr	r2, [r7, #24]
 8007b9e:	e841 2300 	strex	r3, r2, [r1]
 8007ba2:	613b      	str	r3, [r7, #16]
   return(result);
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1e4      	bne.n	8007b74 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007baa:	e007      	b.n	8007bbc <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699a      	ldr	r2, [r3, #24]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0208 	orr.w	r2, r2, #8
 8007bba:	619a      	str	r2, [r3, #24]
}
 8007bbc:	bf00      	nop
 8007bbe:	37b0      	adds	r7, #176	@ 0xb0
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	effffffe 	.word	0xeffffffe
 8007bc8:	58000c00 	.word	0x58000c00
 8007bcc:	08007501 	.word	0x08007501

08007bd0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b0ae      	sub	sp, #184	@ 0xb8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007bde:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69db      	ldr	r3, [r3, #28]
 8007be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c06:	2b22      	cmp	r3, #34	@ 0x22
 8007c08:	f040 8184 	bne.w	8007f14 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007c12:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c16:	e127      	b.n	8007e68 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007c2a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007c2e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007c32:	4013      	ands	r3, r2
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007c3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c40:	1c9a      	adds	r2, r3, #2
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	b29a      	uxth	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c66:	f003 0307 	and.w	r3, r3, #7
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d053      	beq.n	8007d16 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d011      	beq.n	8007c9e <UART_RxISR_16BIT_FIFOEN+0xce>
 8007c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00b      	beq.n	8007c9e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c94:	f043 0201 	orr.w	r2, r3, #1
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ca2:	f003 0302 	and.w	r3, r3, #2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d011      	beq.n	8007cce <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007caa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00b      	beq.n	8007cce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cc4:	f043 0204 	orr.w	r2, r3, #4
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cd2:	f003 0304 	and.w	r3, r3, #4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d011      	beq.n	8007cfe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00b      	beq.n	8007cfe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2204      	movs	r2, #4
 8007cec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cf4:	f043 0202 	orr.w	r2, r3, #2
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d006      	beq.n	8007d16 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7fe fb03 	bl	8006314 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f040 80a2 	bne.w	8007e68 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d2c:	e853 3f00 	ldrex	r3, [r3]
 8007d30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007d32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	461a      	mov	r2, r3
 8007d42:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d46:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e2      	bne.n	8007d24 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3308      	adds	r3, #8
 8007d64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d68:	e853 3f00 	ldrex	r3, [r3]
 8007d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d6e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007d70:	4b6e      	ldr	r3, [pc, #440]	@ (8007f2c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007d72:	4013      	ands	r3, r2
 8007d74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007d82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e3      	bne.n	8007d5e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a60      	ldr	r2, [pc, #384]	@ (8007f30 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d021      	beq.n	8007df8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d01a      	beq.n	8007df8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007dca:	e853 3f00 	ldrex	r3, [r3]
 8007dce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007dd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dd2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007dd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007de4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007de6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007dea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007dec:	e841 2300 	strex	r3, r2, [r1]
 8007df0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007df2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e4      	bne.n	8007dc2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d130      	bne.n	8007e62 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e16:	f023 0310 	bic.w	r3, r3, #16
 8007e1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	461a      	mov	r2, r3
 8007e24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007e28:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e30:	e841 2300 	strex	r3, r2, [r1]
 8007e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1e4      	bne.n	8007e06 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	f003 0310 	and.w	r3, r3, #16
 8007e46:	2b10      	cmp	r3, #16
 8007e48:	d103      	bne.n	8007e52 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2210      	movs	r2, #16
 8007e50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f7f8 fbb8 	bl	80005d0 <HAL_UARTEx_RxEventCallback>
 8007e60:	e002      	b.n	8007e68 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7fe fa4c 	bl	8006300 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e68:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d006      	beq.n	8007e7e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007e70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e74:	f003 0320 	and.w	r3, r3, #32
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f47f aecd 	bne.w	8007c18 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e84:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e88:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d049      	beq.n	8007f24 <UART_RxISR_16BIT_FIFOEN+0x354>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007e96:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d242      	bcs.n	8007f24 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	3308      	adds	r3, #8
 8007ea4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea8:	e853 3f00 	ldrex	r3, [r3]
 8007eac:	623b      	str	r3, [r7, #32]
   return(result);
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007ec2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eca:	e841 2300 	strex	r3, r2, [r1]
 8007ece:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d1e3      	bne.n	8007e9e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a16      	ldr	r2, [pc, #88]	@ (8007f34 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007eda:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f043 0320 	orr.w	r3, r3, #32
 8007ef0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007efe:	61fb      	str	r3, [r7, #28]
 8007f00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f02:	69b9      	ldr	r1, [r7, #24]
 8007f04:	69fa      	ldr	r2, [r7, #28]
 8007f06:	e841 2300 	strex	r3, r2, [r1]
 8007f0a:	617b      	str	r3, [r7, #20]
   return(result);
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1e4      	bne.n	8007edc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f12:	e007      	b.n	8007f24 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699a      	ldr	r2, [r3, #24]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f042 0208 	orr.w	r2, r2, #8
 8007f22:	619a      	str	r2, [r3, #24]
}
 8007f24:	bf00      	nop
 8007f26:	37b8      	adds	r7, #184	@ 0xb8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	effffffe 	.word	0xeffffffe
 8007f30:	58000c00 	.word	0x58000c00
 8007f34:	080076b9 	.word	0x080076b9

08007f38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d101      	bne.n	8007f8a <HAL_UARTEx_DisableFifoMode+0x16>
 8007f86:	2302      	movs	r3, #2
 8007f88:	e027      	b.n	8007fda <HAL_UARTEx_DisableFifoMode+0x66>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2224      	movs	r2, #36	@ 0x24
 8007f96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0201 	bic.w	r2, r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007fb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr

08007fe6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d101      	bne.n	8007ffe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e02d      	b.n	800805a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2224      	movs	r2, #36	@ 0x24
 800800a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f022 0201 	bic.w	r2, r2, #1
 8008024:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	430a      	orrs	r2, r1
 8008038:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f8a0 	bl	8008180 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2220      	movs	r2, #32
 800804c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008072:	2b01      	cmp	r3, #1
 8008074:	d101      	bne.n	800807a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008076:	2302      	movs	r3, #2
 8008078:	e02d      	b.n	80080d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2224      	movs	r2, #36	@ 0x24
 8008086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f022 0201 	bic.w	r2, r2, #1
 80080a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	430a      	orrs	r2, r1
 80080b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 f862 	bl	8008180 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2220      	movs	r2, #32
 80080c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080de:	b580      	push	{r7, lr}
 80080e0:	b08c      	sub	sp, #48	@ 0x30
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	60f8      	str	r0, [r7, #12]
 80080e6:	60b9      	str	r1, [r7, #8]
 80080e8:	4613      	mov	r3, r2
 80080ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80080ec:	2300      	movs	r3, #0
 80080ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080f8:	2b20      	cmp	r3, #32
 80080fa:	d13b      	bne.n	8008174 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8008102:	88fb      	ldrh	r3, [r7, #6]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d101      	bne.n	800810c <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e034      	b.n	8008176 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2201      	movs	r2, #1
 8008110:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	671a      	str	r2, [r3, #112]	@ 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8008118:	88fb      	ldrh	r3, [r7, #6]
 800811a:	461a      	mov	r2, r3
 800811c:	68b9      	ldr	r1, [r7, #8]
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f7ff f824 	bl	800716c <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008128:	2b01      	cmp	r3, #1
 800812a:	d11d      	bne.n	8008168 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2210      	movs	r2, #16
 8008132:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	e853 3f00 	ldrex	r3, [r3]
 8008140:	617b      	str	r3, [r7, #20]
   return(result);
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f043 0310 	orr.w	r3, r3, #16
 8008148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	461a      	mov	r2, r3
 8008150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008152:	627b      	str	r3, [r7, #36]	@ 0x24
 8008154:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	6a39      	ldr	r1, [r7, #32]
 8008158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008160:	69fb      	ldr	r3, [r7, #28]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e6      	bne.n	8008134 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8008166:	e002      	b.n	800816e <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800816e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008172:	e000      	b.n	8008176 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8008174:	2302      	movs	r3, #2
  }
}
 8008176:	4618      	mov	r0, r3
 8008178:	3730      	adds	r7, #48	@ 0x30
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
	...

08008180 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800818c:	2b00      	cmp	r3, #0
 800818e:	d108      	bne.n	80081a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081a0:	e031      	b.n	8008206 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081a2:	2310      	movs	r3, #16
 80081a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081a6:	2310      	movs	r3, #16
 80081a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	0e5b      	lsrs	r3, r3, #25
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	f003 0307 	and.w	r3, r3, #7
 80081b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	0f5b      	lsrs	r3, r3, #29
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	f003 0307 	and.w	r3, r3, #7
 80081c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	7b3a      	ldrb	r2, [r7, #12]
 80081ce:	4911      	ldr	r1, [pc, #68]	@ (8008214 <UARTEx_SetNbDataToProcess+0x94>)
 80081d0:	5c8a      	ldrb	r2, [r1, r2]
 80081d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80081d6:	7b3a      	ldrb	r2, [r7, #12]
 80081d8:	490f      	ldr	r1, [pc, #60]	@ (8008218 <UARTEx_SetNbDataToProcess+0x98>)
 80081da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80081dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
 80081ea:	7b7a      	ldrb	r2, [r7, #13]
 80081ec:	4909      	ldr	r1, [pc, #36]	@ (8008214 <UARTEx_SetNbDataToProcess+0x94>)
 80081ee:	5c8a      	ldrb	r2, [r1, r2]
 80081f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80081f4:	7b7a      	ldrb	r2, [r7, #13]
 80081f6:	4908      	ldr	r1, [pc, #32]	@ (8008218 <UARTEx_SetNbDataToProcess+0x98>)
 80081f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80081fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80081fe:	b29a      	uxth	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008206:	bf00      	nop
 8008208:	3714      	adds	r7, #20
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	0800b4e4 	.word	0x0800b4e4
 8008218:	0800b4ec 	.word	0x0800b4ec

0800821c <__NVIC_SetPriority>:
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	6039      	str	r1, [r7, #0]
 8008226:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800822c:	2b00      	cmp	r3, #0
 800822e:	db0a      	blt.n	8008246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	b2da      	uxtb	r2, r3
 8008234:	490c      	ldr	r1, [pc, #48]	@ (8008268 <__NVIC_SetPriority+0x4c>)
 8008236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800823a:	0112      	lsls	r2, r2, #4
 800823c:	b2d2      	uxtb	r2, r2
 800823e:	440b      	add	r3, r1
 8008240:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008244:	e00a      	b.n	800825c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	b2da      	uxtb	r2, r3
 800824a:	4908      	ldr	r1, [pc, #32]	@ (800826c <__NVIC_SetPriority+0x50>)
 800824c:	88fb      	ldrh	r3, [r7, #6]
 800824e:	f003 030f 	and.w	r3, r3, #15
 8008252:	3b04      	subs	r3, #4
 8008254:	0112      	lsls	r2, r2, #4
 8008256:	b2d2      	uxtb	r2, r2
 8008258:	440b      	add	r3, r1
 800825a:	761a      	strb	r2, [r3, #24]
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	e000e100 	.word	0xe000e100
 800826c:	e000ed00 	.word	0xe000ed00

08008270 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008274:	4b05      	ldr	r3, [pc, #20]	@ (800828c <SysTick_Handler+0x1c>)
 8008276:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008278:	f001 ff06 	bl	800a088 <xTaskGetSchedulerState>
 800827c:	4603      	mov	r3, r0
 800827e:	2b01      	cmp	r3, #1
 8008280:	d001      	beq.n	8008286 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008282:	f002 fd01 	bl	800ac88 <xPortSysTickHandler>
  }
}
 8008286:	bf00      	nop
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	e000e010 	.word	0xe000e010

08008290 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008290:	b580      	push	{r7, lr}
 8008292:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008294:	2100      	movs	r1, #0
 8008296:	f06f 0004 	mvn.w	r0, #4
 800829a:	f7ff ffbf 	bl	800821c <__NVIC_SetPriority>
#endif
}
 800829e:	bf00      	nop
 80082a0:	bd80      	pop	{r7, pc}
	...

080082a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082aa:	f3ef 8305 	mrs	r3, IPSR
 80082ae:	603b      	str	r3, [r7, #0]
  return(result);
 80082b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80082b6:	f06f 0305 	mvn.w	r3, #5
 80082ba:	607b      	str	r3, [r7, #4]
 80082bc:	e00c      	b.n	80082d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80082be:	4b0a      	ldr	r3, [pc, #40]	@ (80082e8 <osKernelInitialize+0x44>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d105      	bne.n	80082d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80082c6:	4b08      	ldr	r3, [pc, #32]	@ (80082e8 <osKernelInitialize+0x44>)
 80082c8:	2201      	movs	r2, #1
 80082ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80082cc:	2300      	movs	r3, #0
 80082ce:	607b      	str	r3, [r7, #4]
 80082d0:	e002      	b.n	80082d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80082d2:	f04f 33ff 	mov.w	r3, #4294967295
 80082d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082d8:	687b      	ldr	r3, [r7, #4]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	24000328 	.word	0x24000328

080082ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082f2:	f3ef 8305 	mrs	r3, IPSR
 80082f6:	603b      	str	r3, [r7, #0]
  return(result);
 80082f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <osKernelStart+0x1a>
    stat = osErrorISR;
 80082fe:	f06f 0305 	mvn.w	r3, #5
 8008302:	607b      	str	r3, [r7, #4]
 8008304:	e010      	b.n	8008328 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008306:	4b0b      	ldr	r3, [pc, #44]	@ (8008334 <osKernelStart+0x48>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d109      	bne.n	8008322 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800830e:	f7ff ffbf 	bl	8008290 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008312:	4b08      	ldr	r3, [pc, #32]	@ (8008334 <osKernelStart+0x48>)
 8008314:	2202      	movs	r2, #2
 8008316:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008318:	f001 fa68 	bl	80097ec <vTaskStartScheduler>
      stat = osOK;
 800831c:	2300      	movs	r3, #0
 800831e:	607b      	str	r3, [r7, #4]
 8008320:	e002      	b.n	8008328 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008322:	f04f 33ff 	mov.w	r3, #4294967295
 8008326:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008328:	687b      	ldr	r3, [r7, #4]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	24000328 	.word	0x24000328

08008338 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008338:	b580      	push	{r7, lr}
 800833a:	b08e      	sub	sp, #56	@ 0x38
 800833c:	af04      	add	r7, sp, #16
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008344:	2300      	movs	r3, #0
 8008346:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008348:	f3ef 8305 	mrs	r3, IPSR
 800834c:	617b      	str	r3, [r7, #20]
  return(result);
 800834e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008350:	2b00      	cmp	r3, #0
 8008352:	d17e      	bne.n	8008452 <osThreadNew+0x11a>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d07b      	beq.n	8008452 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800835a:	2380      	movs	r3, #128	@ 0x80
 800835c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800835e:	2318      	movs	r3, #24
 8008360:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008366:	f04f 33ff 	mov.w	r3, #4294967295
 800836a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d045      	beq.n	80083fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <osThreadNew+0x48>
        name = attr->name;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d008      	beq.n	80083a6 <osThreadNew+0x6e>
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	2b38      	cmp	r3, #56	@ 0x38
 8008398:	d805      	bhi.n	80083a6 <osThreadNew+0x6e>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	f003 0301 	and.w	r3, r3, #1
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d001      	beq.n	80083aa <osThreadNew+0x72>
        return (NULL);
 80083a6:	2300      	movs	r3, #0
 80083a8:	e054      	b.n	8008454 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	695b      	ldr	r3, [r3, #20]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	089b      	lsrs	r3, r3, #2
 80083b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00e      	beq.n	80083e0 <osThreadNew+0xa8>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	2b5b      	cmp	r3, #91	@ 0x5b
 80083c8:	d90a      	bls.n	80083e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d006      	beq.n	80083e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <osThreadNew+0xa8>
        mem = 1;
 80083da:	2301      	movs	r3, #1
 80083dc:	61bb      	str	r3, [r7, #24]
 80083de:	e010      	b.n	8008402 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10c      	bne.n	8008402 <osThreadNew+0xca>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	68db      	ldr	r3, [r3, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d108      	bne.n	8008402 <osThreadNew+0xca>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d104      	bne.n	8008402 <osThreadNew+0xca>
          mem = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	61bb      	str	r3, [r7, #24]
 80083fc:	e001      	b.n	8008402 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d110      	bne.n	800842a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008410:	9202      	str	r2, [sp, #8]
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	6a3a      	ldr	r2, [r7, #32]
 800841c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f001 f808 	bl	8009434 <xTaskCreateStatic>
 8008424:	4603      	mov	r3, r0
 8008426:	613b      	str	r3, [r7, #16]
 8008428:	e013      	b.n	8008452 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d110      	bne.n	8008452 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	b29a      	uxth	r2, r3
 8008434:	f107 0310 	add.w	r3, r7, #16
 8008438:	9301      	str	r3, [sp, #4]
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f001 f856 	bl	80094f4 <xTaskCreate>
 8008448:	4603      	mov	r3, r0
 800844a:	2b01      	cmp	r3, #1
 800844c:	d001      	beq.n	8008452 <osThreadNew+0x11a>
            hTask = NULL;
 800844e:	2300      	movs	r3, #0
 8008450:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008452:	693b      	ldr	r3, [r7, #16]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3728      	adds	r7, #40	@ 0x28
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008464:	f3ef 8305 	mrs	r3, IPSR
 8008468:	60bb      	str	r3, [r7, #8]
  return(result);
 800846a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <osDelay+0x1c>
    stat = osErrorISR;
 8008470:	f06f 0305 	mvn.w	r3, #5
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	e007      	b.n	8008488 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008478:	2300      	movs	r3, #0
 800847a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d002      	beq.n	8008488 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f001 f97c 	bl	8009780 <vTaskDelay>
    }
  }

  return (stat);
 8008488:	68fb      	ldr	r3, [r7, #12]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008492:	b580      	push	{r7, lr}
 8008494:	b08a      	sub	sp, #40	@ 0x28
 8008496:	af02      	add	r7, sp, #8
 8008498:	60f8      	str	r0, [r7, #12]
 800849a:	60b9      	str	r1, [r7, #8]
 800849c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800849e:	2300      	movs	r3, #0
 80084a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084a2:	f3ef 8305 	mrs	r3, IPSR
 80084a6:	613b      	str	r3, [r7, #16]
  return(result);
 80084a8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d15f      	bne.n	800856e <osMessageQueueNew+0xdc>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d05c      	beq.n	800856e <osMessageQueueNew+0xdc>
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d059      	beq.n	800856e <osMessageQueueNew+0xdc>
    mem = -1;
 80084ba:	f04f 33ff 	mov.w	r3, #4294967295
 80084be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d029      	beq.n	800851a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d012      	beq.n	80084f4 <osMessageQueueNew+0x62>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	2b4f      	cmp	r3, #79	@ 0x4f
 80084d4:	d90e      	bls.n	80084f4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00a      	beq.n	80084f4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	695a      	ldr	r2, [r3, #20]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	68b9      	ldr	r1, [r7, #8]
 80084e6:	fb01 f303 	mul.w	r3, r1, r3
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d302      	bcc.n	80084f4 <osMessageQueueNew+0x62>
        mem = 1;
 80084ee:	2301      	movs	r3, #1
 80084f0:	61bb      	str	r3, [r7, #24]
 80084f2:	e014      	b.n	800851e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d110      	bne.n	800851e <osMessageQueueNew+0x8c>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10c      	bne.n	800851e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008508:	2b00      	cmp	r3, #0
 800850a:	d108      	bne.n	800851e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d104      	bne.n	800851e <osMessageQueueNew+0x8c>
          mem = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	61bb      	str	r3, [r7, #24]
 8008518:	e001      	b.n	800851e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d10b      	bne.n	800853c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	691a      	ldr	r2, [r3, #16]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	689b      	ldr	r3, [r3, #8]
 800852c:	2100      	movs	r1, #0
 800852e:	9100      	str	r1, [sp, #0]
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f000 fa30 	bl	8008998 <xQueueGenericCreateStatic>
 8008538:	61f8      	str	r0, [r7, #28]
 800853a:	e008      	b.n	800854e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d105      	bne.n	800854e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008542:	2200      	movs	r2, #0
 8008544:	68b9      	ldr	r1, [r7, #8]
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 faa3 	bl	8008a92 <xQueueGenericCreate>
 800854c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00c      	beq.n	800856e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <osMessageQueueNew+0xd0>
        name = attr->name;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	617b      	str	r3, [r7, #20]
 8008560:	e001      	b.n	8008566 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008566:	6979      	ldr	r1, [r7, #20]
 8008568:	69f8      	ldr	r0, [r7, #28]
 800856a:	f000 ff05 	bl	8009378 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800856e:	69fb      	ldr	r3, [r7, #28]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3720      	adds	r7, #32
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	603b      	str	r3, [r7, #0]
 8008584:	4613      	mov	r3, r2
 8008586:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800858c:	2300      	movs	r3, #0
 800858e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008590:	f3ef 8305 	mrs	r3, IPSR
 8008594:	617b      	str	r3, [r7, #20]
  return(result);
 8008596:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008598:	2b00      	cmp	r3, #0
 800859a:	d028      	beq.n	80085ee <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d005      	beq.n	80085ae <osMessageQueuePut+0x36>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <osMessageQueuePut+0x36>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80085ae:	f06f 0303 	mvn.w	r3, #3
 80085b2:	61fb      	str	r3, [r7, #28]
 80085b4:	e038      	b.n	8008628 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80085b6:	2300      	movs	r3, #0
 80085b8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80085ba:	f107 0210 	add.w	r2, r7, #16
 80085be:	2300      	movs	r3, #0
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	69b8      	ldr	r0, [r7, #24]
 80085c4:	f000 fbc6 	bl	8008d54 <xQueueGenericSendFromISR>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d003      	beq.n	80085d6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80085ce:	f06f 0302 	mvn.w	r3, #2
 80085d2:	61fb      	str	r3, [r7, #28]
 80085d4:	e028      	b.n	8008628 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d025      	beq.n	8008628 <osMessageQueuePut+0xb0>
 80085dc:	4b15      	ldr	r3, [pc, #84]	@ (8008634 <osMessageQueuePut+0xbc>)
 80085de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	e01c      	b.n	8008628 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <osMessageQueuePut+0x82>
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d103      	bne.n	8008602 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80085fa:	f06f 0303 	mvn.w	r3, #3
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	e012      	b.n	8008628 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008602:	2300      	movs	r3, #0
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	68b9      	ldr	r1, [r7, #8]
 8008608:	69b8      	ldr	r0, [r7, #24]
 800860a:	f000 faa1 	bl	8008b50 <xQueueGenericSend>
 800860e:	4603      	mov	r3, r0
 8008610:	2b01      	cmp	r3, #1
 8008612:	d009      	beq.n	8008628 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d003      	beq.n	8008622 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800861a:	f06f 0301 	mvn.w	r3, #1
 800861e:	61fb      	str	r3, [r7, #28]
 8008620:	e002      	b.n	8008628 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008622:	f06f 0302 	mvn.w	r3, #2
 8008626:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008628:	69fb      	ldr	r3, [r7, #28]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3720      	adds	r7, #32
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	e000ed04 	.word	0xe000ed04

08008638 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800864a:	2300      	movs	r3, #0
 800864c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800864e:	f3ef 8305 	mrs	r3, IPSR
 8008652:	617b      	str	r3, [r7, #20]
  return(result);
 8008654:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008656:	2b00      	cmp	r3, #0
 8008658:	d028      	beq.n	80086ac <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <osMessageQueueGet+0x34>
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d002      	beq.n	800866c <osMessageQueueGet+0x34>
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d003      	beq.n	8008674 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800866c:	f06f 0303 	mvn.w	r3, #3
 8008670:	61fb      	str	r3, [r7, #28]
 8008672:	e037      	b.n	80086e4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008674:	2300      	movs	r3, #0
 8008676:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008678:	f107 0310 	add.w	r3, r7, #16
 800867c:	461a      	mov	r2, r3
 800867e:	68b9      	ldr	r1, [r7, #8]
 8008680:	69b8      	ldr	r0, [r7, #24]
 8008682:	f000 fce7 	bl	8009054 <xQueueReceiveFromISR>
 8008686:	4603      	mov	r3, r0
 8008688:	2b01      	cmp	r3, #1
 800868a:	d003      	beq.n	8008694 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800868c:	f06f 0302 	mvn.w	r3, #2
 8008690:	61fb      	str	r3, [r7, #28]
 8008692:	e027      	b.n	80086e4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d024      	beq.n	80086e4 <osMessageQueueGet+0xac>
 800869a:	4b15      	ldr	r3, [pc, #84]	@ (80086f0 <osMessageQueueGet+0xb8>)
 800869c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	e01b      	b.n	80086e4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d002      	beq.n	80086b8 <osMessageQueueGet+0x80>
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d103      	bne.n	80086c0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80086b8:	f06f 0303 	mvn.w	r3, #3
 80086bc:	61fb      	str	r3, [r7, #28]
 80086be:	e011      	b.n	80086e4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	68b9      	ldr	r1, [r7, #8]
 80086c4:	69b8      	ldr	r0, [r7, #24]
 80086c6:	f000 fbe3 	bl	8008e90 <xQueueReceive>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d009      	beq.n	80086e4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80086d6:	f06f 0301 	mvn.w	r3, #1
 80086da:	61fb      	str	r3, [r7, #28]
 80086dc:	e002      	b.n	80086e4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80086de:	f06f 0302 	mvn.w	r3, #2
 80086e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80086e4:	69fb      	ldr	r3, [r7, #28]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3720      	adds	r7, #32
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	e000ed04 	.word	0xe000ed04

080086f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4a07      	ldr	r2, [pc, #28]	@ (8008720 <vApplicationGetIdleTaskMemory+0x2c>)
 8008704:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	4a06      	ldr	r2, [pc, #24]	@ (8008724 <vApplicationGetIdleTaskMemory+0x30>)
 800870a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2280      	movs	r2, #128	@ 0x80
 8008710:	601a      	str	r2, [r3, #0]
}
 8008712:	bf00      	nop
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	2400032c 	.word	0x2400032c
 8008724:	24000388 	.word	0x24000388

08008728 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	4a07      	ldr	r2, [pc, #28]	@ (8008754 <vApplicationGetTimerTaskMemory+0x2c>)
 8008738:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	4a06      	ldr	r2, [pc, #24]	@ (8008758 <vApplicationGetTimerTaskMemory+0x30>)
 800873e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008746:	601a      	str	r2, [r3, #0]
}
 8008748:	bf00      	nop
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	24000588 	.word	0x24000588
 8008758:	240005e4 	.word	0x240005e4

0800875c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f103 0208 	add.w	r2, r3, #8
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f04f 32ff 	mov.w	r2, #4294967295
 8008774:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f103 0208 	add.w	r2, r3, #8
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f103 0208 	add.w	r2, r3, #8
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80087aa:	bf00      	nop
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087b6:	b480      	push	{r7}
 80087b8:	b085      	sub	sp, #20
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	601a      	str	r2, [r3, #0]
}
 80087f2:	bf00      	nop
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087fe:	b480      	push	{r7}
 8008800:	b085      	sub	sp, #20
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008814:	d103      	bne.n	800881e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	60fb      	str	r3, [r7, #12]
 800881c:	e00c      	b.n	8008838 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	3308      	adds	r3, #8
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	e002      	b.n	800882c <vListInsert+0x2e>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	60fb      	str	r3, [r7, #12]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	429a      	cmp	r2, r3
 8008836:	d2f6      	bcs.n	8008826 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	1c5a      	adds	r2, r3, #1
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6892      	ldr	r2, [r2, #8]
 8008886:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	6852      	ldr	r2, [r2, #4]
 8008890:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	429a      	cmp	r2, r3
 800889a:	d103      	bne.n	80088a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	1e5a      	subs	r2, r3, #1
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b084      	sub	sp, #16
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10b      	bne.n	80088f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80088ea:	bf00      	nop
 80088ec:	bf00      	nop
 80088ee:	e7fd      	b.n	80088ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80088f0:	f002 f93a 	bl	800ab68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088fc:	68f9      	ldr	r1, [r7, #12]
 80088fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008900:	fb01 f303 	mul.w	r3, r1, r3
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008920:	3b01      	subs	r3, #1
 8008922:	68f9      	ldr	r1, [r7, #12]
 8008924:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008926:	fb01 f303 	mul.w	r3, r1, r3
 800892a:	441a      	add	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	22ff      	movs	r2, #255	@ 0xff
 8008934:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	22ff      	movs	r2, #255	@ 0xff
 800893c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d114      	bne.n	8008970 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d01a      	beq.n	8008984 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3310      	adds	r3, #16
 8008952:	4618      	mov	r0, r3
 8008954:	f001 f9d8 	bl	8009d08 <xTaskRemoveFromEventList>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d012      	beq.n	8008984 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800895e:	4b0d      	ldr	r3, [pc, #52]	@ (8008994 <xQueueGenericReset+0xd0>)
 8008960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	e009      	b.n	8008984 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3310      	adds	r3, #16
 8008974:	4618      	mov	r0, r3
 8008976:	f7ff fef1 	bl	800875c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	3324      	adds	r3, #36	@ 0x24
 800897e:	4618      	mov	r0, r3
 8008980:	f7ff feec 	bl	800875c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008984:	f002 f922 	bl	800abcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008988:	2301      	movs	r3, #1
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	e000ed04 	.word	0xe000ed04

08008998 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08e      	sub	sp, #56	@ 0x38
 800899c:	af02      	add	r7, sp, #8
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10b      	bne.n	80089c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b0:	f383 8811 	msr	BASEPRI, r3
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	f3bf 8f4f 	dsb	sy
 80089bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80089be:	bf00      	nop
 80089c0:	bf00      	nop
 80089c2:	e7fd      	b.n	80089c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10b      	bne.n	80089e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089dc:	bf00      	nop
 80089de:	bf00      	nop
 80089e0:	e7fd      	b.n	80089de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <xQueueGenericCreateStatic+0x56>
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <xQueueGenericCreateStatic+0x5a>
 80089ee:	2301      	movs	r3, #1
 80089f0:	e000      	b.n	80089f4 <xQueueGenericCreateStatic+0x5c>
 80089f2:	2300      	movs	r3, #0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10b      	bne.n	8008a10 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	623b      	str	r3, [r7, #32]
}
 8008a0a:	bf00      	nop
 8008a0c:	bf00      	nop
 8008a0e:	e7fd      	b.n	8008a0c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d102      	bne.n	8008a1c <xQueueGenericCreateStatic+0x84>
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d101      	bne.n	8008a20 <xQueueGenericCreateStatic+0x88>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e000      	b.n	8008a22 <xQueueGenericCreateStatic+0x8a>
 8008a20:	2300      	movs	r3, #0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10b      	bne.n	8008a3e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	61fb      	str	r3, [r7, #28]
}
 8008a38:	bf00      	nop
 8008a3a:	bf00      	nop
 8008a3c:	e7fd      	b.n	8008a3a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a3e:	2350      	movs	r3, #80	@ 0x50
 8008a40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	2b50      	cmp	r3, #80	@ 0x50
 8008a46:	d00b      	beq.n	8008a60 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	61bb      	str	r3, [r7, #24]
}
 8008a5a:	bf00      	nop
 8008a5c:	bf00      	nop
 8008a5e:	e7fd      	b.n	8008a5c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008a60:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00d      	beq.n	8008a88 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a74:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	68b9      	ldr	r1, [r7, #8]
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 f840 	bl	8008b08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3730      	adds	r7, #48	@ 0x30
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b08a      	sub	sp, #40	@ 0x28
 8008a96:	af02      	add	r7, sp, #8
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	60b9      	str	r1, [r7, #8]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10b      	bne.n	8008abe <xQueueGenericCreate+0x2c>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	613b      	str	r3, [r7, #16]
}
 8008ab8:	bf00      	nop
 8008aba:	bf00      	nop
 8008abc:	e7fd      	b.n	8008aba <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	fb02 f303 	mul.w	r3, r2, r3
 8008ac6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	3350      	adds	r3, #80	@ 0x50
 8008acc:	4618      	mov	r0, r3
 8008ace:	f002 f96d 	bl	800adac <pvPortMalloc>
 8008ad2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d011      	beq.n	8008afe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	3350      	adds	r3, #80	@ 0x50
 8008ae2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008aec:	79fa      	ldrb	r2, [r7, #7]
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	4613      	mov	r3, r2
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	68b9      	ldr	r1, [r7, #8]
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 f805 	bl	8008b08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008afe:	69bb      	ldr	r3, [r7, #24]
	}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3720      	adds	r7, #32
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d103      	bne.n	8008b24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	601a      	str	r2, [r3, #0]
 8008b22:	e002      	b.n	8008b2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b36:	2101      	movs	r1, #1
 8008b38:	69b8      	ldr	r0, [r7, #24]
 8008b3a:	f7ff fec3 	bl	80088c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	78fa      	ldrb	r2, [r7, #3]
 8008b42:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008b46:	bf00      	nop
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
	...

08008b50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08e      	sub	sp, #56	@ 0x38
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
 8008b5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10b      	bne.n	8008b84 <xQueueGenericSend+0x34>
	__asm volatile
 8008b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b70:	f383 8811 	msr	BASEPRI, r3
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008b7e:	bf00      	nop
 8008b80:	bf00      	nop
 8008b82:	e7fd      	b.n	8008b80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d103      	bne.n	8008b92 <xQueueGenericSend+0x42>
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <xQueueGenericSend+0x46>
 8008b92:	2301      	movs	r3, #1
 8008b94:	e000      	b.n	8008b98 <xQueueGenericSend+0x48>
 8008b96:	2300      	movs	r3, #0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d10b      	bne.n	8008bb4 <xQueueGenericSend+0x64>
	__asm volatile
 8008b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008bae:	bf00      	nop
 8008bb0:	bf00      	nop
 8008bb2:	e7fd      	b.n	8008bb0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d103      	bne.n	8008bc2 <xQueueGenericSend+0x72>
 8008bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d101      	bne.n	8008bc6 <xQueueGenericSend+0x76>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e000      	b.n	8008bc8 <xQueueGenericSend+0x78>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10b      	bne.n	8008be4 <xQueueGenericSend+0x94>
	__asm volatile
 8008bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	623b      	str	r3, [r7, #32]
}
 8008bde:	bf00      	nop
 8008be0:	bf00      	nop
 8008be2:	e7fd      	b.n	8008be0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008be4:	f001 fa50 	bl	800a088 <xTaskGetSchedulerState>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d102      	bne.n	8008bf4 <xQueueGenericSend+0xa4>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d101      	bne.n	8008bf8 <xQueueGenericSend+0xa8>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e000      	b.n	8008bfa <xQueueGenericSend+0xaa>
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10b      	bne.n	8008c16 <xQueueGenericSend+0xc6>
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	61fb      	str	r3, [r7, #28]
}
 8008c10:	bf00      	nop
 8008c12:	bf00      	nop
 8008c14:	e7fd      	b.n	8008c12 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c16:	f001 ffa7 	bl	800ab68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d302      	bcc.n	8008c2c <xQueueGenericSend+0xdc>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d129      	bne.n	8008c80 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c2c:	683a      	ldr	r2, [r7, #0]
 8008c2e:	68b9      	ldr	r1, [r7, #8]
 8008c30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c32:	f000 fa91 	bl	8009158 <prvCopyDataToQueue>
 8008c36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d010      	beq.n	8008c62 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c42:	3324      	adds	r3, #36	@ 0x24
 8008c44:	4618      	mov	r0, r3
 8008c46:	f001 f85f 	bl	8009d08 <xTaskRemoveFromEventList>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d013      	beq.n	8008c78 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008c50:	4b3f      	ldr	r3, [pc, #252]	@ (8008d50 <xQueueGenericSend+0x200>)
 8008c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	f3bf 8f4f 	dsb	sy
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	e00a      	b.n	8008c78 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d007      	beq.n	8008c78 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008c68:	4b39      	ldr	r3, [pc, #228]	@ (8008d50 <xQueueGenericSend+0x200>)
 8008c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008c78:	f001 ffa8 	bl	800abcc <vPortExitCritical>
				return pdPASS;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e063      	b.n	8008d48 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d103      	bne.n	8008c8e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c86:	f001 ffa1 	bl	800abcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	e05c      	b.n	8008d48 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d106      	bne.n	8008ca2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c94:	f107 0314 	add.w	r3, r7, #20
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f001 f899 	bl	8009dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ca2:	f001 ff93 	bl	800abcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ca6:	f000 fe09 	bl	80098bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008caa:	f001 ff5d 	bl	800ab68 <vPortEnterCritical>
 8008cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008cb4:	b25b      	sxtb	r3, r3
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cba:	d103      	bne.n	8008cc4 <xQueueGenericSend+0x174>
 8008cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008cca:	b25b      	sxtb	r3, r3
 8008ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd0:	d103      	bne.n	8008cda <xQueueGenericSend+0x18a>
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008cda:	f001 ff77 	bl	800abcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cde:	1d3a      	adds	r2, r7, #4
 8008ce0:	f107 0314 	add.w	r3, r7, #20
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f001 f888 	bl	8009dfc <xTaskCheckForTimeOut>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d124      	bne.n	8008d3c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008cf2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cf4:	f000 fb28 	bl	8009348 <prvIsQueueFull>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d018      	beq.n	8008d30 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d00:	3310      	adds	r3, #16
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	4611      	mov	r1, r2
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 ffac 	bl	8009c64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d0e:	f000 fab3 	bl	8009278 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d12:	f000 fde1 	bl	80098d8 <xTaskResumeAll>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f47f af7c 	bne.w	8008c16 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8008d50 <xQueueGenericSend+0x200>)
 8008d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	e772      	b.n	8008c16 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d32:	f000 faa1 	bl	8009278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d36:	f000 fdcf 	bl	80098d8 <xTaskResumeAll>
 8008d3a:	e76c      	b.n	8008c16 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008d3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d3e:	f000 fa9b 	bl	8009278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d42:	f000 fdc9 	bl	80098d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008d46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3738      	adds	r7, #56	@ 0x38
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	e000ed04 	.word	0xe000ed04

08008d54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b090      	sub	sp, #64	@ 0x40
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10b      	bne.n	8008d84 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d70:	f383 8811 	msr	BASEPRI, r3
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	f3bf 8f4f 	dsb	sy
 8008d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008d7e:	bf00      	nop
 8008d80:	bf00      	nop
 8008d82:	e7fd      	b.n	8008d80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d103      	bne.n	8008d92 <xQueueGenericSendFromISR+0x3e>
 8008d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <xQueueGenericSendFromISR+0x42>
 8008d92:	2301      	movs	r3, #1
 8008d94:	e000      	b.n	8008d98 <xQueueGenericSendFromISR+0x44>
 8008d96:	2300      	movs	r3, #0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10b      	bne.n	8008db4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008dae:	bf00      	nop
 8008db0:	bf00      	nop
 8008db2:	e7fd      	b.n	8008db0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d103      	bne.n	8008dc2 <xQueueGenericSendFromISR+0x6e>
 8008dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d101      	bne.n	8008dc6 <xQueueGenericSendFromISR+0x72>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e000      	b.n	8008dc8 <xQueueGenericSendFromISR+0x74>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10b      	bne.n	8008de4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	623b      	str	r3, [r7, #32]
}
 8008dde:	bf00      	nop
 8008de0:	bf00      	nop
 8008de2:	e7fd      	b.n	8008de0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008de4:	f001 ffa0 	bl	800ad28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008de8:	f3ef 8211 	mrs	r2, BASEPRI
 8008dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	61fa      	str	r2, [r7, #28]
 8008dfe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e00:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e02:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d302      	bcc.n	8008e16 <xQueueGenericSendFromISR+0xc2>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d12f      	bne.n	8008e76 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	68b9      	ldr	r1, [r7, #8]
 8008e2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008e2c:	f000 f994 	bl	8009158 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e30:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e38:	d112      	bne.n	8008e60 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d016      	beq.n	8008e70 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e44:	3324      	adds	r3, #36	@ 0x24
 8008e46:	4618      	mov	r0, r3
 8008e48:	f000 ff5e 	bl	8009d08 <xTaskRemoveFromEventList>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00e      	beq.n	8008e70 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00b      	beq.n	8008e70 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	e007      	b.n	8008e70 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008e60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008e64:	3301      	adds	r3, #1
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	b25a      	sxtb	r2, r3
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008e70:	2301      	movs	r3, #1
 8008e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008e74:	e001      	b.n	8008e7a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e7c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008e84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3740      	adds	r7, #64	@ 0x40
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b08c      	sub	sp, #48	@ 0x30
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d10b      	bne.n	8008ec2 <xQueueReceive+0x32>
	__asm volatile
 8008eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eae:	f383 8811 	msr	BASEPRI, r3
 8008eb2:	f3bf 8f6f 	isb	sy
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	623b      	str	r3, [r7, #32]
}
 8008ebc:	bf00      	nop
 8008ebe:	bf00      	nop
 8008ec0:	e7fd      	b.n	8008ebe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d103      	bne.n	8008ed0 <xQueueReceive+0x40>
 8008ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d101      	bne.n	8008ed4 <xQueueReceive+0x44>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e000      	b.n	8008ed6 <xQueueReceive+0x46>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d10b      	bne.n	8008ef2 <xQueueReceive+0x62>
	__asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	61fb      	str	r3, [r7, #28]
}
 8008eec:	bf00      	nop
 8008eee:	bf00      	nop
 8008ef0:	e7fd      	b.n	8008eee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ef2:	f001 f8c9 	bl	800a088 <xTaskGetSchedulerState>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d102      	bne.n	8008f02 <xQueueReceive+0x72>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <xQueueReceive+0x76>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e000      	b.n	8008f08 <xQueueReceive+0x78>
 8008f06:	2300      	movs	r3, #0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10b      	bne.n	8008f24 <xQueueReceive+0x94>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	61bb      	str	r3, [r7, #24]
}
 8008f1e:	bf00      	nop
 8008f20:	bf00      	nop
 8008f22:	e7fd      	b.n	8008f20 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f24:	f001 fe20 	bl	800ab68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f2c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d01f      	beq.n	8008f74 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f34:	68b9      	ldr	r1, [r7, #8]
 8008f36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f38:	f000 f978 	bl	800922c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3e:	1e5a      	subs	r2, r3, #1
 8008f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f42:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f46:	691b      	ldr	r3, [r3, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00f      	beq.n	8008f6c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4e:	3310      	adds	r3, #16
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 fed9 	bl	8009d08 <xTaskRemoveFromEventList>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d007      	beq.n	8008f6c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f5c:	4b3c      	ldr	r3, [pc, #240]	@ (8009050 <xQueueReceive+0x1c0>)
 8008f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f6c:	f001 fe2e 	bl	800abcc <vPortExitCritical>
				return pdPASS;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e069      	b.n	8009048 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d103      	bne.n	8008f82 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008f7a:	f001 fe27 	bl	800abcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	e062      	b.n	8009048 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d106      	bne.n	8008f96 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f88:	f107 0310 	add.w	r3, r7, #16
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 ff1f 	bl	8009dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f92:	2301      	movs	r3, #1
 8008f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f96:	f001 fe19 	bl	800abcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f9a:	f000 fc8f 	bl	80098bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f9e:	f001 fde3 	bl	800ab68 <vPortEnterCritical>
 8008fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008fa8:	b25b      	sxtb	r3, r3
 8008faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fae:	d103      	bne.n	8008fb8 <xQueueReceive+0x128>
 8008fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fbe:	b25b      	sxtb	r3, r3
 8008fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc4:	d103      	bne.n	8008fce <xQueueReceive+0x13e>
 8008fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fce:	f001 fdfd 	bl	800abcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fd2:	1d3a      	adds	r2, r7, #4
 8008fd4:	f107 0310 	add.w	r3, r7, #16
 8008fd8:	4611      	mov	r1, r2
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 ff0e 	bl	8009dfc <xTaskCheckForTimeOut>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d123      	bne.n	800902e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fe8:	f000 f998 	bl	800931c <prvIsQueueEmpty>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d017      	beq.n	8009022 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff4:	3324      	adds	r3, #36	@ 0x24
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f000 fe32 	bl	8009c64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009000:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009002:	f000 f939 	bl	8009278 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009006:	f000 fc67 	bl	80098d8 <xTaskResumeAll>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d189      	bne.n	8008f24 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009010:	4b0f      	ldr	r3, [pc, #60]	@ (8009050 <xQueueReceive+0x1c0>)
 8009012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	e780      	b.n	8008f24 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009024:	f000 f928 	bl	8009278 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009028:	f000 fc56 	bl	80098d8 <xTaskResumeAll>
 800902c:	e77a      	b.n	8008f24 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800902e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009030:	f000 f922 	bl	8009278 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009034:	f000 fc50 	bl	80098d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800903a:	f000 f96f 	bl	800931c <prvIsQueueEmpty>
 800903e:	4603      	mov	r3, r0
 8009040:	2b00      	cmp	r3, #0
 8009042:	f43f af6f 	beq.w	8008f24 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009046:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009048:	4618      	mov	r0, r3
 800904a:	3730      	adds	r7, #48	@ 0x30
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	e000ed04 	.word	0xe000ed04

08009054 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b08e      	sub	sp, #56	@ 0x38
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10b      	bne.n	8009082 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800906e:	f383 8811 	msr	BASEPRI, r3
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	f3bf 8f4f 	dsb	sy
 800907a:	623b      	str	r3, [r7, #32]
}
 800907c:	bf00      	nop
 800907e:	bf00      	nop
 8009080:	e7fd      	b.n	800907e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d103      	bne.n	8009090 <xQueueReceiveFromISR+0x3c>
 8009088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800908a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800908c:	2b00      	cmp	r3, #0
 800908e:	d101      	bne.n	8009094 <xQueueReceiveFromISR+0x40>
 8009090:	2301      	movs	r3, #1
 8009092:	e000      	b.n	8009096 <xQueueReceiveFromISR+0x42>
 8009094:	2300      	movs	r3, #0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10b      	bne.n	80090b2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	61fb      	str	r3, [r7, #28]
}
 80090ac:	bf00      	nop
 80090ae:	bf00      	nop
 80090b0:	e7fd      	b.n	80090ae <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090b2:	f001 fe39 	bl	800ad28 <vPortValidateInterruptPriority>
	__asm volatile
 80090b6:	f3ef 8211 	mrs	r2, BASEPRI
 80090ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	61ba      	str	r2, [r7, #24]
 80090cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80090ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80090d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d02f      	beq.n	800913e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80090de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80090e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090e8:	68b9      	ldr	r1, [r7, #8]
 80090ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80090ec:	f000 f89e 	bl	800922c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f2:	1e5a      	subs	r2, r3, #1
 80090f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80090f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80090fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009100:	d112      	bne.n	8009128 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d016      	beq.n	8009138 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800910a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910c:	3310      	adds	r3, #16
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fdfa 	bl	8009d08 <xTaskRemoveFromEventList>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00e      	beq.n	8009138 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00b      	beq.n	8009138 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	601a      	str	r2, [r3, #0]
 8009126:	e007      	b.n	8009138 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009128:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800912c:	3301      	adds	r3, #1
 800912e:	b2db      	uxtb	r3, r3
 8009130:	b25a      	sxtb	r2, r3
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009138:	2301      	movs	r3, #1
 800913a:	637b      	str	r3, [r7, #52]	@ 0x34
 800913c:	e001      	b.n	8009142 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800913e:	2300      	movs	r3, #0
 8009140:	637b      	str	r3, [r7, #52]	@ 0x34
 8009142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009144:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f383 8811 	msr	BASEPRI, r3
}
 800914c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800914e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009150:	4618      	mov	r0, r3
 8009152:	3738      	adds	r7, #56	@ 0x38
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}

08009158 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009164:	2300      	movs	r3, #0
 8009166:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10d      	bne.n	8009192 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d14d      	bne.n	800921a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	4618      	mov	r0, r3
 8009184:	f000 ff9e 	bl	800a0c4 <xTaskPriorityDisinherit>
 8009188:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	609a      	str	r2, [r3, #8]
 8009190:	e043      	b.n	800921a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d119      	bne.n	80091cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6858      	ldr	r0, [r3, #4]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a0:	461a      	mov	r2, r3
 80091a2:	68b9      	ldr	r1, [r7, #8]
 80091a4:	f002 f81c 	bl	800b1e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	685a      	ldr	r2, [r3, #4]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b0:	441a      	add	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	685a      	ldr	r2, [r3, #4]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d32b      	bcc.n	800921a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	605a      	str	r2, [r3, #4]
 80091ca:	e026      	b.n	800921a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	68d8      	ldr	r0, [r3, #12]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091d4:	461a      	mov	r2, r3
 80091d6:	68b9      	ldr	r1, [r7, #8]
 80091d8:	f002 f802 	bl	800b1e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	68da      	ldr	r2, [r3, #12]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091e4:	425b      	negs	r3, r3
 80091e6:	441a      	add	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	68da      	ldr	r2, [r3, #12]
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d207      	bcs.n	8009208 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009200:	425b      	negs	r3, r3
 8009202:	441a      	add	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b02      	cmp	r3, #2
 800920c:	d105      	bne.n	800921a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	3b01      	subs	r3, #1
 8009218:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	1c5a      	adds	r2, r3, #1
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009222:	697b      	ldr	r3, [r7, #20]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3718      	adds	r7, #24
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800923a:	2b00      	cmp	r3, #0
 800923c:	d018      	beq.n	8009270 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68da      	ldr	r2, [r3, #12]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009246:	441a      	add	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	68da      	ldr	r2, [r3, #12]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	429a      	cmp	r2, r3
 8009256:	d303      	bcc.n	8009260 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68d9      	ldr	r1, [r3, #12]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009268:	461a      	mov	r2, r3
 800926a:	6838      	ldr	r0, [r7, #0]
 800926c:	f001 ffb8 	bl	800b1e0 <memcpy>
	}
}
 8009270:	bf00      	nop
 8009272:	3708      	adds	r7, #8
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009280:	f001 fc72 	bl	800ab68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800928a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800928c:	e011      	b.n	80092b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009292:	2b00      	cmp	r3, #0
 8009294:	d012      	beq.n	80092bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	3324      	adds	r3, #36	@ 0x24
 800929a:	4618      	mov	r0, r3
 800929c:	f000 fd34 	bl	8009d08 <xTaskRemoveFromEventList>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d001      	beq.n	80092aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80092a6:	f000 fe0d 	bl	8009ec4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80092b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	dce9      	bgt.n	800928e <prvUnlockQueue+0x16>
 80092ba:	e000      	b.n	80092be <prvUnlockQueue+0x46>
					break;
 80092bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	22ff      	movs	r2, #255	@ 0xff
 80092c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80092c6:	f001 fc81 	bl	800abcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80092ca:	f001 fc4d 	bl	800ab68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80092d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092d6:	e011      	b.n	80092fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	691b      	ldr	r3, [r3, #16]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d012      	beq.n	8009306 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	3310      	adds	r3, #16
 80092e4:	4618      	mov	r0, r3
 80092e6:	f000 fd0f 	bl	8009d08 <xTaskRemoveFromEventList>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80092f0:	f000 fde8 	bl	8009ec4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80092f4:	7bbb      	ldrb	r3, [r7, #14]
 80092f6:	3b01      	subs	r3, #1
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009300:	2b00      	cmp	r3, #0
 8009302:	dce9      	bgt.n	80092d8 <prvUnlockQueue+0x60>
 8009304:	e000      	b.n	8009308 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009306:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	22ff      	movs	r2, #255	@ 0xff
 800930c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009310:	f001 fc5c 	bl	800abcc <vPortExitCritical>
}
 8009314:	bf00      	nop
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009324:	f001 fc20 	bl	800ab68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932c:	2b00      	cmp	r3, #0
 800932e:	d102      	bne.n	8009336 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009330:	2301      	movs	r3, #1
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	e001      	b.n	800933a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009336:	2300      	movs	r3, #0
 8009338:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800933a:	f001 fc47 	bl	800abcc <vPortExitCritical>

	return xReturn;
 800933e:	68fb      	ldr	r3, [r7, #12]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009350:	f001 fc0a 	bl	800ab68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800935c:	429a      	cmp	r2, r3
 800935e:	d102      	bne.n	8009366 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009360:	2301      	movs	r3, #1
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	e001      	b.n	800936a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009366:	2300      	movs	r3, #0
 8009368:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800936a:	f001 fc2f 	bl	800abcc <vPortExitCritical>

	return xReturn;
 800936e:	68fb      	ldr	r3, [r7, #12]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009382:	2300      	movs	r3, #0
 8009384:	60fb      	str	r3, [r7, #12]
 8009386:	e014      	b.n	80093b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009388:	4a0f      	ldr	r2, [pc, #60]	@ (80093c8 <vQueueAddToRegistry+0x50>)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10b      	bne.n	80093ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009394:	490c      	ldr	r1, [pc, #48]	@ (80093c8 <vQueueAddToRegistry+0x50>)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	683a      	ldr	r2, [r7, #0]
 800939a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800939e:	4a0a      	ldr	r2, [pc, #40]	@ (80093c8 <vQueueAddToRegistry+0x50>)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	00db      	lsls	r3, r3, #3
 80093a4:	4413      	add	r3, r2
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80093aa:	e006      	b.n	80093ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60fb      	str	r3, [r7, #12]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2b07      	cmp	r3, #7
 80093b6:	d9e7      	bls.n	8009388 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80093b8:	bf00      	nop
 80093ba:	bf00      	nop
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	240009e4 	.word	0x240009e4

080093cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80093dc:	f001 fbc4 	bl	800ab68 <vPortEnterCritical>
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093e6:	b25b      	sxtb	r3, r3
 80093e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ec:	d103      	bne.n	80093f6 <vQueueWaitForMessageRestricted+0x2a>
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093fc:	b25b      	sxtb	r3, r3
 80093fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009402:	d103      	bne.n	800940c <vQueueWaitForMessageRestricted+0x40>
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	2200      	movs	r2, #0
 8009408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800940c:	f001 fbde 	bl	800abcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009414:	2b00      	cmp	r3, #0
 8009416:	d106      	bne.n	8009426 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	3324      	adds	r3, #36	@ 0x24
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	68b9      	ldr	r1, [r7, #8]
 8009420:	4618      	mov	r0, r3
 8009422:	f000 fc45 	bl	8009cb0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009426:	6978      	ldr	r0, [r7, #20]
 8009428:	f7ff ff26 	bl	8009278 <prvUnlockQueue>
	}
 800942c:	bf00      	nop
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009434:	b580      	push	{r7, lr}
 8009436:	b08e      	sub	sp, #56	@ 0x38
 8009438:	af04      	add	r7, sp, #16
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	607a      	str	r2, [r7, #4]
 8009440:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10b      	bne.n	8009460 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	623b      	str	r3, [r7, #32]
}
 800945a:	bf00      	nop
 800945c:	bf00      	nop
 800945e:	e7fd      	b.n	800945c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10b      	bne.n	800947e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	61fb      	str	r3, [r7, #28]
}
 8009478:	bf00      	nop
 800947a:	bf00      	nop
 800947c:	e7fd      	b.n	800947a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800947e:	235c      	movs	r3, #92	@ 0x5c
 8009480:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	2b5c      	cmp	r3, #92	@ 0x5c
 8009486:	d00b      	beq.n	80094a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	61bb      	str	r3, [r7, #24]
}
 800949a:	bf00      	nop
 800949c:	bf00      	nop
 800949e:	e7fd      	b.n	800949c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80094a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80094a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d01e      	beq.n	80094e6 <xTaskCreateStatic+0xb2>
 80094a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d01b      	beq.n	80094e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80094b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80094b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ba:	2202      	movs	r2, #2
 80094bc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80094c0:	2300      	movs	r3, #0
 80094c2:	9303      	str	r3, [sp, #12]
 80094c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c6:	9302      	str	r3, [sp, #8]
 80094c8:	f107 0314 	add.w	r3, r7, #20
 80094cc:	9301      	str	r3, [sp, #4]
 80094ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d0:	9300      	str	r3, [sp, #0]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	68b9      	ldr	r1, [r7, #8]
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 f850 	bl	800957e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80094e0:	f000 f8de 	bl	80096a0 <prvAddNewTaskToReadyList>
 80094e4:	e001      	b.n	80094ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80094ea:	697b      	ldr	r3, [r7, #20]
	}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3728      	adds	r7, #40	@ 0x28
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b08c      	sub	sp, #48	@ 0x30
 80094f8:	af04      	add	r7, sp, #16
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	603b      	str	r3, [r7, #0]
 8009500:	4613      	mov	r3, r2
 8009502:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009504:	88fb      	ldrh	r3, [r7, #6]
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4618      	mov	r0, r3
 800950a:	f001 fc4f 	bl	800adac <pvPortMalloc>
 800950e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00e      	beq.n	8009534 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009516:	205c      	movs	r0, #92	@ 0x5c
 8009518:	f001 fc48 	bl	800adac <pvPortMalloc>
 800951c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800951e:	69fb      	ldr	r3, [r7, #28]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d003      	beq.n	800952c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	631a      	str	r2, [r3, #48]	@ 0x30
 800952a:	e005      	b.n	8009538 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800952c:	6978      	ldr	r0, [r7, #20]
 800952e:	f001 fd0b 	bl	800af48 <vPortFree>
 8009532:	e001      	b.n	8009538 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009534:	2300      	movs	r3, #0
 8009536:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d017      	beq.n	800956e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	2200      	movs	r2, #0
 8009542:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009546:	88fa      	ldrh	r2, [r7, #6]
 8009548:	2300      	movs	r3, #0
 800954a:	9303      	str	r3, [sp, #12]
 800954c:	69fb      	ldr	r3, [r7, #28]
 800954e:	9302      	str	r3, [sp, #8]
 8009550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009552:	9301      	str	r3, [sp, #4]
 8009554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	68b9      	ldr	r1, [r7, #8]
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f000 f80e 	bl	800957e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009562:	69f8      	ldr	r0, [r7, #28]
 8009564:	f000 f89c 	bl	80096a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009568:	2301      	movs	r3, #1
 800956a:	61bb      	str	r3, [r7, #24]
 800956c:	e002      	b.n	8009574 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800956e:	f04f 33ff 	mov.w	r3, #4294967295
 8009572:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009574:	69bb      	ldr	r3, [r7, #24]
	}
 8009576:	4618      	mov	r0, r3
 8009578:	3720      	adds	r7, #32
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800957e:	b580      	push	{r7, lr}
 8009580:	b088      	sub	sp, #32
 8009582:	af00      	add	r7, sp, #0
 8009584:	60f8      	str	r0, [r7, #12]
 8009586:	60b9      	str	r1, [r7, #8]
 8009588:	607a      	str	r2, [r7, #4]
 800958a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800958c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	461a      	mov	r2, r3
 8009596:	21a5      	movs	r1, #165	@ 0xa5
 8009598:	f001 fdf6 	bl	800b188 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800959c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095a0:	6879      	ldr	r1, [r7, #4]
 80095a2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80095a6:	440b      	add	r3, r1
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	f023 0307 	bic.w	r3, r3, #7
 80095b4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80095b6:	69bb      	ldr	r3, [r7, #24]
 80095b8:	f003 0307 	and.w	r3, r3, #7
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	617b      	str	r3, [r7, #20]
}
 80095d2:	bf00      	nop
 80095d4:	bf00      	nop
 80095d6:	e7fd      	b.n	80095d4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d01f      	beq.n	800961e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80095de:	2300      	movs	r3, #0
 80095e0:	61fb      	str	r3, [r7, #28]
 80095e2:	e012      	b.n	800960a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	4413      	add	r3, r2
 80095ea:	7819      	ldrb	r1, [r3, #0]
 80095ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	4413      	add	r3, r2
 80095f2:	3334      	adds	r3, #52	@ 0x34
 80095f4:	460a      	mov	r2, r1
 80095f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	4413      	add	r3, r2
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d006      	beq.n	8009612 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	3301      	adds	r3, #1
 8009608:	61fb      	str	r3, [r7, #28]
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	2b0f      	cmp	r3, #15
 800960e:	d9e9      	bls.n	80095e4 <prvInitialiseNewTask+0x66>
 8009610:	e000      	b.n	8009614 <prvInitialiseNewTask+0x96>
			{
				break;
 8009612:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009616:	2200      	movs	r2, #0
 8009618:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800961c:	e003      	b.n	8009626 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800961e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009620:	2200      	movs	r2, #0
 8009622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009628:	2b37      	cmp	r3, #55	@ 0x37
 800962a:	d901      	bls.n	8009630 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800962c:	2337      	movs	r3, #55	@ 0x37
 800962e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009632:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009634:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800963a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800963c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963e:	2200      	movs	r2, #0
 8009640:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009644:	3304      	adds	r3, #4
 8009646:	4618      	mov	r0, r3
 8009648:	f7ff f8a8 	bl	800879c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800964c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964e:	3318      	adds	r3, #24
 8009650:	4618      	mov	r0, r3
 8009652:	f7ff f8a3 	bl	800879c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800965a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800965c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009664:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009668:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800966a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800966c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800966e:	2200      	movs	r2, #0
 8009670:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	68f9      	ldr	r1, [r7, #12]
 800967e:	69b8      	ldr	r0, [r7, #24]
 8009680:	f001 f93e 	bl	800a900 <pxPortInitialiseStack>
 8009684:	4602      	mov	r2, r0
 8009686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009688:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800968a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009696:	bf00      	nop
 8009698:	3720      	adds	r7, #32
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80096a8:	f001 fa5e 	bl	800ab68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80096ac:	4b2d      	ldr	r3, [pc, #180]	@ (8009764 <prvAddNewTaskToReadyList+0xc4>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	3301      	adds	r3, #1
 80096b2:	4a2c      	ldr	r2, [pc, #176]	@ (8009764 <prvAddNewTaskToReadyList+0xc4>)
 80096b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80096b6:	4b2c      	ldr	r3, [pc, #176]	@ (8009768 <prvAddNewTaskToReadyList+0xc8>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d109      	bne.n	80096d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80096be:	4a2a      	ldr	r2, [pc, #168]	@ (8009768 <prvAddNewTaskToReadyList+0xc8>)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80096c4:	4b27      	ldr	r3, [pc, #156]	@ (8009764 <prvAddNewTaskToReadyList+0xc4>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d110      	bne.n	80096ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80096cc:	f000 fc1e 	bl	8009f0c <prvInitialiseTaskLists>
 80096d0:	e00d      	b.n	80096ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80096d2:	4b26      	ldr	r3, [pc, #152]	@ (800976c <prvAddNewTaskToReadyList+0xcc>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d109      	bne.n	80096ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80096da:	4b23      	ldr	r3, [pc, #140]	@ (8009768 <prvAddNewTaskToReadyList+0xc8>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d802      	bhi.n	80096ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80096e8:	4a1f      	ldr	r2, [pc, #124]	@ (8009768 <prvAddNewTaskToReadyList+0xc8>)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80096ee:	4b20      	ldr	r3, [pc, #128]	@ (8009770 <prvAddNewTaskToReadyList+0xd0>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3301      	adds	r3, #1
 80096f4:	4a1e      	ldr	r2, [pc, #120]	@ (8009770 <prvAddNewTaskToReadyList+0xd0>)
 80096f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80096f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009770 <prvAddNewTaskToReadyList+0xd0>)
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009704:	4b1b      	ldr	r3, [pc, #108]	@ (8009774 <prvAddNewTaskToReadyList+0xd4>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	429a      	cmp	r2, r3
 800970a:	d903      	bls.n	8009714 <prvAddNewTaskToReadyList+0x74>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009710:	4a18      	ldr	r2, [pc, #96]	@ (8009774 <prvAddNewTaskToReadyList+0xd4>)
 8009712:	6013      	str	r3, [r2, #0]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009718:	4613      	mov	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4a15      	ldr	r2, [pc, #84]	@ (8009778 <prvAddNewTaskToReadyList+0xd8>)
 8009722:	441a      	add	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	3304      	adds	r3, #4
 8009728:	4619      	mov	r1, r3
 800972a:	4610      	mov	r0, r2
 800972c:	f7ff f843 	bl	80087b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009730:	f001 fa4c 	bl	800abcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009734:	4b0d      	ldr	r3, [pc, #52]	@ (800976c <prvAddNewTaskToReadyList+0xcc>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d00e      	beq.n	800975a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800973c:	4b0a      	ldr	r3, [pc, #40]	@ (8009768 <prvAddNewTaskToReadyList+0xc8>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009746:	429a      	cmp	r2, r3
 8009748:	d207      	bcs.n	800975a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800974a:	4b0c      	ldr	r3, [pc, #48]	@ (800977c <prvAddNewTaskToReadyList+0xdc>)
 800974c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800975a:	bf00      	nop
 800975c:	3708      	adds	r7, #8
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	24000ef8 	.word	0x24000ef8
 8009768:	24000a24 	.word	0x24000a24
 800976c:	24000f04 	.word	0x24000f04
 8009770:	24000f14 	.word	0x24000f14
 8009774:	24000f00 	.word	0x24000f00
 8009778:	24000a28 	.word	0x24000a28
 800977c:	e000ed04 	.word	0xe000ed04

08009780 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009788:	2300      	movs	r3, #0
 800978a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d018      	beq.n	80097c4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009792:	4b14      	ldr	r3, [pc, #80]	@ (80097e4 <vTaskDelay+0x64>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00b      	beq.n	80097b2 <vTaskDelay+0x32>
	__asm volatile
 800979a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	60bb      	str	r3, [r7, #8]
}
 80097ac:	bf00      	nop
 80097ae:	bf00      	nop
 80097b0:	e7fd      	b.n	80097ae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80097b2:	f000 f883 	bl	80098bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80097b6:	2100      	movs	r1, #0
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fcf3 	bl	800a1a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80097be:	f000 f88b 	bl	80098d8 <xTaskResumeAll>
 80097c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d107      	bne.n	80097da <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80097ca:	4b07      	ldr	r3, [pc, #28]	@ (80097e8 <vTaskDelay+0x68>)
 80097cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097d0:	601a      	str	r2, [r3, #0]
 80097d2:	f3bf 8f4f 	dsb	sy
 80097d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80097da:	bf00      	nop
 80097dc:	3710      	adds	r7, #16
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	24000f20 	.word	0x24000f20
 80097e8:	e000ed04 	.word	0xe000ed04

080097ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b08a      	sub	sp, #40	@ 0x28
 80097f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80097f2:	2300      	movs	r3, #0
 80097f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80097f6:	2300      	movs	r3, #0
 80097f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80097fa:	463a      	mov	r2, r7
 80097fc:	1d39      	adds	r1, r7, #4
 80097fe:	f107 0308 	add.w	r3, r7, #8
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe ff76 	bl	80086f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009808:	6839      	ldr	r1, [r7, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	9202      	str	r2, [sp, #8]
 8009810:	9301      	str	r3, [sp, #4]
 8009812:	2300      	movs	r3, #0
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	2300      	movs	r3, #0
 8009818:	460a      	mov	r2, r1
 800981a:	4922      	ldr	r1, [pc, #136]	@ (80098a4 <vTaskStartScheduler+0xb8>)
 800981c:	4822      	ldr	r0, [pc, #136]	@ (80098a8 <vTaskStartScheduler+0xbc>)
 800981e:	f7ff fe09 	bl	8009434 <xTaskCreateStatic>
 8009822:	4603      	mov	r3, r0
 8009824:	4a21      	ldr	r2, [pc, #132]	@ (80098ac <vTaskStartScheduler+0xc0>)
 8009826:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009828:	4b20      	ldr	r3, [pc, #128]	@ (80098ac <vTaskStartScheduler+0xc0>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d002      	beq.n	8009836 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009830:	2301      	movs	r3, #1
 8009832:	617b      	str	r3, [r7, #20]
 8009834:	e001      	b.n	800983a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009836:	2300      	movs	r3, #0
 8009838:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d102      	bne.n	8009846 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009840:	f000 fd04 	bl	800a24c <xTimerCreateTimerTask>
 8009844:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	2b01      	cmp	r3, #1
 800984a:	d116      	bne.n	800987a <vTaskStartScheduler+0x8e>
	__asm volatile
 800984c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	613b      	str	r3, [r7, #16]
}
 800985e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009860:	4b13      	ldr	r3, [pc, #76]	@ (80098b0 <vTaskStartScheduler+0xc4>)
 8009862:	f04f 32ff 	mov.w	r2, #4294967295
 8009866:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009868:	4b12      	ldr	r3, [pc, #72]	@ (80098b4 <vTaskStartScheduler+0xc8>)
 800986a:	2201      	movs	r2, #1
 800986c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800986e:	4b12      	ldr	r3, [pc, #72]	@ (80098b8 <vTaskStartScheduler+0xcc>)
 8009870:	2200      	movs	r2, #0
 8009872:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009874:	f001 f8d4 	bl	800aa20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009878:	e00f      	b.n	800989a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009880:	d10b      	bne.n	800989a <vTaskStartScheduler+0xae>
	__asm volatile
 8009882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009886:	f383 8811 	msr	BASEPRI, r3
 800988a:	f3bf 8f6f 	isb	sy
 800988e:	f3bf 8f4f 	dsb	sy
 8009892:	60fb      	str	r3, [r7, #12]
}
 8009894:	bf00      	nop
 8009896:	bf00      	nop
 8009898:	e7fd      	b.n	8009896 <vTaskStartScheduler+0xaa>
}
 800989a:	bf00      	nop
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	0800b238 	.word	0x0800b238
 80098a8:	08009edd 	.word	0x08009edd
 80098ac:	24000f1c 	.word	0x24000f1c
 80098b0:	24000f18 	.word	0x24000f18
 80098b4:	24000f04 	.word	0x24000f04
 80098b8:	24000efc 	.word	0x24000efc

080098bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80098bc:	b480      	push	{r7}
 80098be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80098c0:	4b04      	ldr	r3, [pc, #16]	@ (80098d4 <vTaskSuspendAll+0x18>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	3301      	adds	r3, #1
 80098c6:	4a03      	ldr	r2, [pc, #12]	@ (80098d4 <vTaskSuspendAll+0x18>)
 80098c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80098ca:	bf00      	nop
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr
 80098d4:	24000f20 	.word	0x24000f20

080098d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b084      	sub	sp, #16
 80098dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80098de:	2300      	movs	r3, #0
 80098e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80098e2:	2300      	movs	r3, #0
 80098e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80098e6:	4b42      	ldr	r3, [pc, #264]	@ (80099f0 <xTaskResumeAll+0x118>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10b      	bne.n	8009906 <xTaskResumeAll+0x2e>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	603b      	str	r3, [r7, #0]
}
 8009900:	bf00      	nop
 8009902:	bf00      	nop
 8009904:	e7fd      	b.n	8009902 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009906:	f001 f92f 	bl	800ab68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800990a:	4b39      	ldr	r3, [pc, #228]	@ (80099f0 <xTaskResumeAll+0x118>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3b01      	subs	r3, #1
 8009910:	4a37      	ldr	r2, [pc, #220]	@ (80099f0 <xTaskResumeAll+0x118>)
 8009912:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009914:	4b36      	ldr	r3, [pc, #216]	@ (80099f0 <xTaskResumeAll+0x118>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d162      	bne.n	80099e2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800991c:	4b35      	ldr	r3, [pc, #212]	@ (80099f4 <xTaskResumeAll+0x11c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d05e      	beq.n	80099e2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009924:	e02f      	b.n	8009986 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009926:	4b34      	ldr	r3, [pc, #208]	@ (80099f8 <xTaskResumeAll+0x120>)
 8009928:	68db      	ldr	r3, [r3, #12]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	3318      	adds	r3, #24
 8009932:	4618      	mov	r0, r3
 8009934:	f7fe ff9c 	bl	8008870 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3304      	adds	r3, #4
 800993c:	4618      	mov	r0, r3
 800993e:	f7fe ff97 	bl	8008870 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009946:	4b2d      	ldr	r3, [pc, #180]	@ (80099fc <xTaskResumeAll+0x124>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	429a      	cmp	r2, r3
 800994c:	d903      	bls.n	8009956 <xTaskResumeAll+0x7e>
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009952:	4a2a      	ldr	r2, [pc, #168]	@ (80099fc <xTaskResumeAll+0x124>)
 8009954:	6013      	str	r3, [r2, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4a27      	ldr	r2, [pc, #156]	@ (8009a00 <xTaskResumeAll+0x128>)
 8009964:	441a      	add	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	3304      	adds	r3, #4
 800996a:	4619      	mov	r1, r3
 800996c:	4610      	mov	r0, r2
 800996e:	f7fe ff22 	bl	80087b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009976:	4b23      	ldr	r3, [pc, #140]	@ (8009a04 <xTaskResumeAll+0x12c>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800997c:	429a      	cmp	r2, r3
 800997e:	d302      	bcc.n	8009986 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009980:	4b21      	ldr	r3, [pc, #132]	@ (8009a08 <xTaskResumeAll+0x130>)
 8009982:	2201      	movs	r2, #1
 8009984:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009986:	4b1c      	ldr	r3, [pc, #112]	@ (80099f8 <xTaskResumeAll+0x120>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1cb      	bne.n	8009926 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009994:	f000 fb58 	bl	800a048 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009998:	4b1c      	ldr	r3, [pc, #112]	@ (8009a0c <xTaskResumeAll+0x134>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d010      	beq.n	80099c6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80099a4:	f000 f846 	bl	8009a34 <xTaskIncrementTick>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80099ae:	4b16      	ldr	r3, [pc, #88]	@ (8009a08 <xTaskResumeAll+0x130>)
 80099b0:	2201      	movs	r2, #1
 80099b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3b01      	subs	r3, #1
 80099b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1f1      	bne.n	80099a4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80099c0:	4b12      	ldr	r3, [pc, #72]	@ (8009a0c <xTaskResumeAll+0x134>)
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80099c6:	4b10      	ldr	r3, [pc, #64]	@ (8009a08 <xTaskResumeAll+0x130>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d009      	beq.n	80099e2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80099ce:	2301      	movs	r3, #1
 80099d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80099d2:	4b0f      	ldr	r3, [pc, #60]	@ (8009a10 <xTaskResumeAll+0x138>)
 80099d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80099d8:	601a      	str	r2, [r3, #0]
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099e2:	f001 f8f3 	bl	800abcc <vPortExitCritical>

	return xAlreadyYielded;
 80099e6:	68bb      	ldr	r3, [r7, #8]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	24000f20 	.word	0x24000f20
 80099f4:	24000ef8 	.word	0x24000ef8
 80099f8:	24000eb8 	.word	0x24000eb8
 80099fc:	24000f00 	.word	0x24000f00
 8009a00:	24000a28 	.word	0x24000a28
 8009a04:	24000a24 	.word	0x24000a24
 8009a08:	24000f0c 	.word	0x24000f0c
 8009a0c:	24000f08 	.word	0x24000f08
 8009a10:	e000ed04 	.word	0xe000ed04

08009a14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009a1a:	4b05      	ldr	r3, [pc, #20]	@ (8009a30 <xTaskGetTickCount+0x1c>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009a20:	687b      	ldr	r3, [r7, #4]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	24000efc 	.word	0x24000efc

08009a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a3e:	4b4f      	ldr	r3, [pc, #316]	@ (8009b7c <xTaskIncrementTick+0x148>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f040 8090 	bne.w	8009b68 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a48:	4b4d      	ldr	r3, [pc, #308]	@ (8009b80 <xTaskIncrementTick+0x14c>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a50:	4a4b      	ldr	r2, [pc, #300]	@ (8009b80 <xTaskIncrementTick+0x14c>)
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d121      	bne.n	8009aa0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a5c:	4b49      	ldr	r3, [pc, #292]	@ (8009b84 <xTaskIncrementTick+0x150>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00b      	beq.n	8009a7e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	603b      	str	r3, [r7, #0]
}
 8009a78:	bf00      	nop
 8009a7a:	bf00      	nop
 8009a7c:	e7fd      	b.n	8009a7a <xTaskIncrementTick+0x46>
 8009a7e:	4b41      	ldr	r3, [pc, #260]	@ (8009b84 <xTaskIncrementTick+0x150>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	4b40      	ldr	r3, [pc, #256]	@ (8009b88 <xTaskIncrementTick+0x154>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a3e      	ldr	r2, [pc, #248]	@ (8009b84 <xTaskIncrementTick+0x150>)
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	4a3e      	ldr	r2, [pc, #248]	@ (8009b88 <xTaskIncrementTick+0x154>)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6013      	str	r3, [r2, #0]
 8009a92:	4b3e      	ldr	r3, [pc, #248]	@ (8009b8c <xTaskIncrementTick+0x158>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3301      	adds	r3, #1
 8009a98:	4a3c      	ldr	r2, [pc, #240]	@ (8009b8c <xTaskIncrementTick+0x158>)
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	f000 fad4 	bl	800a048 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8009b90 <xTaskIncrementTick+0x15c>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	693a      	ldr	r2, [r7, #16]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d349      	bcc.n	8009b3e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009aaa:	4b36      	ldr	r3, [pc, #216]	@ (8009b84 <xTaskIncrementTick+0x150>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d104      	bne.n	8009abe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ab4:	4b36      	ldr	r3, [pc, #216]	@ (8009b90 <xTaskIncrementTick+0x15c>)
 8009ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aba:	601a      	str	r2, [r3, #0]
					break;
 8009abc:	e03f      	b.n	8009b3e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009abe:	4b31      	ldr	r3, [pc, #196]	@ (8009b84 <xTaskIncrementTick+0x150>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	68db      	ldr	r3, [r3, #12]
 8009ac6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ace:	693a      	ldr	r2, [r7, #16]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d203      	bcs.n	8009ade <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ad6:	4a2e      	ldr	r2, [pc, #184]	@ (8009b90 <xTaskIncrementTick+0x15c>)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009adc:	e02f      	b.n	8009b3e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	3304      	adds	r3, #4
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fe fec4 	bl	8008870 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d004      	beq.n	8009afa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	3318      	adds	r3, #24
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7fe febb 	bl	8008870 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009afe:	4b25      	ldr	r3, [pc, #148]	@ (8009b94 <xTaskIncrementTick+0x160>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d903      	bls.n	8009b0e <xTaskIncrementTick+0xda>
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0a:	4a22      	ldr	r2, [pc, #136]	@ (8009b94 <xTaskIncrementTick+0x160>)
 8009b0c:	6013      	str	r3, [r2, #0]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8009b98 <xTaskIncrementTick+0x164>)
 8009b1c:	441a      	add	r2, r3
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	3304      	adds	r3, #4
 8009b22:	4619      	mov	r1, r3
 8009b24:	4610      	mov	r0, r2
 8009b26:	f7fe fe46 	bl	80087b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8009b9c <xTaskIncrementTick+0x168>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d3b8      	bcc.n	8009aaa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b3c:	e7b5      	b.n	8009aaa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b3e:	4b17      	ldr	r3, [pc, #92]	@ (8009b9c <xTaskIncrementTick+0x168>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b44:	4914      	ldr	r1, [pc, #80]	@ (8009b98 <xTaskIncrementTick+0x164>)
 8009b46:	4613      	mov	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	440b      	add	r3, r1
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d901      	bls.n	8009b5a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009b56:	2301      	movs	r3, #1
 8009b58:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009b5a:	4b11      	ldr	r3, [pc, #68]	@ (8009ba0 <xTaskIncrementTick+0x16c>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d007      	beq.n	8009b72 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8009b62:	2301      	movs	r3, #1
 8009b64:	617b      	str	r3, [r7, #20]
 8009b66:	e004      	b.n	8009b72 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009b68:	4b0e      	ldr	r3, [pc, #56]	@ (8009ba4 <xTaskIncrementTick+0x170>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	4a0d      	ldr	r2, [pc, #52]	@ (8009ba4 <xTaskIncrementTick+0x170>)
 8009b70:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009b72:	697b      	ldr	r3, [r7, #20]
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3718      	adds	r7, #24
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	24000f20 	.word	0x24000f20
 8009b80:	24000efc 	.word	0x24000efc
 8009b84:	24000eb0 	.word	0x24000eb0
 8009b88:	24000eb4 	.word	0x24000eb4
 8009b8c:	24000f10 	.word	0x24000f10
 8009b90:	24000f18 	.word	0x24000f18
 8009b94:	24000f00 	.word	0x24000f00
 8009b98:	24000a28 	.word	0x24000a28
 8009b9c:	24000a24 	.word	0x24000a24
 8009ba0:	24000f0c 	.word	0x24000f0c
 8009ba4:	24000f08 	.word	0x24000f08

08009ba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009bae:	4b28      	ldr	r3, [pc, #160]	@ (8009c50 <vTaskSwitchContext+0xa8>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009bb6:	4b27      	ldr	r3, [pc, #156]	@ (8009c54 <vTaskSwitchContext+0xac>)
 8009bb8:	2201      	movs	r2, #1
 8009bba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009bbc:	e042      	b.n	8009c44 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009bbe:	4b25      	ldr	r3, [pc, #148]	@ (8009c54 <vTaskSwitchContext+0xac>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bc4:	4b24      	ldr	r3, [pc, #144]	@ (8009c58 <vTaskSwitchContext+0xb0>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	60fb      	str	r3, [r7, #12]
 8009bca:	e011      	b.n	8009bf0 <vTaskSwitchContext+0x48>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d10b      	bne.n	8009bea <vTaskSwitchContext+0x42>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd6:	f383 8811 	msr	BASEPRI, r3
 8009bda:	f3bf 8f6f 	isb	sy
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	607b      	str	r3, [r7, #4]
}
 8009be4:	bf00      	nop
 8009be6:	bf00      	nop
 8009be8:	e7fd      	b.n	8009be6 <vTaskSwitchContext+0x3e>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	3b01      	subs	r3, #1
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	491a      	ldr	r1, [pc, #104]	@ (8009c5c <vTaskSwitchContext+0xb4>)
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	440b      	add	r3, r1
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d0e3      	beq.n	8009bcc <vTaskSwitchContext+0x24>
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4a13      	ldr	r2, [pc, #76]	@ (8009c5c <vTaskSwitchContext+0xb4>)
 8009c10:	4413      	add	r3, r2
 8009c12:	60bb      	str	r3, [r7, #8]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	605a      	str	r2, [r3, #4]
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	3308      	adds	r3, #8
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d104      	bne.n	8009c34 <vTaskSwitchContext+0x8c>
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	685a      	ldr	r2, [r3, #4]
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	605a      	str	r2, [r3, #4]
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	4a09      	ldr	r2, [pc, #36]	@ (8009c60 <vTaskSwitchContext+0xb8>)
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	4a06      	ldr	r2, [pc, #24]	@ (8009c58 <vTaskSwitchContext+0xb0>)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6013      	str	r3, [r2, #0]
}
 8009c44:	bf00      	nop
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr
 8009c50:	24000f20 	.word	0x24000f20
 8009c54:	24000f0c 	.word	0x24000f0c
 8009c58:	24000f00 	.word	0x24000f00
 8009c5c:	24000a28 	.word	0x24000a28
 8009c60:	24000a24 	.word	0x24000a24

08009c64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10b      	bne.n	8009c8c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	60fb      	str	r3, [r7, #12]
}
 8009c86:	bf00      	nop
 8009c88:	bf00      	nop
 8009c8a:	e7fd      	b.n	8009c88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c8c:	4b07      	ldr	r3, [pc, #28]	@ (8009cac <vTaskPlaceOnEventList+0x48>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3318      	adds	r3, #24
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f7fe fdb2 	bl	80087fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	6838      	ldr	r0, [r7, #0]
 8009c9e:	f000 fa81 	bl	800a1a4 <prvAddCurrentTaskToDelayedList>
}
 8009ca2:	bf00      	nop
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	24000a24 	.word	0x24000a24

08009cb0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10b      	bne.n	8009cda <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	617b      	str	r3, [r7, #20]
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop
 8009cd8:	e7fd      	b.n	8009cd6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cda:	4b0a      	ldr	r3, [pc, #40]	@ (8009d04 <vTaskPlaceOnEventListRestricted+0x54>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3318      	adds	r3, #24
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f7fe fd67 	bl	80087b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d002      	beq.n	8009cf4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009cee:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	68b8      	ldr	r0, [r7, #8]
 8009cf8:	f000 fa54 	bl	800a1a4 <prvAddCurrentTaskToDelayedList>
	}
 8009cfc:	bf00      	nop
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	24000a24 	.word	0x24000a24

08009d08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10b      	bne.n	8009d36 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	60fb      	str	r3, [r7, #12]
}
 8009d30:	bf00      	nop
 8009d32:	bf00      	nop
 8009d34:	e7fd      	b.n	8009d32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	3318      	adds	r3, #24
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f7fe fd98 	bl	8008870 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d40:	4b1d      	ldr	r3, [pc, #116]	@ (8009db8 <xTaskRemoveFromEventList+0xb0>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d11d      	bne.n	8009d84 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7fe fd8f 	bl	8008870 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d56:	4b19      	ldr	r3, [pc, #100]	@ (8009dbc <xTaskRemoveFromEventList+0xb4>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d903      	bls.n	8009d66 <xTaskRemoveFromEventList+0x5e>
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d62:	4a16      	ldr	r2, [pc, #88]	@ (8009dbc <xTaskRemoveFromEventList+0xb4>)
 8009d64:	6013      	str	r3, [r2, #0]
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4413      	add	r3, r2
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4a13      	ldr	r2, [pc, #76]	@ (8009dc0 <xTaskRemoveFromEventList+0xb8>)
 8009d74:	441a      	add	r2, r3
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	3304      	adds	r3, #4
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	4610      	mov	r0, r2
 8009d7e:	f7fe fd1a 	bl	80087b6 <vListInsertEnd>
 8009d82:	e005      	b.n	8009d90 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	3318      	adds	r3, #24
 8009d88:	4619      	mov	r1, r3
 8009d8a:	480e      	ldr	r0, [pc, #56]	@ (8009dc4 <xTaskRemoveFromEventList+0xbc>)
 8009d8c:	f7fe fd13 	bl	80087b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d94:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc8 <xTaskRemoveFromEventList+0xc0>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d905      	bls.n	8009daa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009da2:	4b0a      	ldr	r3, [pc, #40]	@ (8009dcc <xTaskRemoveFromEventList+0xc4>)
 8009da4:	2201      	movs	r2, #1
 8009da6:	601a      	str	r2, [r3, #0]
 8009da8:	e001      	b.n	8009dae <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009daa:	2300      	movs	r3, #0
 8009dac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009dae:	697b      	ldr	r3, [r7, #20]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3718      	adds	r7, #24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	24000f20 	.word	0x24000f20
 8009dbc:	24000f00 	.word	0x24000f00
 8009dc0:	24000a28 	.word	0x24000a28
 8009dc4:	24000eb8 	.word	0x24000eb8
 8009dc8:	24000a24 	.word	0x24000a24
 8009dcc:	24000f0c 	.word	0x24000f0c

08009dd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009dd8:	4b06      	ldr	r3, [pc, #24]	@ (8009df4 <vTaskInternalSetTimeOutState+0x24>)
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009de0:	4b05      	ldr	r3, [pc, #20]	@ (8009df8 <vTaskInternalSetTimeOutState+0x28>)
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	605a      	str	r2, [r3, #4]
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr
 8009df4:	24000f10 	.word	0x24000f10
 8009df8:	24000efc 	.word	0x24000efc

08009dfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b088      	sub	sp, #32
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10b      	bne.n	8009e24 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	613b      	str	r3, [r7, #16]
}
 8009e1e:	bf00      	nop
 8009e20:	bf00      	nop
 8009e22:	e7fd      	b.n	8009e20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10b      	bne.n	8009e42 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	60fb      	str	r3, [r7, #12]
}
 8009e3c:	bf00      	nop
 8009e3e:	bf00      	nop
 8009e40:	e7fd      	b.n	8009e3e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009e42:	f000 fe91 	bl	800ab68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e46:	4b1d      	ldr	r3, [pc, #116]	@ (8009ebc <xTaskCheckForTimeOut+0xc0>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	69ba      	ldr	r2, [r7, #24]
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5e:	d102      	bne.n	8009e66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009e60:	2300      	movs	r3, #0
 8009e62:	61fb      	str	r3, [r7, #28]
 8009e64:	e023      	b.n	8009eae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	4b15      	ldr	r3, [pc, #84]	@ (8009ec0 <xTaskCheckForTimeOut+0xc4>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d007      	beq.n	8009e82 <xTaskCheckForTimeOut+0x86>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	69ba      	ldr	r2, [r7, #24]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d302      	bcc.n	8009e82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	61fb      	str	r3, [r7, #28]
 8009e80:	e015      	b.n	8009eae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d20b      	bcs.n	8009ea4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	1ad2      	subs	r2, r2, r3
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7ff ff99 	bl	8009dd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	61fb      	str	r3, [r7, #28]
 8009ea2:	e004      	b.n	8009eae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009eae:	f000 fe8d 	bl	800abcc <vPortExitCritical>

	return xReturn;
 8009eb2:	69fb      	ldr	r3, [r7, #28]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3720      	adds	r7, #32
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	24000efc 	.word	0x24000efc
 8009ec0:	24000f10 	.word	0x24000f10

08009ec4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ec8:	4b03      	ldr	r3, [pc, #12]	@ (8009ed8 <vTaskMissedYield+0x14>)
 8009eca:	2201      	movs	r2, #1
 8009ecc:	601a      	str	r2, [r3, #0]
}
 8009ece:	bf00      	nop
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	24000f0c 	.word	0x24000f0c

08009edc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ee4:	f000 f852 	bl	8009f8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ee8:	4b06      	ldr	r3, [pc, #24]	@ (8009f04 <prvIdleTask+0x28>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d9f9      	bls.n	8009ee4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ef0:	4b05      	ldr	r3, [pc, #20]	@ (8009f08 <prvIdleTask+0x2c>)
 8009ef2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f00:	e7f0      	b.n	8009ee4 <prvIdleTask+0x8>
 8009f02:	bf00      	nop
 8009f04:	24000a28 	.word	0x24000a28
 8009f08:	e000ed04 	.word	0xe000ed04

08009f0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f12:	2300      	movs	r3, #0
 8009f14:	607b      	str	r3, [r7, #4]
 8009f16:	e00c      	b.n	8009f32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4413      	add	r3, r2
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	4a12      	ldr	r2, [pc, #72]	@ (8009f6c <prvInitialiseTaskLists+0x60>)
 8009f24:	4413      	add	r3, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe fc18 	bl	800875c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	3301      	adds	r3, #1
 8009f30:	607b      	str	r3, [r7, #4]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2b37      	cmp	r3, #55	@ 0x37
 8009f36:	d9ef      	bls.n	8009f18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f38:	480d      	ldr	r0, [pc, #52]	@ (8009f70 <prvInitialiseTaskLists+0x64>)
 8009f3a:	f7fe fc0f 	bl	800875c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f3e:	480d      	ldr	r0, [pc, #52]	@ (8009f74 <prvInitialiseTaskLists+0x68>)
 8009f40:	f7fe fc0c 	bl	800875c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f44:	480c      	ldr	r0, [pc, #48]	@ (8009f78 <prvInitialiseTaskLists+0x6c>)
 8009f46:	f7fe fc09 	bl	800875c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009f4a:	480c      	ldr	r0, [pc, #48]	@ (8009f7c <prvInitialiseTaskLists+0x70>)
 8009f4c:	f7fe fc06 	bl	800875c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009f50:	480b      	ldr	r0, [pc, #44]	@ (8009f80 <prvInitialiseTaskLists+0x74>)
 8009f52:	f7fe fc03 	bl	800875c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f56:	4b0b      	ldr	r3, [pc, #44]	@ (8009f84 <prvInitialiseTaskLists+0x78>)
 8009f58:	4a05      	ldr	r2, [pc, #20]	@ (8009f70 <prvInitialiseTaskLists+0x64>)
 8009f5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f88 <prvInitialiseTaskLists+0x7c>)
 8009f5e:	4a05      	ldr	r2, [pc, #20]	@ (8009f74 <prvInitialiseTaskLists+0x68>)
 8009f60:	601a      	str	r2, [r3, #0]
}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	24000a28 	.word	0x24000a28
 8009f70:	24000e88 	.word	0x24000e88
 8009f74:	24000e9c 	.word	0x24000e9c
 8009f78:	24000eb8 	.word	0x24000eb8
 8009f7c:	24000ecc 	.word	0x24000ecc
 8009f80:	24000ee4 	.word	0x24000ee4
 8009f84:	24000eb0 	.word	0x24000eb0
 8009f88:	24000eb4 	.word	0x24000eb4

08009f8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f92:	e019      	b.n	8009fc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009f94:	f000 fde8 	bl	800ab68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f98:	4b10      	ldr	r3, [pc, #64]	@ (8009fdc <prvCheckTasksWaitingTermination+0x50>)
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	68db      	ldr	r3, [r3, #12]
 8009f9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f7fe fc63 	bl	8008870 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009faa:	4b0d      	ldr	r3, [pc, #52]	@ (8009fe0 <prvCheckTasksWaitingTermination+0x54>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8009fe0 <prvCheckTasksWaitingTermination+0x54>)
 8009fb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8009fe4 <prvCheckTasksWaitingTermination+0x58>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	4a0a      	ldr	r2, [pc, #40]	@ (8009fe4 <prvCheckTasksWaitingTermination+0x58>)
 8009fbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009fbe:	f000 fe05 	bl	800abcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f810 	bl	8009fe8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fc8:	4b06      	ldr	r3, [pc, #24]	@ (8009fe4 <prvCheckTasksWaitingTermination+0x58>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1e1      	bne.n	8009f94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009fd0:	bf00      	nop
 8009fd2:	bf00      	nop
 8009fd4:	3708      	adds	r7, #8
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	24000ecc 	.word	0x24000ecc
 8009fe0:	24000ef8 	.word	0x24000ef8
 8009fe4:	24000ee0 	.word	0x24000ee0

08009fe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d108      	bne.n	800a00c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 ffa2 	bl	800af48 <vPortFree>
				vPortFree( pxTCB );
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 ff9f 	bl	800af48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a00a:	e019      	b.n	800a040 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a012:	2b01      	cmp	r3, #1
 800a014:	d103      	bne.n	800a01e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 ff96 	bl	800af48 <vPortFree>
	}
 800a01c:	e010      	b.n	800a040 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800a024:	2b02      	cmp	r3, #2
 800a026:	d00b      	beq.n	800a040 <prvDeleteTCB+0x58>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	60fb      	str	r3, [r7, #12]
}
 800a03a:	bf00      	nop
 800a03c:	bf00      	nop
 800a03e:	e7fd      	b.n	800a03c <prvDeleteTCB+0x54>
	}
 800a040:	bf00      	nop
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a04e:	4b0c      	ldr	r3, [pc, #48]	@ (800a080 <prvResetNextTaskUnblockTime+0x38>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d104      	bne.n	800a062 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a058:	4b0a      	ldr	r3, [pc, #40]	@ (800a084 <prvResetNextTaskUnblockTime+0x3c>)
 800a05a:	f04f 32ff 	mov.w	r2, #4294967295
 800a05e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a060:	e008      	b.n	800a074 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a062:	4b07      	ldr	r3, [pc, #28]	@ (800a080 <prvResetNextTaskUnblockTime+0x38>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	4a04      	ldr	r2, [pc, #16]	@ (800a084 <prvResetNextTaskUnblockTime+0x3c>)
 800a072:	6013      	str	r3, [r2, #0]
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr
 800a080:	24000eb0 	.word	0x24000eb0
 800a084:	24000f18 	.word	0x24000f18

0800a088 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a08e:	4b0b      	ldr	r3, [pc, #44]	@ (800a0bc <xTaskGetSchedulerState+0x34>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d102      	bne.n	800a09c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a096:	2301      	movs	r3, #1
 800a098:	607b      	str	r3, [r7, #4]
 800a09a:	e008      	b.n	800a0ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a09c:	4b08      	ldr	r3, [pc, #32]	@ (800a0c0 <xTaskGetSchedulerState+0x38>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d102      	bne.n	800a0aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	607b      	str	r3, [r7, #4]
 800a0a8:	e001      	b.n	800a0ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a0ae:	687b      	ldr	r3, [r7, #4]
	}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	24000f04 	.word	0x24000f04
 800a0c0:	24000f20 	.word	0x24000f20

0800a0c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d058      	beq.n	800a18c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a0da:	4b2f      	ldr	r3, [pc, #188]	@ (800a198 <xTaskPriorityDisinherit+0xd4>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d00b      	beq.n	800a0fc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a0e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0e8:	f383 8811 	msr	BASEPRI, r3
 800a0ec:	f3bf 8f6f 	isb	sy
 800a0f0:	f3bf 8f4f 	dsb	sy
 800a0f4:	60fb      	str	r3, [r7, #12]
}
 800a0f6:	bf00      	nop
 800a0f8:	bf00      	nop
 800a0fa:	e7fd      	b.n	800a0f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10b      	bne.n	800a11c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	60bb      	str	r3, [r7, #8]
}
 800a116:	bf00      	nop
 800a118:	bf00      	nop
 800a11a:	e7fd      	b.n	800a118 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a120:	1e5a      	subs	r2, r3, #1
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a12e:	429a      	cmp	r2, r3
 800a130:	d02c      	beq.n	800a18c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a136:	2b00      	cmp	r3, #0
 800a138:	d128      	bne.n	800a18c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	3304      	adds	r3, #4
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fe fb96 	bl	8008870 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a150:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a15c:	4b0f      	ldr	r3, [pc, #60]	@ (800a19c <xTaskPriorityDisinherit+0xd8>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	429a      	cmp	r2, r3
 800a162:	d903      	bls.n	800a16c <xTaskPriorityDisinherit+0xa8>
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a168:	4a0c      	ldr	r2, [pc, #48]	@ (800a19c <xTaskPriorityDisinherit+0xd8>)
 800a16a:	6013      	str	r3, [r2, #0]
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4a09      	ldr	r2, [pc, #36]	@ (800a1a0 <xTaskPriorityDisinherit+0xdc>)
 800a17a:	441a      	add	r2, r3
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	3304      	adds	r3, #4
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7fe fb17 	bl	80087b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a188:	2301      	movs	r3, #1
 800a18a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a18c:	697b      	ldr	r3, [r7, #20]
	}
 800a18e:	4618      	mov	r0, r3
 800a190:	3718      	adds	r7, #24
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	24000a24 	.word	0x24000a24
 800a19c:	24000f00 	.word	0x24000f00
 800a1a0:	24000a28 	.word	0x24000a28

0800a1a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1ae:	4b21      	ldr	r3, [pc, #132]	@ (800a234 <prvAddCurrentTaskToDelayedList+0x90>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1b4:	4b20      	ldr	r3, [pc, #128]	@ (800a238 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fe fb58 	bl	8008870 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1c6:	d10a      	bne.n	800a1de <prvAddCurrentTaskToDelayedList+0x3a>
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d007      	beq.n	800a1de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a238 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3304      	adds	r3, #4
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4819      	ldr	r0, [pc, #100]	@ (800a23c <prvAddCurrentTaskToDelayedList+0x98>)
 800a1d8:	f7fe faed 	bl	80087b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1dc:	e026      	b.n	800a22c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1e6:	4b14      	ldr	r3, [pc, #80]	@ (800a238 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1ee:	68ba      	ldr	r2, [r7, #8]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d209      	bcs.n	800a20a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1f6:	4b12      	ldr	r3, [pc, #72]	@ (800a240 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	4b0f      	ldr	r3, [pc, #60]	@ (800a238 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3304      	adds	r3, #4
 800a200:	4619      	mov	r1, r3
 800a202:	4610      	mov	r0, r2
 800a204:	f7fe fafb 	bl	80087fe <vListInsert>
}
 800a208:	e010      	b.n	800a22c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a20a:	4b0e      	ldr	r3, [pc, #56]	@ (800a244 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	4b0a      	ldr	r3, [pc, #40]	@ (800a238 <prvAddCurrentTaskToDelayedList+0x94>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	3304      	adds	r3, #4
 800a214:	4619      	mov	r1, r3
 800a216:	4610      	mov	r0, r2
 800a218:	f7fe faf1 	bl	80087fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a21c:	4b0a      	ldr	r3, [pc, #40]	@ (800a248 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	429a      	cmp	r2, r3
 800a224:	d202      	bcs.n	800a22c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a226:	4a08      	ldr	r2, [pc, #32]	@ (800a248 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	6013      	str	r3, [r2, #0]
}
 800a22c:	bf00      	nop
 800a22e:	3710      	adds	r7, #16
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	24000efc 	.word	0x24000efc
 800a238:	24000a24 	.word	0x24000a24
 800a23c:	24000ee4 	.word	0x24000ee4
 800a240:	24000eb4 	.word	0x24000eb4
 800a244:	24000eb0 	.word	0x24000eb0
 800a248:	24000f18 	.word	0x24000f18

0800a24c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08a      	sub	sp, #40	@ 0x28
 800a250:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a252:	2300      	movs	r3, #0
 800a254:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a256:	f000 fb13 	bl	800a880 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a25a:	4b1d      	ldr	r3, [pc, #116]	@ (800a2d0 <xTimerCreateTimerTask+0x84>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d021      	beq.n	800a2a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a266:	2300      	movs	r3, #0
 800a268:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a26a:	1d3a      	adds	r2, r7, #4
 800a26c:	f107 0108 	add.w	r1, r7, #8
 800a270:	f107 030c 	add.w	r3, r7, #12
 800a274:	4618      	mov	r0, r3
 800a276:	f7fe fa57 	bl	8008728 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a27a:	6879      	ldr	r1, [r7, #4]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	9202      	str	r2, [sp, #8]
 800a282:	9301      	str	r3, [sp, #4]
 800a284:	2302      	movs	r3, #2
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	2300      	movs	r3, #0
 800a28a:	460a      	mov	r2, r1
 800a28c:	4911      	ldr	r1, [pc, #68]	@ (800a2d4 <xTimerCreateTimerTask+0x88>)
 800a28e:	4812      	ldr	r0, [pc, #72]	@ (800a2d8 <xTimerCreateTimerTask+0x8c>)
 800a290:	f7ff f8d0 	bl	8009434 <xTaskCreateStatic>
 800a294:	4603      	mov	r3, r0
 800a296:	4a11      	ldr	r2, [pc, #68]	@ (800a2dc <xTimerCreateTimerTask+0x90>)
 800a298:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a29a:	4b10      	ldr	r3, [pc, #64]	@ (800a2dc <xTimerCreateTimerTask+0x90>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d10b      	bne.n	800a2c4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	613b      	str	r3, [r7, #16]
}
 800a2be:	bf00      	nop
 800a2c0:	bf00      	nop
 800a2c2:	e7fd      	b.n	800a2c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a2c4:	697b      	ldr	r3, [r7, #20]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	24000f54 	.word	0x24000f54
 800a2d4:	0800b240 	.word	0x0800b240
 800a2d8:	0800a419 	.word	0x0800a419
 800a2dc:	24000f58 	.word	0x24000f58

0800a2e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b08a      	sub	sp, #40	@ 0x28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
 800a2ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d10b      	bne.n	800a310 <xTimerGenericCommand+0x30>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	623b      	str	r3, [r7, #32]
}
 800a30a:	bf00      	nop
 800a30c:	bf00      	nop
 800a30e:	e7fd      	b.n	800a30c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a310:	4b19      	ldr	r3, [pc, #100]	@ (800a378 <xTimerGenericCommand+0x98>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d02a      	beq.n	800a36e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2b05      	cmp	r3, #5
 800a328:	dc18      	bgt.n	800a35c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a32a:	f7ff fead 	bl	800a088 <xTaskGetSchedulerState>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b02      	cmp	r3, #2
 800a332:	d109      	bne.n	800a348 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a334:	4b10      	ldr	r3, [pc, #64]	@ (800a378 <xTimerGenericCommand+0x98>)
 800a336:	6818      	ldr	r0, [r3, #0]
 800a338:	f107 0110 	add.w	r1, r7, #16
 800a33c:	2300      	movs	r3, #0
 800a33e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a340:	f7fe fc06 	bl	8008b50 <xQueueGenericSend>
 800a344:	6278      	str	r0, [r7, #36]	@ 0x24
 800a346:	e012      	b.n	800a36e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a348:	4b0b      	ldr	r3, [pc, #44]	@ (800a378 <xTimerGenericCommand+0x98>)
 800a34a:	6818      	ldr	r0, [r3, #0]
 800a34c:	f107 0110 	add.w	r1, r7, #16
 800a350:	2300      	movs	r3, #0
 800a352:	2200      	movs	r2, #0
 800a354:	f7fe fbfc 	bl	8008b50 <xQueueGenericSend>
 800a358:	6278      	str	r0, [r7, #36]	@ 0x24
 800a35a:	e008      	b.n	800a36e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a35c:	4b06      	ldr	r3, [pc, #24]	@ (800a378 <xTimerGenericCommand+0x98>)
 800a35e:	6818      	ldr	r0, [r3, #0]
 800a360:	f107 0110 	add.w	r1, r7, #16
 800a364:	2300      	movs	r3, #0
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	f7fe fcf4 	bl	8008d54 <xQueueGenericSendFromISR>
 800a36c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a370:	4618      	mov	r0, r3
 800a372:	3728      	adds	r7, #40	@ 0x28
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	24000f54 	.word	0x24000f54

0800a37c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b088      	sub	sp, #32
 800a380:	af02      	add	r7, sp, #8
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a386:	4b23      	ldr	r3, [pc, #140]	@ (800a414 <prvProcessExpiredTimer+0x98>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	3304      	adds	r3, #4
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe fa6b 	bl	8008870 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3a0:	f003 0304 	and.w	r3, r3, #4
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d023      	beq.n	800a3f0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	699a      	ldr	r2, [r3, #24]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	18d1      	adds	r1, r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	6978      	ldr	r0, [r7, #20]
 800a3b6:	f000 f8d5 	bl	800a564 <prvInsertTimerInActiveList>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d020      	beq.n	800a402 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	6978      	ldr	r0, [r7, #20]
 800a3cc:	f7ff ff88 	bl	800a2e0 <xTimerGenericCommand>
 800a3d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d114      	bne.n	800a402 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a3d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3dc:	f383 8811 	msr	BASEPRI, r3
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	f3bf 8f4f 	dsb	sy
 800a3e8:	60fb      	str	r3, [r7, #12]
}
 800a3ea:	bf00      	nop
 800a3ec:	bf00      	nop
 800a3ee:	e7fd      	b.n	800a3ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a3f6:	f023 0301 	bic.w	r3, r3, #1
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	6978      	ldr	r0, [r7, #20]
 800a408:	4798      	blx	r3
}
 800a40a:	bf00      	nop
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	24000f4c 	.word	0x24000f4c

0800a418 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a420:	f107 0308 	add.w	r3, r7, #8
 800a424:	4618      	mov	r0, r3
 800a426:	f000 f859 	bl	800a4dc <prvGetNextExpireTime>
 800a42a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	4619      	mov	r1, r3
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 f805 	bl	800a440 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a436:	f000 f8d7 	bl	800a5e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a43a:	bf00      	nop
 800a43c:	e7f0      	b.n	800a420 <prvTimerTask+0x8>
	...

0800a440 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b084      	sub	sp, #16
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a44a:	f7ff fa37 	bl	80098bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a44e:	f107 0308 	add.w	r3, r7, #8
 800a452:	4618      	mov	r0, r3
 800a454:	f000 f866 	bl	800a524 <prvSampleTimeNow>
 800a458:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d130      	bne.n	800a4c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d10a      	bne.n	800a47c <prvProcessTimerOrBlockTask+0x3c>
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d806      	bhi.n	800a47c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a46e:	f7ff fa33 	bl	80098d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a472:	68f9      	ldr	r1, [r7, #12]
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7ff ff81 	bl	800a37c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a47a:	e024      	b.n	800a4c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d008      	beq.n	800a494 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a482:	4b13      	ldr	r3, [pc, #76]	@ (800a4d0 <prvProcessTimerOrBlockTask+0x90>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d101      	bne.n	800a490 <prvProcessTimerOrBlockTask+0x50>
 800a48c:	2301      	movs	r3, #1
 800a48e:	e000      	b.n	800a492 <prvProcessTimerOrBlockTask+0x52>
 800a490:	2300      	movs	r3, #0
 800a492:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a494:	4b0f      	ldr	r3, [pc, #60]	@ (800a4d4 <prvProcessTimerOrBlockTask+0x94>)
 800a496:	6818      	ldr	r0, [r3, #0]
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	f7fe ff93 	bl	80093cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4a6:	f7ff fa17 	bl	80098d8 <xTaskResumeAll>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10a      	bne.n	800a4c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a4b0:	4b09      	ldr	r3, [pc, #36]	@ (800a4d8 <prvProcessTimerOrBlockTask+0x98>)
 800a4b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4b6:	601a      	str	r2, [r3, #0]
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	f3bf 8f6f 	isb	sy
}
 800a4c0:	e001      	b.n	800a4c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a4c2:	f7ff fa09 	bl	80098d8 <xTaskResumeAll>
}
 800a4c6:	bf00      	nop
 800a4c8:	3710      	adds	r7, #16
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}
 800a4ce:	bf00      	nop
 800a4d0:	24000f50 	.word	0x24000f50
 800a4d4:	24000f54 	.word	0x24000f54
 800a4d8:	e000ed04 	.word	0xe000ed04

0800a4dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a4e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a520 <prvGetNextExpireTime+0x44>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d101      	bne.n	800a4f2 <prvGetNextExpireTime+0x16>
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	e000      	b.n	800a4f4 <prvGetNextExpireTime+0x18>
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d105      	bne.n	800a50c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a500:	4b07      	ldr	r3, [pc, #28]	@ (800a520 <prvGetNextExpireTime+0x44>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	60fb      	str	r3, [r7, #12]
 800a50a:	e001      	b.n	800a510 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a50c:	2300      	movs	r3, #0
 800a50e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a510:	68fb      	ldr	r3, [r7, #12]
}
 800a512:	4618      	mov	r0, r3
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	24000f4c 	.word	0x24000f4c

0800a524 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b084      	sub	sp, #16
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a52c:	f7ff fa72 	bl	8009a14 <xTaskGetTickCount>
 800a530:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a532:	4b0b      	ldr	r3, [pc, #44]	@ (800a560 <prvSampleTimeNow+0x3c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d205      	bcs.n	800a548 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a53c:	f000 f93a 	bl	800a7b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2201      	movs	r2, #1
 800a544:	601a      	str	r2, [r3, #0]
 800a546:	e002      	b.n	800a54e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a54e:	4a04      	ldr	r2, [pc, #16]	@ (800a560 <prvSampleTimeNow+0x3c>)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a554:	68fb      	ldr	r3, [r7, #12]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	24000f5c 	.word	0x24000f5c

0800a564 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]
 800a570:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a572:	2300      	movs	r3, #0
 800a574:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	429a      	cmp	r2, r3
 800a588:	d812      	bhi.n	800a5b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	1ad2      	subs	r2, r2, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	429a      	cmp	r2, r3
 800a596:	d302      	bcc.n	800a59e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a598:	2301      	movs	r3, #1
 800a59a:	617b      	str	r3, [r7, #20]
 800a59c:	e01b      	b.n	800a5d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a59e:	4b10      	ldr	r3, [pc, #64]	@ (800a5e0 <prvInsertTimerInActiveList+0x7c>)
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3304      	adds	r3, #4
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	4610      	mov	r0, r2
 800a5aa:	f7fe f928 	bl	80087fe <vListInsert>
 800a5ae:	e012      	b.n	800a5d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5b0:	687a      	ldr	r2, [r7, #4]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d206      	bcs.n	800a5c6 <prvInsertTimerInActiveList+0x62>
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d302      	bcc.n	800a5c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	617b      	str	r3, [r7, #20]
 800a5c4:	e007      	b.n	800a5d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5c6:	4b07      	ldr	r3, [pc, #28]	@ (800a5e4 <prvInsertTimerInActiveList+0x80>)
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	4610      	mov	r0, r2
 800a5d2:	f7fe f914 	bl	80087fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a5d6:	697b      	ldr	r3, [r7, #20]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	24000f50 	.word	0x24000f50
 800a5e4:	24000f4c 	.word	0x24000f4c

0800a5e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b08e      	sub	sp, #56	@ 0x38
 800a5ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5ee:	e0ce      	b.n	800a78e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	da19      	bge.n	800a62a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a5f6:	1d3b      	adds	r3, r7, #4
 800a5f8:	3304      	adds	r3, #4
 800a5fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d10b      	bne.n	800a61a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a606:	f383 8811 	msr	BASEPRI, r3
 800a60a:	f3bf 8f6f 	isb	sy
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	61fb      	str	r3, [r7, #28]
}
 800a614:	bf00      	nop
 800a616:	bf00      	nop
 800a618:	e7fd      	b.n	800a616 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a620:	6850      	ldr	r0, [r2, #4]
 800a622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a624:	6892      	ldr	r2, [r2, #8]
 800a626:	4611      	mov	r1, r2
 800a628:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f2c0 80ae 	blt.w	800a78e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a638:	695b      	ldr	r3, [r3, #20]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d004      	beq.n	800a648 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a640:	3304      	adds	r3, #4
 800a642:	4618      	mov	r0, r3
 800a644:	f7fe f914 	bl	8008870 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a648:	463b      	mov	r3, r7
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff ff6a 	bl	800a524 <prvSampleTimeNow>
 800a650:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b09      	cmp	r3, #9
 800a656:	f200 8097 	bhi.w	800a788 <prvProcessReceivedCommands+0x1a0>
 800a65a:	a201      	add	r2, pc, #4	@ (adr r2, 800a660 <prvProcessReceivedCommands+0x78>)
 800a65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a660:	0800a689 	.word	0x0800a689
 800a664:	0800a689 	.word	0x0800a689
 800a668:	0800a689 	.word	0x0800a689
 800a66c:	0800a6ff 	.word	0x0800a6ff
 800a670:	0800a713 	.word	0x0800a713
 800a674:	0800a75f 	.word	0x0800a75f
 800a678:	0800a689 	.word	0x0800a689
 800a67c:	0800a689 	.word	0x0800a689
 800a680:	0800a6ff 	.word	0x0800a6ff
 800a684:	0800a713 	.word	0x0800a713
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a68a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a68e:	f043 0301 	orr.w	r3, r3, #1
 800a692:	b2da      	uxtb	r2, r3
 800a694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a696:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	18d1      	adds	r1, r2, r3
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6a8:	f7ff ff5c 	bl	800a564 <prvInsertTimerInActiveList>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d06c      	beq.n	800a78c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b4:	6a1b      	ldr	r3, [r3, #32]
 800a6b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a6c0:	f003 0304 	and.w	r3, r3, #4
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d061      	beq.n	800a78c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	441a      	add	r2, r3
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	9300      	str	r3, [sp, #0]
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6da:	f7ff fe01 	bl	800a2e0 <xTimerGenericCommand>
 800a6de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d152      	bne.n	800a78c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ea:	f383 8811 	msr	BASEPRI, r3
 800a6ee:	f3bf 8f6f 	isb	sy
 800a6f2:	f3bf 8f4f 	dsb	sy
 800a6f6:	61bb      	str	r3, [r7, #24]
}
 800a6f8:	bf00      	nop
 800a6fa:	bf00      	nop
 800a6fc:	e7fd      	b.n	800a6fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a700:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a704:	f023 0301 	bic.w	r3, r3, #1
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a70c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a710:	e03d      	b.n	800a78e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a714:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a718:	f043 0301 	orr.w	r3, r3, #1
 800a71c:	b2da      	uxtb	r2, r3
 800a71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a720:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a724:	68ba      	ldr	r2, [r7, #8]
 800a726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a728:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d10b      	bne.n	800a74a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	617b      	str	r3, [r7, #20]
}
 800a744:	bf00      	nop
 800a746:	bf00      	nop
 800a748:	e7fd      	b.n	800a746 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74c:	699a      	ldr	r2, [r3, #24]
 800a74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a750:	18d1      	adds	r1, r2, r3
 800a752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a758:	f7ff ff04 	bl	800a564 <prvInsertTimerInActiveList>
					break;
 800a75c:	e017      	b.n	800a78e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a760:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a764:	f003 0302 	and.w	r3, r3, #2
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d103      	bne.n	800a774 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a76c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a76e:	f000 fbeb 	bl	800af48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a772:	e00c      	b.n	800a78e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a776:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a77a:	f023 0301 	bic.w	r3, r3, #1
 800a77e:	b2da      	uxtb	r2, r3
 800a780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a782:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a786:	e002      	b.n	800a78e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a788:	bf00      	nop
 800a78a:	e000      	b.n	800a78e <prvProcessReceivedCommands+0x1a6>
					break;
 800a78c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a78e:	4b08      	ldr	r3, [pc, #32]	@ (800a7b0 <prvProcessReceivedCommands+0x1c8>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	1d39      	adds	r1, r7, #4
 800a794:	2200      	movs	r2, #0
 800a796:	4618      	mov	r0, r3
 800a798:	f7fe fb7a 	bl	8008e90 <xQueueReceive>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	f47f af26 	bne.w	800a5f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a7a4:	bf00      	nop
 800a7a6:	bf00      	nop
 800a7a8:	3730      	adds	r7, #48	@ 0x30
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	24000f54 	.word	0x24000f54

0800a7b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b088      	sub	sp, #32
 800a7b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7ba:	e049      	b.n	800a850 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a7bc:	4b2e      	ldr	r3, [pc, #184]	@ (800a878 <prvSwitchTimerLists+0xc4>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7c6:	4b2c      	ldr	r3, [pc, #176]	@ (800a878 <prvSwitchTimerLists+0xc4>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7fe f84b 	bl	8008870 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d02f      	beq.n	800a850 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	693a      	ldr	r2, [r7, #16]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d90e      	bls.n	800a820 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a80e:	4b1a      	ldr	r3, [pc, #104]	@ (800a878 <prvSwitchTimerLists+0xc4>)
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3304      	adds	r3, #4
 800a816:	4619      	mov	r1, r3
 800a818:	4610      	mov	r0, r2
 800a81a:	f7fd fff0 	bl	80087fe <vListInsert>
 800a81e:	e017      	b.n	800a850 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a820:	2300      	movs	r3, #0
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	2300      	movs	r3, #0
 800a826:	693a      	ldr	r2, [r7, #16]
 800a828:	2100      	movs	r1, #0
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f7ff fd58 	bl	800a2e0 <xTimerGenericCommand>
 800a830:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10b      	bne.n	800a850 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	603b      	str	r3, [r7, #0]
}
 800a84a:	bf00      	nop
 800a84c:	bf00      	nop
 800a84e:	e7fd      	b.n	800a84c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a850:	4b09      	ldr	r3, [pc, #36]	@ (800a878 <prvSwitchTimerLists+0xc4>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1b0      	bne.n	800a7bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a85a:	4b07      	ldr	r3, [pc, #28]	@ (800a878 <prvSwitchTimerLists+0xc4>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a860:	4b06      	ldr	r3, [pc, #24]	@ (800a87c <prvSwitchTimerLists+0xc8>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a04      	ldr	r2, [pc, #16]	@ (800a878 <prvSwitchTimerLists+0xc4>)
 800a866:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a868:	4a04      	ldr	r2, [pc, #16]	@ (800a87c <prvSwitchTimerLists+0xc8>)
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	6013      	str	r3, [r2, #0]
}
 800a86e:	bf00      	nop
 800a870:	3718      	adds	r7, #24
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	24000f4c 	.word	0x24000f4c
 800a87c:	24000f50 	.word	0x24000f50

0800a880 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a886:	f000 f96f 	bl	800ab68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a88a:	4b15      	ldr	r3, [pc, #84]	@ (800a8e0 <prvCheckForValidListAndQueue+0x60>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d120      	bne.n	800a8d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a892:	4814      	ldr	r0, [pc, #80]	@ (800a8e4 <prvCheckForValidListAndQueue+0x64>)
 800a894:	f7fd ff62 	bl	800875c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a898:	4813      	ldr	r0, [pc, #76]	@ (800a8e8 <prvCheckForValidListAndQueue+0x68>)
 800a89a:	f7fd ff5f 	bl	800875c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a89e:	4b13      	ldr	r3, [pc, #76]	@ (800a8ec <prvCheckForValidListAndQueue+0x6c>)
 800a8a0:	4a10      	ldr	r2, [pc, #64]	@ (800a8e4 <prvCheckForValidListAndQueue+0x64>)
 800a8a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a8a4:	4b12      	ldr	r3, [pc, #72]	@ (800a8f0 <prvCheckForValidListAndQueue+0x70>)
 800a8a6:	4a10      	ldr	r2, [pc, #64]	@ (800a8e8 <prvCheckForValidListAndQueue+0x68>)
 800a8a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	9300      	str	r3, [sp, #0]
 800a8ae:	4b11      	ldr	r3, [pc, #68]	@ (800a8f4 <prvCheckForValidListAndQueue+0x74>)
 800a8b0:	4a11      	ldr	r2, [pc, #68]	@ (800a8f8 <prvCheckForValidListAndQueue+0x78>)
 800a8b2:	2110      	movs	r1, #16
 800a8b4:	200a      	movs	r0, #10
 800a8b6:	f7fe f86f 	bl	8008998 <xQueueGenericCreateStatic>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	4a08      	ldr	r2, [pc, #32]	@ (800a8e0 <prvCheckForValidListAndQueue+0x60>)
 800a8be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a8c0:	4b07      	ldr	r3, [pc, #28]	@ (800a8e0 <prvCheckForValidListAndQueue+0x60>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d005      	beq.n	800a8d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a8c8:	4b05      	ldr	r3, [pc, #20]	@ (800a8e0 <prvCheckForValidListAndQueue+0x60>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	490b      	ldr	r1, [pc, #44]	@ (800a8fc <prvCheckForValidListAndQueue+0x7c>)
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fe fd52 	bl	8009378 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8d4:	f000 f97a 	bl	800abcc <vPortExitCritical>
}
 800a8d8:	bf00      	nop
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	24000f54 	.word	0x24000f54
 800a8e4:	24000f24 	.word	0x24000f24
 800a8e8:	24000f38 	.word	0x24000f38
 800a8ec:	24000f4c 	.word	0x24000f4c
 800a8f0:	24000f50 	.word	0x24000f50
 800a8f4:	24001000 	.word	0x24001000
 800a8f8:	24000f60 	.word	0x24000f60
 800a8fc:	0800b248 	.word	0x0800b248

0800a900 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	3b04      	subs	r3, #4
 800a910:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a918:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3b04      	subs	r3, #4
 800a91e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	f023 0201 	bic.w	r2, r3, #1
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	3b04      	subs	r3, #4
 800a92e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a930:	4a0c      	ldr	r2, [pc, #48]	@ (800a964 <pxPortInitialiseStack+0x64>)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	3b14      	subs	r3, #20
 800a93a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	3b04      	subs	r3, #4
 800a946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f06f 0202 	mvn.w	r2, #2
 800a94e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	3b20      	subs	r3, #32
 800a954:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a956:	68fb      	ldr	r3, [r7, #12]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3714      	adds	r7, #20
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr
 800a964:	0800a969 	.word	0x0800a969

0800a968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a968:	b480      	push	{r7}
 800a96a:	b085      	sub	sp, #20
 800a96c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a972:	4b13      	ldr	r3, [pc, #76]	@ (800a9c0 <prvTaskExitError+0x58>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a97a:	d00b      	beq.n	800a994 <prvTaskExitError+0x2c>
	__asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	60fb      	str	r3, [r7, #12]
}
 800a98e:	bf00      	nop
 800a990:	bf00      	nop
 800a992:	e7fd      	b.n	800a990 <prvTaskExitError+0x28>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	60bb      	str	r3, [r7, #8]
}
 800a9a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9a8:	bf00      	nop
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d0fc      	beq.n	800a9aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9b0:	bf00      	nop
 800a9b2:	bf00      	nop
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	24000010 	.word	0x24000010
	...

0800a9d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9d0:	4b07      	ldr	r3, [pc, #28]	@ (800a9f0 <pxCurrentTCBConst2>)
 800a9d2:	6819      	ldr	r1, [r3, #0]
 800a9d4:	6808      	ldr	r0, [r1, #0]
 800a9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9da:	f380 8809 	msr	PSP, r0
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f04f 0000 	mov.w	r0, #0
 800a9e6:	f380 8811 	msr	BASEPRI, r0
 800a9ea:	4770      	bx	lr
 800a9ec:	f3af 8000 	nop.w

0800a9f0 <pxCurrentTCBConst2>:
 800a9f0:	24000a24 	.word	0x24000a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop

0800a9f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a9f8:	4808      	ldr	r0, [pc, #32]	@ (800aa1c <prvPortStartFirstTask+0x24>)
 800a9fa:	6800      	ldr	r0, [r0, #0]
 800a9fc:	6800      	ldr	r0, [r0, #0]
 800a9fe:	f380 8808 	msr	MSP, r0
 800aa02:	f04f 0000 	mov.w	r0, #0
 800aa06:	f380 8814 	msr	CONTROL, r0
 800aa0a:	b662      	cpsie	i
 800aa0c:	b661      	cpsie	f
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	df00      	svc	0
 800aa18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa1a:	bf00      	nop
 800aa1c:	e000ed08 	.word	0xe000ed08

0800aa20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b086      	sub	sp, #24
 800aa24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800aa26:	4b47      	ldr	r3, [pc, #284]	@ (800ab44 <xPortStartScheduler+0x124>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a47      	ldr	r2, [pc, #284]	@ (800ab48 <xPortStartScheduler+0x128>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d10b      	bne.n	800aa48 <xPortStartScheduler+0x28>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	613b      	str	r3, [r7, #16]
}
 800aa42:	bf00      	nop
 800aa44:	bf00      	nop
 800aa46:	e7fd      	b.n	800aa44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800aa48:	4b3e      	ldr	r3, [pc, #248]	@ (800ab44 <xPortStartScheduler+0x124>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a3f      	ldr	r2, [pc, #252]	@ (800ab4c <xPortStartScheduler+0x12c>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d10b      	bne.n	800aa6a <xPortStartScheduler+0x4a>
	__asm volatile
 800aa52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa56:	f383 8811 	msr	BASEPRI, r3
 800aa5a:	f3bf 8f6f 	isb	sy
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	60fb      	str	r3, [r7, #12]
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop
 800aa68:	e7fd      	b.n	800aa66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa6a:	4b39      	ldr	r3, [pc, #228]	@ (800ab50 <xPortStartScheduler+0x130>)
 800aa6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	22ff      	movs	r2, #255	@ 0xff
 800aa7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa84:	78fb      	ldrb	r3, [r7, #3]
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	4b31      	ldr	r3, [pc, #196]	@ (800ab54 <xPortStartScheduler+0x134>)
 800aa90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa92:	4b31      	ldr	r3, [pc, #196]	@ (800ab58 <xPortStartScheduler+0x138>)
 800aa94:	2207      	movs	r2, #7
 800aa96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa98:	e009      	b.n	800aaae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800aa9a:	4b2f      	ldr	r3, [pc, #188]	@ (800ab58 <xPortStartScheduler+0x138>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	4a2d      	ldr	r2, [pc, #180]	@ (800ab58 <xPortStartScheduler+0x138>)
 800aaa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aaa4:	78fb      	ldrb	r3, [r7, #3]
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	005b      	lsls	r3, r3, #1
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaae:	78fb      	ldrb	r3, [r7, #3]
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aab6:	2b80      	cmp	r3, #128	@ 0x80
 800aab8:	d0ef      	beq.n	800aa9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aaba:	4b27      	ldr	r3, [pc, #156]	@ (800ab58 <xPortStartScheduler+0x138>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f1c3 0307 	rsb	r3, r3, #7
 800aac2:	2b04      	cmp	r3, #4
 800aac4:	d00b      	beq.n	800aade <xPortStartScheduler+0xbe>
	__asm volatile
 800aac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaca:	f383 8811 	msr	BASEPRI, r3
 800aace:	f3bf 8f6f 	isb	sy
 800aad2:	f3bf 8f4f 	dsb	sy
 800aad6:	60bb      	str	r3, [r7, #8]
}
 800aad8:	bf00      	nop
 800aada:	bf00      	nop
 800aadc:	e7fd      	b.n	800aada <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aade:	4b1e      	ldr	r3, [pc, #120]	@ (800ab58 <xPortStartScheduler+0x138>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	021b      	lsls	r3, r3, #8
 800aae4:	4a1c      	ldr	r2, [pc, #112]	@ (800ab58 <xPortStartScheduler+0x138>)
 800aae6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aae8:	4b1b      	ldr	r3, [pc, #108]	@ (800ab58 <xPortStartScheduler+0x138>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800aaf0:	4a19      	ldr	r2, [pc, #100]	@ (800ab58 <xPortStartScheduler+0x138>)
 800aaf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aafc:	4b17      	ldr	r3, [pc, #92]	@ (800ab5c <xPortStartScheduler+0x13c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a16      	ldr	r2, [pc, #88]	@ (800ab5c <xPortStartScheduler+0x13c>)
 800ab02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ab06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab08:	4b14      	ldr	r3, [pc, #80]	@ (800ab5c <xPortStartScheduler+0x13c>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a13      	ldr	r2, [pc, #76]	@ (800ab5c <xPortStartScheduler+0x13c>)
 800ab0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ab12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab14:	f000 f8da 	bl	800accc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab18:	4b11      	ldr	r3, [pc, #68]	@ (800ab60 <xPortStartScheduler+0x140>)
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab1e:	f000 f8f9 	bl	800ad14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab22:	4b10      	ldr	r3, [pc, #64]	@ (800ab64 <xPortStartScheduler+0x144>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a0f      	ldr	r2, [pc, #60]	@ (800ab64 <xPortStartScheduler+0x144>)
 800ab28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ab2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab2e:	f7ff ff63 	bl	800a9f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab32:	f7ff f839 	bl	8009ba8 <vTaskSwitchContext>
	prvTaskExitError();
 800ab36:	f7ff ff17 	bl	800a968 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3718      	adds	r7, #24
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	e000ed00 	.word	0xe000ed00
 800ab48:	410fc271 	.word	0x410fc271
 800ab4c:	410fc270 	.word	0x410fc270
 800ab50:	e000e400 	.word	0xe000e400
 800ab54:	24001050 	.word	0x24001050
 800ab58:	24001054 	.word	0x24001054
 800ab5c:	e000ed20 	.word	0xe000ed20
 800ab60:	24000010 	.word	0x24000010
 800ab64:	e000ef34 	.word	0xe000ef34

0800ab68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	607b      	str	r3, [r7, #4]
}
 800ab80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab82:	4b10      	ldr	r3, [pc, #64]	@ (800abc4 <vPortEnterCritical+0x5c>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	3301      	adds	r3, #1
 800ab88:	4a0e      	ldr	r2, [pc, #56]	@ (800abc4 <vPortEnterCritical+0x5c>)
 800ab8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	@ (800abc4 <vPortEnterCritical+0x5c>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d110      	bne.n	800abb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab94:	4b0c      	ldr	r3, [pc, #48]	@ (800abc8 <vPortEnterCritical+0x60>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00b      	beq.n	800abb6 <vPortEnterCritical+0x4e>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	603b      	str	r3, [r7, #0]
}
 800abb0:	bf00      	nop
 800abb2:	bf00      	nop
 800abb4:	e7fd      	b.n	800abb2 <vPortEnterCritical+0x4a>
	}
}
 800abb6:	bf00      	nop
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	24000010 	.word	0x24000010
 800abc8:	e000ed04 	.word	0xe000ed04

0800abcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abd2:	4b12      	ldr	r3, [pc, #72]	@ (800ac1c <vPortExitCritical+0x50>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d10b      	bne.n	800abf2 <vPortExitCritical+0x26>
	__asm volatile
 800abda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	607b      	str	r3, [r7, #4]
}
 800abec:	bf00      	nop
 800abee:	bf00      	nop
 800abf0:	e7fd      	b.n	800abee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800abf2:	4b0a      	ldr	r3, [pc, #40]	@ (800ac1c <vPortExitCritical+0x50>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3b01      	subs	r3, #1
 800abf8:	4a08      	ldr	r2, [pc, #32]	@ (800ac1c <vPortExitCritical+0x50>)
 800abfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800abfc:	4b07      	ldr	r3, [pc, #28]	@ (800ac1c <vPortExitCritical+0x50>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d105      	bne.n	800ac10 <vPortExitCritical+0x44>
 800ac04:	2300      	movs	r3, #0
 800ac06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	f383 8811 	msr	BASEPRI, r3
}
 800ac0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac10:	bf00      	nop
 800ac12:	370c      	adds	r7, #12
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	24000010 	.word	0x24000010

0800ac20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac20:	f3ef 8009 	mrs	r0, PSP
 800ac24:	f3bf 8f6f 	isb	sy
 800ac28:	4b15      	ldr	r3, [pc, #84]	@ (800ac80 <pxCurrentTCBConst>)
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	f01e 0f10 	tst.w	lr, #16
 800ac30:	bf08      	it	eq
 800ac32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3a:	6010      	str	r0, [r2, #0]
 800ac3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ac44:	f380 8811 	msr	BASEPRI, r0
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	f3bf 8f6f 	isb	sy
 800ac50:	f7fe ffaa 	bl	8009ba8 <vTaskSwitchContext>
 800ac54:	f04f 0000 	mov.w	r0, #0
 800ac58:	f380 8811 	msr	BASEPRI, r0
 800ac5c:	bc09      	pop	{r0, r3}
 800ac5e:	6819      	ldr	r1, [r3, #0]
 800ac60:	6808      	ldr	r0, [r1, #0]
 800ac62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac66:	f01e 0f10 	tst.w	lr, #16
 800ac6a:	bf08      	it	eq
 800ac6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac70:	f380 8809 	msr	PSP, r0
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	4770      	bx	lr
 800ac7a:	bf00      	nop
 800ac7c:	f3af 8000 	nop.w

0800ac80 <pxCurrentTCBConst>:
 800ac80:	24000a24 	.word	0x24000a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop

0800ac88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac92:	f383 8811 	msr	BASEPRI, r3
 800ac96:	f3bf 8f6f 	isb	sy
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	607b      	str	r3, [r7, #4]
}
 800aca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aca2:	f7fe fec7 	bl	8009a34 <xTaskIncrementTick>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d003      	beq.n	800acb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acac:	4b06      	ldr	r3, [pc, #24]	@ (800acc8 <xPortSysTickHandler+0x40>)
 800acae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	2300      	movs	r3, #0
 800acb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	f383 8811 	msr	BASEPRI, r3
}
 800acbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800acc0:	bf00      	nop
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	e000ed04 	.word	0xe000ed04

0800accc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800accc:	b480      	push	{r7}
 800acce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800acd0:	4b0b      	ldr	r3, [pc, #44]	@ (800ad00 <vPortSetupTimerInterrupt+0x34>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acd6:	4b0b      	ldr	r3, [pc, #44]	@ (800ad04 <vPortSetupTimerInterrupt+0x38>)
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acdc:	4b0a      	ldr	r3, [pc, #40]	@ (800ad08 <vPortSetupTimerInterrupt+0x3c>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a0a      	ldr	r2, [pc, #40]	@ (800ad0c <vPortSetupTimerInterrupt+0x40>)
 800ace2:	fba2 2303 	umull	r2, r3, r2, r3
 800ace6:	099b      	lsrs	r3, r3, #6
 800ace8:	4a09      	ldr	r2, [pc, #36]	@ (800ad10 <vPortSetupTimerInterrupt+0x44>)
 800acea:	3b01      	subs	r3, #1
 800acec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800acee:	4b04      	ldr	r3, [pc, #16]	@ (800ad00 <vPortSetupTimerInterrupt+0x34>)
 800acf0:	2207      	movs	r2, #7
 800acf2:	601a      	str	r2, [r3, #0]
}
 800acf4:	bf00      	nop
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	e000e010 	.word	0xe000e010
 800ad04:	e000e018 	.word	0xe000e018
 800ad08:	24000000 	.word	0x24000000
 800ad0c:	10624dd3 	.word	0x10624dd3
 800ad10:	e000e014 	.word	0xe000e014

0800ad14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ad24 <vPortEnableVFP+0x10>
 800ad18:	6801      	ldr	r1, [r0, #0]
 800ad1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ad1e:	6001      	str	r1, [r0, #0]
 800ad20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad22:	bf00      	nop
 800ad24:	e000ed88 	.word	0xe000ed88

0800ad28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad2e:	f3ef 8305 	mrs	r3, IPSR
 800ad32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2b0f      	cmp	r3, #15
 800ad38:	d915      	bls.n	800ad66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad3a:	4a18      	ldr	r2, [pc, #96]	@ (800ad9c <vPortValidateInterruptPriority+0x74>)
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	4413      	add	r3, r2
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad44:	4b16      	ldr	r3, [pc, #88]	@ (800ada0 <vPortValidateInterruptPriority+0x78>)
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	7afa      	ldrb	r2, [r7, #11]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d20b      	bcs.n	800ad66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ad4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad52:	f383 8811 	msr	BASEPRI, r3
 800ad56:	f3bf 8f6f 	isb	sy
 800ad5a:	f3bf 8f4f 	dsb	sy
 800ad5e:	607b      	str	r3, [r7, #4]
}
 800ad60:	bf00      	nop
 800ad62:	bf00      	nop
 800ad64:	e7fd      	b.n	800ad62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad66:	4b0f      	ldr	r3, [pc, #60]	@ (800ada4 <vPortValidateInterruptPriority+0x7c>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ad6e:	4b0e      	ldr	r3, [pc, #56]	@ (800ada8 <vPortValidateInterruptPriority+0x80>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d90b      	bls.n	800ad8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ad76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	603b      	str	r3, [r7, #0]
}
 800ad88:	bf00      	nop
 800ad8a:	bf00      	nop
 800ad8c:	e7fd      	b.n	800ad8a <vPortValidateInterruptPriority+0x62>
	}
 800ad8e:	bf00      	nop
 800ad90:	3714      	adds	r7, #20
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	e000e3f0 	.word	0xe000e3f0
 800ada0:	24001050 	.word	0x24001050
 800ada4:	e000ed0c 	.word	0xe000ed0c
 800ada8:	24001054 	.word	0x24001054

0800adac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b08a      	sub	sp, #40	@ 0x28
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800adb4:	2300      	movs	r3, #0
 800adb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800adb8:	f7fe fd80 	bl	80098bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800adbc:	4b5c      	ldr	r3, [pc, #368]	@ (800af30 <pvPortMalloc+0x184>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d101      	bne.n	800adc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800adc4:	f000 f924 	bl	800b010 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800adc8:	4b5a      	ldr	r3, [pc, #360]	@ (800af34 <pvPortMalloc+0x188>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4013      	ands	r3, r2
 800add0:	2b00      	cmp	r3, #0
 800add2:	f040 8095 	bne.w	800af00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d01e      	beq.n	800ae1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800addc:	2208      	movs	r2, #8
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4413      	add	r3, r2
 800ade2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f003 0307 	and.w	r3, r3, #7
 800adea:	2b00      	cmp	r3, #0
 800adec:	d015      	beq.n	800ae1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f023 0307 	bic.w	r3, r3, #7
 800adf4:	3308      	adds	r3, #8
 800adf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f003 0307 	and.w	r3, r3, #7
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00b      	beq.n	800ae1a <pvPortMalloc+0x6e>
	__asm volatile
 800ae02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae06:	f383 8811 	msr	BASEPRI, r3
 800ae0a:	f3bf 8f6f 	isb	sy
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	617b      	str	r3, [r7, #20]
}
 800ae14:	bf00      	nop
 800ae16:	bf00      	nop
 800ae18:	e7fd      	b.n	800ae16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d06f      	beq.n	800af00 <pvPortMalloc+0x154>
 800ae20:	4b45      	ldr	r3, [pc, #276]	@ (800af38 <pvPortMalloc+0x18c>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d86a      	bhi.n	800af00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae2a:	4b44      	ldr	r3, [pc, #272]	@ (800af3c <pvPortMalloc+0x190>)
 800ae2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae2e:	4b43      	ldr	r3, [pc, #268]	@ (800af3c <pvPortMalloc+0x190>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae34:	e004      	b.n	800ae40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ae36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d903      	bls.n	800ae52 <pvPortMalloc+0xa6>
 800ae4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1f1      	bne.n	800ae36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae52:	4b37      	ldr	r3, [pc, #220]	@ (800af30 <pvPortMalloc+0x184>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d051      	beq.n	800af00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae5c:	6a3b      	ldr	r3, [r7, #32]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	2208      	movs	r2, #8
 800ae62:	4413      	add	r3, r2
 800ae64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
 800ae6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae70:	685a      	ldr	r2, [r3, #4]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	1ad2      	subs	r2, r2, r3
 800ae76:	2308      	movs	r3, #8
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d920      	bls.n	800aec0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4413      	add	r3, r2
 800ae84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	f003 0307 	and.w	r3, r3, #7
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00b      	beq.n	800aea8 <pvPortMalloc+0xfc>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	613b      	str	r3, [r7, #16]
}
 800aea2:	bf00      	nop
 800aea4:	bf00      	nop
 800aea6:	e7fd      	b.n	800aea4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeaa:	685a      	ldr	r2, [r3, #4]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	1ad2      	subs	r2, r2, r3
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aeba:	69b8      	ldr	r0, [r7, #24]
 800aebc:	f000 f90a 	bl	800b0d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aec0:	4b1d      	ldr	r3, [pc, #116]	@ (800af38 <pvPortMalloc+0x18c>)
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	1ad3      	subs	r3, r2, r3
 800aeca:	4a1b      	ldr	r2, [pc, #108]	@ (800af38 <pvPortMalloc+0x18c>)
 800aecc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aece:	4b1a      	ldr	r3, [pc, #104]	@ (800af38 <pvPortMalloc+0x18c>)
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	4b1b      	ldr	r3, [pc, #108]	@ (800af40 <pvPortMalloc+0x194>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d203      	bcs.n	800aee2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aeda:	4b17      	ldr	r3, [pc, #92]	@ (800af38 <pvPortMalloc+0x18c>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a18      	ldr	r2, [pc, #96]	@ (800af40 <pvPortMalloc+0x194>)
 800aee0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee4:	685a      	ldr	r2, [r3, #4]
 800aee6:	4b13      	ldr	r3, [pc, #76]	@ (800af34 <pvPortMalloc+0x188>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	431a      	orrs	r2, r3
 800aeec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef2:	2200      	movs	r2, #0
 800aef4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aef6:	4b13      	ldr	r3, [pc, #76]	@ (800af44 <pvPortMalloc+0x198>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	3301      	adds	r3, #1
 800aefc:	4a11      	ldr	r2, [pc, #68]	@ (800af44 <pvPortMalloc+0x198>)
 800aefe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af00:	f7fe fcea 	bl	80098d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	f003 0307 	and.w	r3, r3, #7
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00b      	beq.n	800af26 <pvPortMalloc+0x17a>
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	60fb      	str	r3, [r7, #12]
}
 800af20:	bf00      	nop
 800af22:	bf00      	nop
 800af24:	e7fd      	b.n	800af22 <pvPortMalloc+0x176>
	return pvReturn;
 800af26:	69fb      	ldr	r3, [r7, #28]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3728      	adds	r7, #40	@ 0x28
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	24004c60 	.word	0x24004c60
 800af34:	24004c74 	.word	0x24004c74
 800af38:	24004c64 	.word	0x24004c64
 800af3c:	24004c58 	.word	0x24004c58
 800af40:	24004c68 	.word	0x24004c68
 800af44:	24004c6c 	.word	0x24004c6c

0800af48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b086      	sub	sp, #24
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d04f      	beq.n	800affa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af5a:	2308      	movs	r3, #8
 800af5c:	425b      	negs	r3, r3
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	4413      	add	r3, r2
 800af62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	4b25      	ldr	r3, [pc, #148]	@ (800b004 <vPortFree+0xbc>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4013      	ands	r3, r2
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10b      	bne.n	800af8e <vPortFree+0x46>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	60fb      	str	r3, [r7, #12]
}
 800af88:	bf00      	nop
 800af8a:	bf00      	nop
 800af8c:	e7fd      	b.n	800af8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00b      	beq.n	800afae <vPortFree+0x66>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	60bb      	str	r3, [r7, #8]
}
 800afa8:	bf00      	nop
 800afaa:	bf00      	nop
 800afac:	e7fd      	b.n	800afaa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	685a      	ldr	r2, [r3, #4]
 800afb2:	4b14      	ldr	r3, [pc, #80]	@ (800b004 <vPortFree+0xbc>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4013      	ands	r3, r2
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d01e      	beq.n	800affa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d11a      	bne.n	800affa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	4b0e      	ldr	r3, [pc, #56]	@ (800b004 <vPortFree+0xbc>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	43db      	mvns	r3, r3
 800afce:	401a      	ands	r2, r3
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800afd4:	f7fe fc72 	bl	80098bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	4b0a      	ldr	r3, [pc, #40]	@ (800b008 <vPortFree+0xc0>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4413      	add	r3, r2
 800afe2:	4a09      	ldr	r2, [pc, #36]	@ (800b008 <vPortFree+0xc0>)
 800afe4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800afe6:	6938      	ldr	r0, [r7, #16]
 800afe8:	f000 f874 	bl	800b0d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800afec:	4b07      	ldr	r3, [pc, #28]	@ (800b00c <vPortFree+0xc4>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	3301      	adds	r3, #1
 800aff2:	4a06      	ldr	r2, [pc, #24]	@ (800b00c <vPortFree+0xc4>)
 800aff4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aff6:	f7fe fc6f 	bl	80098d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800affa:	bf00      	nop
 800affc:	3718      	adds	r7, #24
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	24004c74 	.word	0x24004c74
 800b008:	24004c64 	.word	0x24004c64
 800b00c:	24004c70 	.word	0x24004c70

0800b010 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b016:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b01a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b01c:	4b27      	ldr	r3, [pc, #156]	@ (800b0bc <prvHeapInit+0xac>)
 800b01e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	f003 0307 	and.w	r3, r3, #7
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00c      	beq.n	800b044 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3307      	adds	r3, #7
 800b02e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f023 0307 	bic.w	r3, r3, #7
 800b036:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	4a1f      	ldr	r2, [pc, #124]	@ (800b0bc <prvHeapInit+0xac>)
 800b040:	4413      	add	r3, r2
 800b042:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b048:	4a1d      	ldr	r2, [pc, #116]	@ (800b0c0 <prvHeapInit+0xb0>)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b04e:	4b1c      	ldr	r3, [pc, #112]	@ (800b0c0 <prvHeapInit+0xb0>)
 800b050:	2200      	movs	r2, #0
 800b052:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	68ba      	ldr	r2, [r7, #8]
 800b058:	4413      	add	r3, r2
 800b05a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b05c:	2208      	movs	r2, #8
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	1a9b      	subs	r3, r3, r2
 800b062:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f023 0307 	bic.w	r3, r3, #7
 800b06a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	4a15      	ldr	r2, [pc, #84]	@ (800b0c4 <prvHeapInit+0xb4>)
 800b070:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b072:	4b14      	ldr	r3, [pc, #80]	@ (800b0c4 <prvHeapInit+0xb4>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2200      	movs	r2, #0
 800b078:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b07a:	4b12      	ldr	r3, [pc, #72]	@ (800b0c4 <prvHeapInit+0xb4>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2200      	movs	r2, #0
 800b080:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	1ad2      	subs	r2, r2, r3
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b090:	4b0c      	ldr	r3, [pc, #48]	@ (800b0c4 <prvHeapInit+0xb4>)
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	4a0a      	ldr	r2, [pc, #40]	@ (800b0c8 <prvHeapInit+0xb8>)
 800b09e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	4a09      	ldr	r2, [pc, #36]	@ (800b0cc <prvHeapInit+0xbc>)
 800b0a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0a8:	4b09      	ldr	r3, [pc, #36]	@ (800b0d0 <prvHeapInit+0xc0>)
 800b0aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b0ae:	601a      	str	r2, [r3, #0]
}
 800b0b0:	bf00      	nop
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr
 800b0bc:	24001058 	.word	0x24001058
 800b0c0:	24004c58 	.word	0x24004c58
 800b0c4:	24004c60 	.word	0x24004c60
 800b0c8:	24004c68 	.word	0x24004c68
 800b0cc:	24004c64 	.word	0x24004c64
 800b0d0:	24004c74 	.word	0x24004c74

0800b0d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0dc:	4b28      	ldr	r3, [pc, #160]	@ (800b180 <prvInsertBlockIntoFreeList+0xac>)
 800b0de:	60fb      	str	r3, [r7, #12]
 800b0e0:	e002      	b.n	800b0e8 <prvInsertBlockIntoFreeList+0x14>
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	60fb      	str	r3, [r7, #12]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	687a      	ldr	r2, [r7, #4]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d8f7      	bhi.n	800b0e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	429a      	cmp	r2, r3
 800b102:	d108      	bne.n	800b116 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	685a      	ldr	r2, [r3, #4]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	441a      	add	r2, r3
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	441a      	add	r2, r3
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	429a      	cmp	r2, r3
 800b128:	d118      	bne.n	800b15c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	4b15      	ldr	r3, [pc, #84]	@ (800b184 <prvInsertBlockIntoFreeList+0xb0>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	429a      	cmp	r2, r3
 800b134:	d00d      	beq.n	800b152 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	685a      	ldr	r2, [r3, #4]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	441a      	add	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	601a      	str	r2, [r3, #0]
 800b150:	e008      	b.n	800b164 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b152:	4b0c      	ldr	r3, [pc, #48]	@ (800b184 <prvInsertBlockIntoFreeList+0xb0>)
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	601a      	str	r2, [r3, #0]
 800b15a:	e003      	b.n	800b164 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681a      	ldr	r2, [r3, #0]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d002      	beq.n	800b172 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b172:	bf00      	nop
 800b174:	3714      	adds	r7, #20
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	24004c58 	.word	0x24004c58
 800b184:	24004c60 	.word	0x24004c60

0800b188 <memset>:
 800b188:	4402      	add	r2, r0
 800b18a:	4603      	mov	r3, r0
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d100      	bne.n	800b192 <memset+0xa>
 800b190:	4770      	bx	lr
 800b192:	f803 1b01 	strb.w	r1, [r3], #1
 800b196:	e7f9      	b.n	800b18c <memset+0x4>

0800b198 <__libc_init_array>:
 800b198:	b570      	push	{r4, r5, r6, lr}
 800b19a:	4d0d      	ldr	r5, [pc, #52]	@ (800b1d0 <__libc_init_array+0x38>)
 800b19c:	4c0d      	ldr	r4, [pc, #52]	@ (800b1d4 <__libc_init_array+0x3c>)
 800b19e:	1b64      	subs	r4, r4, r5
 800b1a0:	10a4      	asrs	r4, r4, #2
 800b1a2:	2600      	movs	r6, #0
 800b1a4:	42a6      	cmp	r6, r4
 800b1a6:	d109      	bne.n	800b1bc <__libc_init_array+0x24>
 800b1a8:	4d0b      	ldr	r5, [pc, #44]	@ (800b1d8 <__libc_init_array+0x40>)
 800b1aa:	4c0c      	ldr	r4, [pc, #48]	@ (800b1dc <__libc_init_array+0x44>)
 800b1ac:	f000 f826 	bl	800b1fc <_init>
 800b1b0:	1b64      	subs	r4, r4, r5
 800b1b2:	10a4      	asrs	r4, r4, #2
 800b1b4:	2600      	movs	r6, #0
 800b1b6:	42a6      	cmp	r6, r4
 800b1b8:	d105      	bne.n	800b1c6 <__libc_init_array+0x2e>
 800b1ba:	bd70      	pop	{r4, r5, r6, pc}
 800b1bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1c0:	4798      	blx	r3
 800b1c2:	3601      	adds	r6, #1
 800b1c4:	e7ee      	b.n	800b1a4 <__libc_init_array+0xc>
 800b1c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1ca:	4798      	blx	r3
 800b1cc:	3601      	adds	r6, #1
 800b1ce:	e7f2      	b.n	800b1b6 <__libc_init_array+0x1e>
 800b1d0:	0800b4fc 	.word	0x0800b4fc
 800b1d4:	0800b4fc 	.word	0x0800b4fc
 800b1d8:	0800b4fc 	.word	0x0800b4fc
 800b1dc:	0800b500 	.word	0x0800b500

0800b1e0 <memcpy>:
 800b1e0:	440a      	add	r2, r1
 800b1e2:	4291      	cmp	r1, r2
 800b1e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1e8:	d100      	bne.n	800b1ec <memcpy+0xc>
 800b1ea:	4770      	bx	lr
 800b1ec:	b510      	push	{r4, lr}
 800b1ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1f6:	4291      	cmp	r1, r2
 800b1f8:	d1f9      	bne.n	800b1ee <memcpy+0xe>
 800b1fa:	bd10      	pop	{r4, pc}

0800b1fc <_init>:
 800b1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fe:	bf00      	nop
 800b200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b202:	bc08      	pop	{r3}
 800b204:	469e      	mov	lr, r3
 800b206:	4770      	bx	lr

0800b208 <_fini>:
 800b208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20a:	bf00      	nop
 800b20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b20e:	bc08      	pop	{r3}
 800b210:	469e      	mov	lr, r3
 800b212:	4770      	bx	lr
